{
    "config": {
        "indexing": "full",
        "lang": [
            "en"
        ],
        "min_search_length": 3,
        "prebuild_index": false,
        "separator": "[\\s\\-\\.]+"
    },
    "docs": [
        {
            "location": "",
            "text": "These docs are best viewed at https://dnut.github.io/Rewrap For VS Code , Open VSX and Visual Studio . Latest stable version 1.16.3 / pre-release 17.x / changelog Rewrap The main Rewrap command is: Rewrap Comment / Text , by default bound to Alt+Q . With the cursor in a comment block, hit this to re-wrap the contents to the specified wrapping column . Features Re-wrap comment blocks in many languages, with per-language settings. Smart handling of contents, including Java-/JS-/XMLDoc tags and code examples. Can select lines to wrap or multiple comments/paragraphs at once (even the whole document). Also works with Markdown documents, LaTeX or any kind of plain text file. The contents of comments are usually parsed as markdown, so you can use lists, code samples (which are untouched) etc: See the docs site for more info. Selections If you select just a couple of lines, only those lines will be processed. In VS Code you can use multiple selections (alt+click) to select multiple comment blocks or line ranges. However you can safely select a large line range with multiple comments and code, and only the comments will be wrapped (the code is untouched). You can Ctrl+A, Alt+Q to re-wrap a whole document at once. Next See the following pages on configuration of settings and keybindings, and extra features . .md-typeset h1 { font-size: 2.5em } .md-content__button { display: none } .hideOnDocsSite { display: none }",
            "title": "Getting Started"
        },
        {
            "location": "#features",
            "text": "Re-wrap comment blocks in many languages, with per-language settings. Smart handling of contents, including Java-/JS-/XMLDoc tags and code examples. Can select lines to wrap or multiple comments/paragraphs at once (even the whole document). Also works with Markdown documents, LaTeX or any kind of plain text file. The contents of comments are usually parsed as markdown, so you can use lists, code samples (which are untouched) etc: See the docs site for more info.",
            "title": "Features"
        },
        {
            "location": "#selections",
            "text": "If you select just a couple of lines, only those lines will be processed. In VS Code you can use multiple selections (alt+click) to select multiple comment blocks or line ranges. However you can safely select a large line range with multiple comments and code, and only the comments will be wrapped (the code is untouched). You can Ctrl+A, Alt+Q to re-wrap a whole document at once.",
            "title": "Selections"
        },
        {
            "location": "#next",
            "text": "See the following pages on configuration of settings and keybindings, and extra features . .md-typeset h1 { font-size: 2.5em } .md-content__button { display: none } .hideOnDocsSite { display: none }",
            "title": "Next"
        },
        {
            "location": "configuration-visual-studio/",
            "text": "Configuration in Visual Studio Configure through the Rewrap section of Tools > Options. Settings can be made globally, or per language/file type group. Wrapping column The recommended way to set a wrapping column is to use a ruler (see below), which also gives a visual indication. If you don't want to do that, then you can use the \"Wrapping column\" setting. a value of 80 for example will wrap after 80 characters. Wrapping to rulers To enable wrapping to rulers, the \"Wrapping column\" setting must be left blank. Visual Studio doesn't come with a rulers feature, so this is done in combination with the Editor Guidelines extension. Once that extension is installed, you can right-click in the editor to add guidelines manually, or you can set them up in an .editorconfig file . If you have multiple rulers, you can choose which ruler to wrap to while editing . Wrap whole comments With \"Wrap whole comments\" set to true (default), Rewrap will wrap a whole comment block when a text cursor is inside it. But when set to false , Rewrap will only wrap that paragraph within the comment. \\ (Here the second paragraph is not wrapped) Note: This setting only affects empty selections. You can always manually select the lines to wrap. Double sentence spacing If enabled, whenever a paragraph is wrapped, for any lines that end in \".\", \"?\" or \"!\", two spaces will be added after that sentence when the paragraph is rewrapped. This is not enabled by default. ( details ) Per-language settings Per-language settings can be added by clicking on the \"Add...\" button at the end of the list. Choose the languages to add to the group, and set the options for the group as needed. If an option here is left blank the global setting will be used. Auto-wrap Auto-wrap is turned off by default. Turning it on is global: it affects all documents edited. In code files, only comments will be affected, so it's pretty safe to leave it on. On the Edit menu, under the Rewrap Lines command, is the Toggle Auto-Wrap item. The check-mark shows the status and a brief statusbar message is shown when turning on/off. You can add a keybinding for the Toggle Auto-Wrap command. Keybindings The Rewrap command is by default bound to Alt+Q . This can be changed if you wish by going to Tools > Options , then Environment > Keyboard . In this dialog pane search for the command Edit.RewrapLines and you can add a different shortcut. To add a shortcut for the Toggle Auto-Wrap command, search for Edit.ToggleAutoWrap .",
            "title": "Configuration in Visual Studio"
        },
        {
            "location": "configuration-visual-studio/#configuration-in-visual-studio",
            "text": "Configure through the Rewrap section of Tools > Options. Settings can be made globally, or per language/file type group.",
            "title": "Configuration in Visual Studio"
        },
        {
            "location": "configuration-visual-studio/#wrapping-column",
            "text": "The recommended way to set a wrapping column is to use a ruler (see below), which also gives a visual indication. If you don't want to do that, then you can use the \"Wrapping column\" setting. a value of 80 for example will wrap after 80 characters.",
            "title": "Wrapping column"
        },
        {
            "location": "configuration-visual-studio/#wrapping-to-rulers",
            "text": "To enable wrapping to rulers, the \"Wrapping column\" setting must be left blank. Visual Studio doesn't come with a rulers feature, so this is done in combination with the Editor Guidelines extension. Once that extension is installed, you can right-click in the editor to add guidelines manually, or you can set them up in an .editorconfig file . If you have multiple rulers, you can choose which ruler to wrap to while editing .",
            "title": "Wrapping to rulers"
        },
        {
            "location": "configuration-visual-studio/#wrap-whole-comments",
            "text": "With \"Wrap whole comments\" set to true (default), Rewrap will wrap a whole comment block when a text cursor is inside it. But when set to false , Rewrap will only wrap that paragraph within the comment. \\ (Here the second paragraph is not wrapped) Note: This setting only affects empty selections. You can always manually select the lines to wrap.",
            "title": "Wrap whole comments"
        },
        {
            "location": "configuration-visual-studio/#double-sentence-spacing",
            "text": "If enabled, whenever a paragraph is wrapped, for any lines that end in \".\", \"?\" or \"!\", two spaces will be added after that sentence when the paragraph is rewrapped. This is not enabled by default. ( details )",
            "title": "Double sentence spacing"
        },
        {
            "location": "configuration-visual-studio/#per-language-settings",
            "text": "Per-language settings can be added by clicking on the \"Add...\" button at the end of the list. Choose the languages to add to the group, and set the options for the group as needed. If an option here is left blank the global setting will be used.",
            "title": "Per-language settings"
        },
        {
            "location": "configuration-visual-studio/#auto-wrap",
            "text": "Auto-wrap is turned off by default. Turning it on is global: it affects all documents edited. In code files, only comments will be affected, so it's pretty safe to leave it on. On the Edit menu, under the Rewrap Lines command, is the Toggle Auto-Wrap item. The check-mark shows the status and a brief statusbar message is shown when turning on/off. You can add a keybinding for the Toggle Auto-Wrap command.",
            "title": "Auto-wrap"
        },
        {
            "location": "configuration-visual-studio/#keybindings",
            "text": "The Rewrap command is by default bound to Alt+Q . This can be changed if you wish by going to Tools > Options , then Environment > Keyboard . In this dialog pane search for the command Edit.RewrapLines and you can add a different shortcut. To add a shortcut for the Toggle Auto-Wrap command, search for Edit.ToggleAutoWrap .",
            "title": "Keybindings"
        },
        {
            "location": "configuration/",
            "text": "Configuration This is for VS Code. Go here for configuration in Visual Studio . Configure though the settings UI ( Preferences: Open Settings (UI) > Rewrap section ) where possible, or add them to your user or workspace settings file . All settings can be set per language/file type ( see below ). Summary Setting Json ID Values (default first) Auto Wrap: Enabled rewrap.autoWrap.enabled false | true Auto Wrap: Notification rewrap.autoWrap.notification \"icon\" | \"text\" Double Sentence Spacing rewrap.doubleSentenceSpacing false | true Whole Comment rewrap.wholeComment true | false Wrapping Column rewrap.wrappingColumn <number> Wrapping column The recommended way to set a wrapping column is to use a ruler (see below), which also gives a visual indication. If you don't want to do that, then you can use the Wrapping Column setting. This takes precedence over other options. { // Wraps after 72 characters \"rewrap.wrappingColumn\" : 72 } If neither this nor any rulers are set, then VS Code's editor.wordWrapColumn setting is used. This has a default of 80. Wrapping to rulers To enable wrapping to rulers, rewrap.wrappingColumn must not be set. If you have a ruler set up in VS Code, Rewrap will wrap to that ruler. If you have multiple rulers, you can choose which ruler to wrap to while editing. Just press Alt+Q multiple times to wrap to each ruler in turn. The ruler chosen is then remembered for that document for the rest of the session. It cycles through the rulers in the order in which they appear in settings; so if you have a most commonly used ruler, you probably want to put that first. Whole Comment \"rewrap.wholeComment\" : true ` When this is true , Rewrap will wrap a whole comment block when a text cursor is inside it. But when set to false , Rewrap will only wrap that paragraph within the comment. (Here the second paragraph is not wrapped) Note: This setting only affects empty selections. You can always manually select the lines to wrap. Double Sentence Spacing \"rewrap.doubleSentenceSpacing\" : false If enabled, whenever a paragraph is wrapped, for any lines that end in \".\", \"?\" or \"!\", two spaces will be added after that sentence when the paragraph is rewrapped. This is not enabled by default. ( details ) Auto-wrap Auto-wrap works like the auto-fill mode in Emacs. When pressing <space> or <enter> after the cursor is past the wrapping column, that line is wrapped onto the next. Like in the Emacs function, auto-wrap does not attempt to re-flow the entire paragraph; it only adds a break in the current line. It's handy when typing new text, but won't automatically fix a paragraph after inserting/removing text. For this you can always do a standard alt+q after making edits. Enabling Auto-wrap is disabled by default, but can be enabled with the Rewrap > Auto Wrap: Enabled setting. This setting ( rewrap.autoWrap.enabled ) can also be set per language/document type . Even when enabled, it will only activate within comments in code files, not on code lines, so it's usually ok to leave it enabled. To temporarily enable or disable auto-wrap for the current document , you can use the Rewrap: Toggle Auto-Wrap command in the command palette. There's no default keybinding for the toggle command, but you can add one, eg shift+alt+q , by binding to the command ID rewrap.toggleAutoWrap in the Keyboard Shortcuts editor . Notification To help keep track of when auto-wrap is on or off, there is a small (optional, but on by default) icon/notification in the right of the statusbar, that shows the auto-wrap state for the current document. It has 4 states: (normal) on (enabled in settings) (hidden) off (disabled in settings) (orange) temporarily enabled (from toggle command) (gray) temporarily disabled (from toggle command) Hovering over this icon will give more information. If you don't like the icon, you can hide it , or change the Rewrap > AutoWrap: Notification setting to \"text\" . Then it will instead show a brief text message in the status bar for a few seconds whenever auto-wrap is toggled on or off. Language-specific settings See also the VS Code documentation . This example sets the wrapping at column 72 for Python, with doubleSentenceSpacing on, and the wrapping column at 90 for Javascript. { \"[python]\" : { \"editor.rulers\" : [ 72 , 79 ], \"rewrap.doubleSentenceSpacing\" : true }, \"[javascript]\" : { \"editor.rulers\" : [ 90 ] } } VS Code has a helper command for adding language sections to your settings file: press F1 and search for Preferences: Configure Language Specific Settings... . Note: Be aware that a global rewrap.wrappingColumn setting will take precedence over a language-specific editor.rulers setting. Keybindings Rewrap's main command has the default keybinding Alt+Q . If you want to change it to something else, add something like this to your keybindings.json file. For example for Ctrl+Shift+Q : { \"key\" : \"ctrl+shift+q\" , \"command\" : \"rewrap.rewrapComment\" } There are two other commands you can add keybindings for (eg alt+shift+q ): Command ID \"Wrap Comment / Text at column...\" rewrap.rewrapCommentAt \"Toggle Auto-Wrap for Current Document\" rewrap.toggleAutoWrap",
            "title": "Configuration"
        },
        {
            "location": "configuration/#configuration",
            "text": "This is for VS Code. Go here for configuration in Visual Studio . Configure though the settings UI ( Preferences: Open Settings (UI) > Rewrap section ) where possible, or add them to your user or workspace settings file . All settings can be set per language/file type ( see below ).",
            "title": "Configuration"
        },
        {
            "location": "configuration/#summary",
            "text": "Setting Json ID Values (default first) Auto Wrap: Enabled rewrap.autoWrap.enabled false | true Auto Wrap: Notification rewrap.autoWrap.notification \"icon\" | \"text\" Double Sentence Spacing rewrap.doubleSentenceSpacing false | true Whole Comment rewrap.wholeComment true | false Wrapping Column rewrap.wrappingColumn <number>",
            "title": "Summary"
        },
        {
            "location": "configuration/#wrapping-column",
            "text": "The recommended way to set a wrapping column is to use a ruler (see below), which also gives a visual indication. If you don't want to do that, then you can use the Wrapping Column setting. This takes precedence over other options. { // Wraps after 72 characters \"rewrap.wrappingColumn\" : 72 } If neither this nor any rulers are set, then VS Code's editor.wordWrapColumn setting is used. This has a default of 80.",
            "title": "Wrapping column"
        },
        {
            "location": "configuration/#wrapping-to-rulers",
            "text": "To enable wrapping to rulers, rewrap.wrappingColumn must not be set. If you have a ruler set up in VS Code, Rewrap will wrap to that ruler. If you have multiple rulers, you can choose which ruler to wrap to while editing. Just press Alt+Q multiple times to wrap to each ruler in turn. The ruler chosen is then remembered for that document for the rest of the session. It cycles through the rulers in the order in which they appear in settings; so if you have a most commonly used ruler, you probably want to put that first.",
            "title": "Wrapping to rulers"
        },
        {
            "location": "configuration/#whole-comment",
            "text": "\"rewrap.wholeComment\" : true ` When this is true , Rewrap will wrap a whole comment block when a text cursor is inside it. But when set to false , Rewrap will only wrap that paragraph within the comment. (Here the second paragraph is not wrapped) Note: This setting only affects empty selections. You can always manually select the lines to wrap.",
            "title": "Whole Comment"
        },
        {
            "location": "configuration/#double-sentence-spacing",
            "text": "\"rewrap.doubleSentenceSpacing\" : false If enabled, whenever a paragraph is wrapped, for any lines that end in \".\", \"?\" or \"!\", two spaces will be added after that sentence when the paragraph is rewrapped. This is not enabled by default. ( details )",
            "title": "Double Sentence Spacing"
        },
        {
            "location": "configuration/#auto-wrap",
            "text": "Auto-wrap works like the auto-fill mode in Emacs. When pressing <space> or <enter> after the cursor is past the wrapping column, that line is wrapped onto the next. Like in the Emacs function, auto-wrap does not attempt to re-flow the entire paragraph; it only adds a break in the current line. It's handy when typing new text, but won't automatically fix a paragraph after inserting/removing text. For this you can always do a standard alt+q after making edits.",
            "title": "Auto-wrap"
        },
        {
            "location": "configuration/#enabling",
            "text": "Auto-wrap is disabled by default, but can be enabled with the Rewrap > Auto Wrap: Enabled setting. This setting ( rewrap.autoWrap.enabled ) can also be set per language/document type . Even when enabled, it will only activate within comments in code files, not on code lines, so it's usually ok to leave it enabled. To temporarily enable or disable auto-wrap for the current document , you can use the Rewrap: Toggle Auto-Wrap command in the command palette. There's no default keybinding for the toggle command, but you can add one, eg shift+alt+q , by binding to the command ID rewrap.toggleAutoWrap in the Keyboard Shortcuts editor .",
            "title": "Enabling"
        },
        {
            "location": "configuration/#notification",
            "text": "To help keep track of when auto-wrap is on or off, there is a small (optional, but on by default) icon/notification in the right of the statusbar, that shows the auto-wrap state for the current document. It has 4 states: (normal) on (enabled in settings) (hidden) off (disabled in settings) (orange) temporarily enabled (from toggle command) (gray) temporarily disabled (from toggle command) Hovering over this icon will give more information. If you don't like the icon, you can hide it , or change the Rewrap > AutoWrap: Notification setting to \"text\" . Then it will instead show a brief text message in the status bar for a few seconds whenever auto-wrap is toggled on or off.",
            "title": "Notification"
        },
        {
            "location": "configuration/#language-specific-settings",
            "text": "See also the VS Code documentation . This example sets the wrapping at column 72 for Python, with doubleSentenceSpacing on, and the wrapping column at 90 for Javascript. { \"[python]\" : { \"editor.rulers\" : [ 72 , 79 ], \"rewrap.doubleSentenceSpacing\" : true }, \"[javascript]\" : { \"editor.rulers\" : [ 90 ] } } VS Code has a helper command for adding language sections to your settings file: press F1 and search for Preferences: Configure Language Specific Settings... . Note: Be aware that a global rewrap.wrappingColumn setting will take precedence over a language-specific editor.rulers setting.",
            "title": "Language-specific settings"
        },
        {
            "location": "configuration/#keybindings",
            "text": "Rewrap's main command has the default keybinding Alt+Q . If you want to change it to something else, add something like this to your keybindings.json file. For example for Ctrl+Shift+Q : { \"key\" : \"ctrl+shift+q\" , \"command\" : \"rewrap.rewrapComment\" } There are two other commands you can add keybindings for (eg alt+shift+q ): Command ID \"Wrap Comment / Text at column...\" rewrap.rewrapCommentAt \"Toggle Auto-Wrap for Current Document\" rewrap.toggleAutoWrap",
            "title": "Keybindings"
        },
        {
            "location": "extra-features/",
            "text": "Extra Features Wrap at custom column command (VS Code only) The Rewrap/Unwrap Text at Column... command lets you do a single wrap at the given custom column value. You can also use it to \"unwrap\" text ( see below .) Multiple rulers set If you have multiple rulers set, you can choose which ruler to wrap to while editing. Just press Alt+Q multiple times to wrap to each ruler in turn. The ruler chosen is then remembered for that document for the rest of the session. It cycles through the rulers in the order in which they appear in settings; so if you have a most commonly used ruler, you want to put that first. VS Code Example setting: { \"editor.rulers\" : [ 80 , 72 , 100 ] } Visual Studio Add rulers using the Editor Guidelines extension . It cycles through the rulers in the order they were added. Unwrapping (VS Code only) Sometimes you might want to \"unwrap\" text so it's no longer hard wrapped. This is actually just the same as re-wrapping with an infinite (or very large) wrapping column setting. There are two ways to achieve this. For occasional use, use the Rewrap/Unwrap Text at Column... command (search for 'unwrap') mentioned above. Then make sure the input field is blank and press Enter. This will remove wrapping. The second way is to add an additional ruler with a value of 0 (this will be taken as infinite wrapping column), and then use the \"multiple rulers\" feature above to switch to this ruler and unwrap instead. { \"editor.rulers\" : [ 80 , 0 ] } However that ruler at column zero gives you a quite ugly line at the left of the editor. But it can be solved by setting the ruler to a transparent color. { \"editor.rulers\" : [ { \"column\" : 80 , \"color\" : \"#aaa\" }, { \"column\" : 0 , \"color\" : \"#0000\" } // with alpha-channel 0 = transparent ] } Preserving line breaks You can add two spaces to the end of any line, and the line-break after it will be preserved. (More info)",
            "title": "Extra Features"
        },
        {
            "location": "extra-features/#extra-features",
            "text": "",
            "title": "Extra Features"
        },
        {
            "location": "extra-features/#wrap-at-custom-column-command",
            "text": "(VS Code only) The Rewrap/Unwrap Text at Column... command lets you do a single wrap at the given custom column value. You can also use it to \"unwrap\" text ( see below .)",
            "title": "Wrap at custom column command"
        },
        {
            "location": "extra-features/#multiple-rulers-set",
            "text": "If you have multiple rulers set, you can choose which ruler to wrap to while editing. Just press Alt+Q multiple times to wrap to each ruler in turn. The ruler chosen is then remembered for that document for the rest of the session. It cycles through the rulers in the order in which they appear in settings; so if you have a most commonly used ruler, you want to put that first.",
            "title": "Multiple rulers set"
        },
        {
            "location": "extra-features/#vs-code",
            "text": "Example setting: { \"editor.rulers\" : [ 80 , 72 , 100 ] }",
            "title": "VS Code"
        },
        {
            "location": "extra-features/#visual-studio",
            "text": "Add rulers using the Editor Guidelines extension . It cycles through the rulers in the order they were added.",
            "title": "Visual Studio"
        },
        {
            "location": "extra-features/#unwrapping",
            "text": "(VS Code only) Sometimes you might want to \"unwrap\" text so it's no longer hard wrapped. This is actually just the same as re-wrapping with an infinite (or very large) wrapping column setting. There are two ways to achieve this. For occasional use, use the Rewrap/Unwrap Text at Column... command (search for 'unwrap') mentioned above. Then make sure the input field is blank and press Enter. This will remove wrapping. The second way is to add an additional ruler with a value of 0 (this will be taken as infinite wrapping column), and then use the \"multiple rulers\" feature above to switch to this ruler and unwrap instead. { \"editor.rulers\" : [ 80 , 0 ] } However that ruler at column zero gives you a quite ugly line at the left of the editor. But it can be solved by setting the ruler to a transparent color. { \"editor.rulers\" : [ { \"column\" : 80 , \"color\" : \"#aaa\" }, { \"column\" : 0 , \"color\" : \"#0000\" } // with alpha-channel 0 = transparent ] }",
            "title": "Unwrapping"
        },
        {
            "location": "extra-features/#preserving-line-breaks",
            "text": "You can add two spaces to the end of any line, and the line-break after it will be preserved. (More info)",
            "title": "Preserving line breaks"
        },
        {
            "location": "prerelease-versions/",
            "text": "Pre-release versions Pre-release versions are used to test or hammer-out new features before they're added to the stable branch. Releases are more frequent and features come earlier to these versions. You can switch to the Pre-Release channel from within VS Code (v1.63 or above) by going to the extension's page and then choosing Switch to Pre-Release Version (make sure to hit \"Reload Required\" after it's installed). You don't have to be using VS Code Insiders to do this. You can painlessly switch back to the stable channel at any time too. More info at the VS Code docs . Visual Studio Visual Studio doesn't have the above VS Code feature, but you can still download the .vsix file from the Assets section below, and install it manually by double-clicking the file. When the next major stable version is released, VS will automatically upgrade to that.",
            "title": "Prerelease versions"
        },
        {
            "location": "prerelease-versions/#pre-release-versions",
            "text": "Pre-release versions are used to test or hammer-out new features before they're added to the stable branch. Releases are more frequent and features come earlier to these versions. You can switch to the Pre-Release channel from within VS Code (v1.63 or above) by going to the extension's page and then choosing Switch to Pre-Release Version (make sure to hit \"Reload Required\" after it's installed). You don't have to be using VS Code Insiders to do this. You can painlessly switch back to the stable channel at any time too. More info at the VS Code docs .",
            "title": "Pre-release versions"
        },
        {
            "location": "prerelease-versions/#visual-studio",
            "text": "Visual Studio doesn't have the above VS Code feature, but you can still download the .vsix file from the Assets section below, and install it manually by double-clicking the file. When the next major stable version is released, VS will automatically upgrade to that.",
            "title": "Visual Studio"
        },
        {
            "location": "specs/",
            "text": "Specs The files in these folders use examples to document Rewrap's capabilities and specify expected results. They are all in markdown format. The examples also serve as tests. Test layout An example test -> An example \u00a6 \u00a6 test \u00a6 Each test, set into an indented code block, consists of 2 sections, or columns, with the input on the left and and the expected output after the -> marker. Wrapping column The wrapping column in each sample is represented by \u00a6 character. It's required to appear on at least one line in the input and output sections (though for asthetics should appear on all lines where it can). It's checked that all \u00a6 markers are at the same column. Selections Most samples are treated as if they're wholly selected, though where selections are explicitly needed, they're marked with \u00ab\u00bb characters, with \u00ab as the anchor point and \u00bb as the active point. These are removed from the input. Whitespace Tabs are represented by -\u2192 . Where explicitly needed, spaces are represented by a \u00b7 (U+00B7). All lines are assumed to have no trailing whitespace unless these characters are used. Settings Settings for a test are given in a blockquote, on one line, separated by commas and colons. They apply to all subsequent tests until a new settings block is given. Eg: language: javascript, tabSize: 2, doubleSentenceSpacing: true When absent, the default values are used: - tabSize: 4 - doubleSentenceSpacing: false - language: plaintext - wrapWholeComment: true - reformat: false A new settings block completely replaces the previous one; any absent values are reset back to defaults. Writing tests If writing tests in VS Code, the first thing that's highly recommended is the Overtype extension, which gives a toggle to type in overtype mode with the 'ins' key. This project folder also has extra guideline rulers at columns 38 & 46 in markdown files, as well as a couple of code snipets. Steps: Press ctrl+space and select the test snippet. This will insert lines of spaces and put the cursor at the correct starting position. Using overtype mode, add the input text. Use the cursor keys to move down a line rather than enter. Add \u00a6 characters on all lines to indicate the wrapping column (you can copy this char from another test or use the wm snippet). You can do this quicker by first using ctrl+alt+down to make an insertion point on each line. Select all the input as a block by using ctrl+alt+up/down to select vertically, and shift+left/right to select horizontally. Copy, press End to move the insertion points to the end of each line (should be on col 47, at the 2nd ruler) and paste. Adjust input & output text as needed. On one of the lines, add a -> marker (dash + greater than) at col 39 (the first ruler). This can be on any line but for asthetics should be on/near the middle line of the block Additional notes/tips Though not outright banned, tests with identical input and output are discouraged, since something not working at all will produce a false pass. In tests where a non-wrapping block is expected, try to include another block that should wrap (eg. normal paragraph text). Tests are easier to see (and edit) if input and output contain the same amount of lines. When adding wrapped sections, try to add lines that will be split and lines that will be joined, to keep the number of lines after wrapping (almost) the same. When running tests, examples can be singled-out by adding the tag <only> at the end of any of their lines.",
            "title": "Specs"
        },
        {
            "location": "specs/#specs",
            "text": "The files in these folders use examples to document Rewrap's capabilities and specify expected results. They are all in markdown format. The examples also serve as tests.",
            "title": "Specs"
        },
        {
            "location": "specs/#test-layout",
            "text": "An example test -> An example \u00a6 \u00a6 test \u00a6 Each test, set into an indented code block, consists of 2 sections, or columns, with the input on the left and and the expected output after the -> marker.",
            "title": "Test layout"
        },
        {
            "location": "specs/#wrapping-column",
            "text": "The wrapping column in each sample is represented by \u00a6 character. It's required to appear on at least one line in the input and output sections (though for asthetics should appear on all lines where it can). It's checked that all \u00a6 markers are at the same column.",
            "title": "Wrapping column"
        },
        {
            "location": "specs/#selections",
            "text": "Most samples are treated as if they're wholly selected, though where selections are explicitly needed, they're marked with \u00ab\u00bb characters, with \u00ab as the anchor point and \u00bb as the active point. These are removed from the input.",
            "title": "Selections"
        },
        {
            "location": "specs/#whitespace",
            "text": "Tabs are represented by -\u2192 . Where explicitly needed, spaces are represented by a \u00b7 (U+00B7). All lines are assumed to have no trailing whitespace unless these characters are used.",
            "title": "Whitespace"
        },
        {
            "location": "specs/#settings",
            "text": "Settings for a test are given in a blockquote, on one line, separated by commas and colons. They apply to all subsequent tests until a new settings block is given. Eg: language: javascript, tabSize: 2, doubleSentenceSpacing: true When absent, the default values are used: - tabSize: 4 - doubleSentenceSpacing: false - language: plaintext - wrapWholeComment: true - reformat: false A new settings block completely replaces the previous one; any absent values are reset back to defaults.",
            "title": "Settings"
        },
        {
            "location": "specs/#writing-tests",
            "text": "If writing tests in VS Code, the first thing that's highly recommended is the Overtype extension, which gives a toggle to type in overtype mode with the 'ins' key. This project folder also has extra guideline rulers at columns 38 & 46 in markdown files, as well as a couple of code snipets. Steps: Press ctrl+space and select the test snippet. This will insert lines of spaces and put the cursor at the correct starting position. Using overtype mode, add the input text. Use the cursor keys to move down a line rather than enter. Add \u00a6 characters on all lines to indicate the wrapping column (you can copy this char from another test or use the wm snippet). You can do this quicker by first using ctrl+alt+down to make an insertion point on each line. Select all the input as a block by using ctrl+alt+up/down to select vertically, and shift+left/right to select horizontally. Copy, press End to move the insertion points to the end of each line (should be on col 47, at the 2nd ruler) and paste. Adjust input & output text as needed. On one of the lines, add a -> marker (dash + greater than) at col 39 (the first ruler). This can be on any line but for asthetics should be on/near the middle line of the block",
            "title": "Writing tests"
        },
        {
            "location": "specs/#additional-notestips",
            "text": "Though not outright banned, tests with identical input and output are discouraged, since something not working at all will produce a false pass. In tests where a non-wrapping block is expected, try to include another block that should wrap (eg. normal paragraph text). Tests are easier to see (and edit) if input and output contain the same amount of lines. When adding wrapped sections, try to add lines that will be split and lines that will be joined, to keep the number of lines after wrapping (almost) the same. When running tests, examples can be singled-out by adding the tag <only> at the end of any of their lines.",
            "title": "Additional notes/tips"
        },
        {
            "location": "specs/content-types/batch-file/",
            "text": "Batch/Cmd files language: \"batch file\" Comments lines start with REM (or @REM ). This is case-insensitive. rem text \u00a6 -> rem text text \u00a6 rem text text \u00a6 rem text \u00a6 REM text \u00a6 -> REM text text \u00a6 REM text text \u00a6 REM text \u00a6 Rem text \u00a6 -> Rem text text \u00a6 Rem text text \u00a6 Rem text \u00a6 @rem text \u00a6 -> @rem text text \u00a6 @rem text text \u00a6 @rem text \u00a6 While not strictly a comment marker, :: is also often used for comments, so is also supported. :: text \u00a6 -> :: text text \u00a6 :: text text \u00a6 :: text \u00a6",
            "title": "Batch/Cmd files"
        },
        {
            "location": "specs/content-types/batch-file/#batchcmd-files",
            "text": "language: \"batch file\" Comments lines start with REM (or @REM ). This is case-insensitive. rem text \u00a6 -> rem text text \u00a6 rem text text \u00a6 rem text \u00a6 REM text \u00a6 -> REM text text \u00a6 REM text text \u00a6 REM text \u00a6 Rem text \u00a6 -> Rem text text \u00a6 Rem text text \u00a6 Rem text \u00a6 @rem text \u00a6 -> @rem text text \u00a6 @rem text text \u00a6 @rem text \u00a6 While not strictly a comment marker, :: is also often used for comments, so is also supported. :: text \u00a6 -> :: text text \u00a6 :: text text \u00a6 :: text \u00a6",
            "title": "Batch/Cmd files"
        },
        {
            "location": "specs/content-types/d/",
            "text": "language: \"d\" // a b c -> // a b \u00a6 // d \u00a6 // c d \u00a6 /* a b c /* a b \u00a6 d \u00a6 c d \u00a6 */ \u00a6 */ \u00a6 /+ a b c /+ a b \u00a6 d \u00a6 c d \u00a6 +/ \u00a6 +/ \u00a6 x x x x x x x x x x /// a b c -> /// a b \u00a6 /// d \u00a6 /// c d \u00a6",
            "title": "D"
        },
        {
            "location": "specs/content-types/dart/",
            "text": "Dart DartDoc comments can be in the form /// or /** ... */ . It generally does not use tags, except for a few special ones: @nodoc, @template, @endtemplate and @macro. language: \"dart\" /// aaaaaaaa \u00a6 -> /// aaaaaaaa bbbbbb \u00a6 /// bbbbbb c \u00a6 /// c /// @nodoc \u00a6 /// @nodoc /// dddddddd \u00a6 /// dddddddd eeeeee /// eeeeee f \u00a6 /// f /// {@template a} \u00a6 /// {@template a} /// gggggggg \u00a6 /// gggggggg hhhhhh /// hhhhhh i \u00a6 /// i /// {@endtemplate} \u00a6 /// {@endtemplate} /// jjjjjjjj \u00a6 /// jjjjjjjj kkkkkk /// kkkkkk l \u00a6 /// l /// {@macro a} \u00a6 /// {@macro a} /// mmmmmmmm \u00a6 /// mmmmmmmm nnnnnn /// nnnnnn o \u00a6 /// o",
            "title": "Dart"
        },
        {
            "location": "specs/content-types/dart/#dart",
            "text": "DartDoc comments can be in the form /// or /** ... */ . It generally does not use tags, except for a few special ones: @nodoc, @template, @endtemplate and @macro. language: \"dart\" /// aaaaaaaa \u00a6 -> /// aaaaaaaa bbbbbb \u00a6 /// bbbbbb c \u00a6 /// c /// @nodoc \u00a6 /// @nodoc /// dddddddd \u00a6 /// dddddddd eeeeee /// eeeeee f \u00a6 /// f /// {@template a} \u00a6 /// {@template a} /// gggggggg \u00a6 /// gggggggg hhhhhh /// hhhhhh i \u00a6 /// i /// {@endtemplate} \u00a6 /// {@endtemplate} /// jjjjjjjj \u00a6 /// jjjjjjjj kkkkkk /// kkkkkk l \u00a6 /// l /// {@macro a} \u00a6 /// {@macro a} /// mmmmmmmm \u00a6 /// mmmmmmmm nnnnnn /// nnnnnn o \u00a6 /// o",
            "title": "Dart"
        },
        {
            "location": "specs/content-types/dotnet-xmldoc/",
            "text": ".Net XmlDoc .Net xml doc comments are parsed as xml/html instead of markdown, so wrapping and newlines follow the rules for html instead. This keeps tags separated on new lines. language: \"csharp\" /// <summary> What the method -> /// <summary> What the \u00a6 /// does </summary> \u00a6 /// method does </summary>\u00a6 /// <param name=\"s\"> \u00a6 /// <param name=\"s\"> \u00a6 /// The s param </param> \u00a6 /// The s param </param> \u00a6 /// \u00a6 /// \u00a6 /// <description> \u00a6 /// <description> \u00a6 /// Extended info. \u00a6 /// Extended info. Text \u00a6 /// Text text text. \u00a6 /// text text. \u00a6 /// </description> \u00a6 /// </description> \u00a6 language: \"fsharp\" /// <summary> What the method -> /// <summary> What the \u00a6 /// does </summary> \u00a6 /// method does </summary>\u00a6 /// <param name=\"s\"> \u00a6 /// <param name=\"s\"> \u00a6 /// The s param </param> \u00a6 /// The s param </param> \u00a6 /// \u00a6 /// \u00a6 /// <description> \u00a6 /// <description> \u00a6 /// Extended info. \u00a6 /// Extended info. Text \u00a6 /// Text text text. \u00a6 /// text text. \u00a6 /// </description> \u00a6 /// </description> \u00a6 language: \"vb\" ''' <summary> What the method -> ''' <summary> What the \u00a6 ''' does </summary> \u00a6 ''' method does </summary>\u00a6 ''' <param name=\"s\"> \u00a6 ''' <param name=\"s\"> \u00a6 ''' The s param </param> \u00a6 ''' The s param </param> \u00a6 ''' \u00a6 ''' \u00a6 ''' <description> \u00a6 ''' <description> \u00a6 ''' Extended info. \u00a6 ''' Extended info. Text \u00a6 ''' Text text text. \u00a6 ''' text text. \u00a6 ''' </description> \u00a6 ''' </description> \u00a6 There is however, an extra rule. Line breaks are only preserved before/after certain \"block tags\". The list of these tags is: code, description, example, exception, include, inheritdoc, list, listheader, item, para, param, permission, remarks, seealso, summary, term, typeparam, typeparamref, returns, value . All other tags, eg <c> are treated as inline tags and will always be wrapped inline with the surrounding text. language: \"csharp\" /// Text \u00a6 /// Text <c>TypeName</c> text \u00a6 /// <c>TypeName</c> \u00a6 -> /// text. \u00a6 /// text text. \u00a6 \u00a6",
            "title": ".Net XmlDoc"
        },
        {
            "location": "specs/content-types/dotnet-xmldoc/#net-xmldoc",
            "text": ".Net xml doc comments are parsed as xml/html instead of markdown, so wrapping and newlines follow the rules for html instead. This keeps tags separated on new lines. language: \"csharp\" /// <summary> What the method -> /// <summary> What the \u00a6 /// does </summary> \u00a6 /// method does </summary>\u00a6 /// <param name=\"s\"> \u00a6 /// <param name=\"s\"> \u00a6 /// The s param </param> \u00a6 /// The s param </param> \u00a6 /// \u00a6 /// \u00a6 /// <description> \u00a6 /// <description> \u00a6 /// Extended info. \u00a6 /// Extended info. Text \u00a6 /// Text text text. \u00a6 /// text text. \u00a6 /// </description> \u00a6 /// </description> \u00a6 language: \"fsharp\" /// <summary> What the method -> /// <summary> What the \u00a6 /// does </summary> \u00a6 /// method does </summary>\u00a6 /// <param name=\"s\"> \u00a6 /// <param name=\"s\"> \u00a6 /// The s param </param> \u00a6 /// The s param </param> \u00a6 /// \u00a6 /// \u00a6 /// <description> \u00a6 /// <description> \u00a6 /// Extended info. \u00a6 /// Extended info. Text \u00a6 /// Text text text. \u00a6 /// text text. \u00a6 /// </description> \u00a6 /// </description> \u00a6 language: \"vb\" ''' <summary> What the method -> ''' <summary> What the \u00a6 ''' does </summary> \u00a6 ''' method does </summary>\u00a6 ''' <param name=\"s\"> \u00a6 ''' <param name=\"s\"> \u00a6 ''' The s param </param> \u00a6 ''' The s param </param> \u00a6 ''' \u00a6 ''' \u00a6 ''' <description> \u00a6 ''' <description> \u00a6 ''' Extended info. \u00a6 ''' Extended info. Text \u00a6 ''' Text text text. \u00a6 ''' text text. \u00a6 ''' </description> \u00a6 ''' </description> \u00a6 There is however, an extra rule. Line breaks are only preserved before/after certain \"block tags\". The list of these tags is: code, description, example, exception, include, inheritdoc, list, listheader, item, para, param, permission, remarks, seealso, summary, term, typeparam, typeparamref, returns, value . All other tags, eg <c> are treated as inline tags and will always be wrapped inline with the surrounding text. language: \"csharp\" /// Text \u00a6 /// Text <c>TypeName</c> text \u00a6 /// <c>TypeName</c> \u00a6 -> /// text. \u00a6 /// text text. \u00a6 \u00a6",
            "title": ".Net XmlDoc"
        },
        {
            "location": "specs/content-types/doxygen/",
            "text": "language: \"c++\" /** \u00a6 -> /** \u00a6 * a b c * a b \u00a6 * @t d e * c \u00a6 */ \u00a6 * @t d\u00a6 * e \u00a6 */ \u00a6 /*! \u00a6 -> /*! \u00a6 * a b c * a b \u00a6 * @t d e * c \u00a6 */ \u00a6 * @t d\u00a6 * e \u00a6 */ \u00a6 //! a b c -> //! a b \u00a6 //! @t d\u00a6e //! c \u00a6 \u00a6 //! @t d\u00a6 \u00a6 //! e \u00a6 Triple-slash comments expect xml (https://www.doxygen.nl/manual/xmlcmds.html) /// <summary> What the method -> /// <summary> What the \u00a6 /// does </summary> \u00a6 /// method does </summary>\u00a6 /// <param name=\"s\"> \u00a6 /// <param name=\"s\"> \u00a6 /// The s param </param> \u00a6 /// The s param </param> \u00a6 /// \u00a6 /// \u00a6 /// <description> \u00a6 /// <description> \u00a6 /// Extended info. \u00a6 /// Extended info. Text \u00a6 /// Text text text. \u00a6 /// text text. \u00a6 /// </description> \u00a6 /// </description> \u00a6",
            "title": "Doxygen"
        },
        {
            "location": "specs/content-types/elixir/",
            "text": "language: \"elixir\" Elixir has '#' line comments. x x x x -> x x x x # a b c # a b \u00a6 # d \u00a6 # c d \u00a6 x x \u00a6 x x \u00a6 x x \u00a6 x x \u00a6 It also has @doc, @moduledoc and @typedoc comments x x x x x x x x x -> x x x x x x x x x @doc \"\"\" \u00a6 @doc \"\"\" \u00a6 a b c d e f g h i a b c d e f g \u00a6 j k \u00a6 h i j k \u00a6 \"\"\" \u00a6 \"\"\" \u00a6 x x \u00a6 x x \u00a6 x x \u00a6 x x \u00a6 x x x x x x x x x -> x x x x x x x x x @moduledoc \"\"\"\u00a6 @moduledoc \"\"\"\u00a6 a b c d e f g h i a b c d e f g \u00a6 j k \u00a6 h i j k \u00a6 \"\"\" \u00a6 \"\"\" \u00a6 x x \u00a6 x x \u00a6 x x \u00a6 x x \u00a6 x x x x x x x x x -> x x x x x x x x x @typedoc \"\"\" \u00a6 @typedoc \"\"\" \u00a6 a b c d e f g h i a b c d e f g \u00a6 j k \u00a6 h i j k \u00a6 \"\"\" \u00a6 \"\"\" \u00a6 x x \u00a6 x x \u00a6 x x \u00a6 x x \u00a6",
            "title": "Elixir"
        },
        {
            "location": "specs/content-types/go/",
            "text": "language: \"go\", tabWidth: 2 Go uses tabs for indentation. Comments in are wrapped using the rules of the godoc parser. There are two simple rules. Paragraphs are separated by blank lines. // paragraph one -> // paragraph \u00a6 // text \u00a6 // one text \u00a6 // \u00a6 // \u00a6 // paragraph two // paragraph \u00a6 // text \u00a6 // two text \u00a6 Pre-formatted text must be indented relative to the surrounding comment text. // normal wrapped paragraph -> // normal wrapped \u00a6 // text \u00a6 // paragraph text \u00a6 // preformatted { // preformatted { // text \u00a6 // text \u00a6 // } \u00a6 // } \u00a6 // normal wrapped paragraph // normal wrapped \u00a6 // text \u00a6 // paragraph text \u00a6 Unlike in markdown: * No blank line is required between a normal paragraph and indented code block. * Any amount of indent (as little as a 1-space) is required for the indented code block, as opposed to 4 spaces. Example // a b \u00a6 -> // a b c \u00a6 // c d \u00a6 // d \u00a6 // a \u00a6 // a \u00a6 // b \u00a6 // b \u00a6 // a b \u00a6 // a b c \u00a6 // c d \u00a6 // d \u00a6 Tabs also work for indented sections within the comment. However to keep things simple, Rewrap replaces tabs within comments with the visually equivalent number of spaces. (Godoc also does something weird with tabs: if any line contains a tab before the text, then those lines, plus all lines with a 2 or more space indent, are treated as preformatted text.) // a b \u00a6 -> // a b c \u00a6 // c d \u00a6 // d \u00a6 // \u2192a \u00a6 // a \u00a6 // \u2192b \u00a6 // b \u00a6 // a b \u00a6 // a b c \u00a6 // c d \u00a6 // d \u00a6",
            "title": "Go"
        },
        {
            "location": "specs/content-types/graphql/",
            "text": "language: \"graphql\" GraphQL supports comments ( # ) and Block Strings ( \"\"\" ). Comments are always single-line, while Block Strings are inherently multi-line. Block Strings are typically used to provide descriptions (documentation) for GraphQL types and operations. Comments # a b c d e f g h i -> # a b c d\u00a6 \u00a6 # e f g h\u00a6 \u00a6 # i \u00a6 Block Strings \"\"\" \u00a6 -> \"\"\" \u00a6 a b c d e f g h i a b c d e\u00a6 \"\"\" \u00a6 f g h i \u00a6 \u00a6 \"\"\" \u00a6 type Mutation { \u00a6 type Mutation { \u00a6 \"\"\" \u00a6 \"\"\" \u00a6 This is a long line. -> This is a \u00a6 \"\"\" \u00a6 long line. \u00a6 loginUser() String \"\"\" \u00a6 } \u00a6 loginUser() String \u00a6 } \u00a6 foo { \u00a6 foo { \u00a6 bar(baz: \"\"\" bar(baz: \"\"\" a b c d e f -> a b c d e\u00a6 g h \u00a6 f g h \u00a6 \"\"\") \u00a6 \"\"\") \u00a6 } \u00a6 } \u00a6",
            "title": "Graphql"
        },
        {
            "location": "specs/content-types/graphql/#comments",
            "text": "# a b c d e f g h i -> # a b c d\u00a6 \u00a6 # e f g h\u00a6 \u00a6 # i \u00a6",
            "title": "Comments"
        },
        {
            "location": "specs/content-types/graphql/#block-strings",
            "text": "\"\"\" \u00a6 -> \"\"\" \u00a6 a b c d e f g h i a b c d e\u00a6 \"\"\" \u00a6 f g h i \u00a6 \u00a6 \"\"\" \u00a6 type Mutation { \u00a6 type Mutation { \u00a6 \"\"\" \u00a6 \"\"\" \u00a6 This is a long line. -> This is a \u00a6 \"\"\" \u00a6 long line. \u00a6 loginUser() String \"\"\" \u00a6 } \u00a6 loginUser() String \u00a6 } \u00a6 foo { \u00a6 foo { \u00a6 bar(baz: \"\"\" bar(baz: \"\"\" a b c d e f -> a b c d e\u00a6 g h \u00a6 f g h \u00a6 \"\"\") \u00a6 \"\"\") \u00a6 } \u00a6 } \u00a6",
            "title": "Block Strings"
        },
        {
            "location": "specs/content-types/html/",
            "text": "HTML language: \"html\" Html (includes Xml) has its own wrapping behaviors. Unlike other source code files, all content is considered equal when it comes to selections; selecting a whole document will wrap comments and other content alike. <!-- comment comment --> <!-- comment text text text text -> comment --> \u00a6 \u00a6 text text \u00a6 \u00a6 text text \u00a6 Mixed content on a line is wrapped as one. <a>one two</a> -> <a>one \u00a6 \u00a6 two</a> \u00a6 Any line that starts with a tag starts a new paragraph. Foo bar -> Foo \u00a6 <div> \u00a6 bar \u00a6 \u00a6 <div> \u00a6 Any line that ends with a tag ends the paragraph. <div> \u00a6 <div> \u00a6 aaa bbbbbbb -> aaa \u00a6 cc bbbbbbb cc\u00a6 This means things like this are preserved. <ul> \u00a6 <ul> \u00a6 <li> 1 </li> \u00a6 -> <li> 1 </li> \u00a6 <li> 2 </li> \u00a6 <li> 2 </li> \u00a6 </ul> \u00a6 </ul> \u00a6 Embedded JS and CSS If the selection within an HTML document contains script or style tags, the contents of those tags are wrapped using the rules for javascript or css. <script> \u00a6 -> <script> \u00a6 // one two three // one two \u00a6 // four \u00a6 // three four\u00a6 var s = \"string\"; var s = \"string\"; </script> \u00a6 </script> \u00a6 <style> \u00a6 -> <style> \u00a6 /* one two three /* one two \u00a6 four */ \u00a6 three four */\u00a6 .warn { \u00a6 .warn { \u00a6 color: red;\u00a6 color: red;\u00a6 font-weight: bold; font-weight: bold; } \u00a6 } \u00a6 </style> \u00a6 </style> \u00a6 <notscript> \u00a6 -> <notscript> \u00a6 // one two three // one two \u00a6 // four \u00a6 three // four\u00a6 </notscript> \u00a6 </notscript> \u00a6",
            "title": "HTML"
        },
        {
            "location": "specs/content-types/html/#html",
            "text": "language: \"html\" Html (includes Xml) has its own wrapping behaviors. Unlike other source code files, all content is considered equal when it comes to selections; selecting a whole document will wrap comments and other content alike. <!-- comment comment --> <!-- comment text text text text -> comment --> \u00a6 \u00a6 text text \u00a6 \u00a6 text text \u00a6 Mixed content on a line is wrapped as one. <a>one two</a> -> <a>one \u00a6 \u00a6 two</a> \u00a6 Any line that starts with a tag starts a new paragraph. Foo bar -> Foo \u00a6 <div> \u00a6 bar \u00a6 \u00a6 <div> \u00a6 Any line that ends with a tag ends the paragraph. <div> \u00a6 <div> \u00a6 aaa bbbbbbb -> aaa \u00a6 cc bbbbbbb cc\u00a6 This means things like this are preserved. <ul> \u00a6 <ul> \u00a6 <li> 1 </li> \u00a6 -> <li> 1 </li> \u00a6 <li> 2 </li> \u00a6 <li> 2 </li> \u00a6 </ul> \u00a6 </ul> \u00a6",
            "title": "HTML"
        },
        {
            "location": "specs/content-types/html/#embedded-js-and-css",
            "text": "If the selection within an HTML document contains script or style tags, the contents of those tags are wrapped using the rules for javascript or css. <script> \u00a6 -> <script> \u00a6 // one two three // one two \u00a6 // four \u00a6 // three four\u00a6 var s = \"string\"; var s = \"string\"; </script> \u00a6 </script> \u00a6 <style> \u00a6 -> <style> \u00a6 /* one two three /* one two \u00a6 four */ \u00a6 three four */\u00a6 .warn { \u00a6 .warn { \u00a6 color: red;\u00a6 color: red;\u00a6 font-weight: bold; font-weight: bold; } \u00a6 } \u00a6 </style> \u00a6 </style> \u00a6 <notscript> \u00a6 -> <notscript> \u00a6 // one two three // one two \u00a6 // four \u00a6 three // four\u00a6 </notscript> \u00a6 </notscript> \u00a6",
            "title": "Embedded JS and CSS"
        },
        {
            "location": "specs/content-types/javadoc/",
            "text": "JavaDoc Java, Java/Type/CoffeeScript and PHP all support java/jsdoc (/** ... */), which makes use of @tags. The tag structure is preserved when rewrapping. language: \"javascript\" /** \u00a6 -> /** \u00a6 * Description of the function. * Description of the \u00a6 * @param {string} str \u00a6 * function. \u00a6 * @returns {string} \u00a6 * @param {string} str \u00a6 * The return value \u00a6 * @returns {string} The \u00a6 */ \u00a6 * return value \u00a6 function convert(str) { */ function convert(str) { language: \"coffeescript\" Coffeescript has two common comment styles, and in each case the positioning of the #/* characters is preserved. ###* \u00a6 -> ###* \u00a6 * Description of the function. * Description of the \u00a6 * @param {string} str \u00a6 * function. \u00a6 * @returns {string} \u00a6 * @param {string} str \u00a6 * The return value \u00a6 * @returns {string} The \u00a6 ### \u00a6 * return value \u00a6 ### ###* \u00a6 -> ###* \u00a6 # Description of the function. # Description of the \u00a6 # @param {string} str \u00a6 # function. \u00a6 # @returns {string} \u00a6 # @param {string} str \u00a6 # The return value \u00a6 # @returns {string} The \u00a6 ### \u00a6 # return value \u00a6 ### Tags language: \"javascript\" Where a line starts with a tag, it starts a new paragraph for wrapping. /** \u00a6 -> /** \u00a6 * Text \u00a6 * Text \u00a6 * @tag text text * @tag text \u00a6 */ \u00a6 * text \u00a6 */ Where a tag stands alone on a line, the line break after it is preserved and text on the following line is not wrapped with it. Sometimes this style is preferred: /** \u00a6 -> /** \u00a6 * @description \u00a6 * @description \u00a6 * Long description that * Long description \u00a6 * starts on the next line. * that starts on the \u00a6 */ \u00a6 * next line. \u00a6 \u00a6 */ \u00a6 Also, the @example tag is a special case: all lines between it and the following tag are assumed to be code and therefore ignored for wrapping. /** \u00a6 -> /** \u00a6 * @example \u00a6 * @example \u00a6 * // returns 2 \u00a6 * // returns 2 \u00a6 * Math.abs(3 - 5) \u00a6 * Math.abs(3 - 5) \u00a6 * \u00a6 * \u00a6 * // returns 5 \u00a6 * // returns 5 \u00a6 * Math.abs(1 - 6) \u00a6 * Math.abs(1 - 6) \u00a6 * @returns {Number} \u00a6 * @returns {Number} Absolute\u00a6 * Absolute value of \u00a6 * value of the number given.\u00a6 * the number given. \u00a6 */ \u00a6 */ \u00a6 \u00a6 An @example tag with text on the same line however, is treated as any other (used in php docs) language: \"php\" /** \u00a6 -> /** \u00a6 * text \u00a6 * text \u00a6 * @example url text1 * @example url \u00a6 * text2 \u00a6 * text1 text2 \u00a6 */ \u00a6 */ \u00a6 Inline tags Inline tags are not broken up /** \u00a6 -> /** \u00a6 * {@link a b \\} c} d * {@link a b \\} c} * e \u00a6 * d e \u00a6 */ \u00a6 */ \u00a6 Technical details A * at the beginning of each line is conventional but not required. The prefix or each line is preserved. Conventional: /** \u00a6 -> /** \u00a6 * a \u00a6 * a b \u00a6 * b c \u00a6 * c \u00a6 */ \u00a6 */ \u00a6 Star absent on first line: /** \u00a6 -> /** \u00a6 aaa bbb ccc aaa bbb \u00a6 * ddd \u00a6 * ccc ddd \u00a6 */ \u00a6 */ \u00a6 Irregular placement: /** \u00a6 -> /** \u00a6 * aaa bbb ccc * aaa bbb \u00a6 * ddd \u00a6 * ccc ddd \u00a6 */ \u00a6 */ \u00a6 Stars in content /** \u00a6 -> /** \u00a6 * List: \u00a6 * List: \u00a6 * * Item A \u00a6 * * Item A \u00a6 * * Item B \u00a6 * * Item B \u00a6 */ \u00a6 */ \u00a6 Since the *'s are optional, they should not be consumed if used as bullets in a comment where leading *'s are absent. /** \u00a6 -> /** \u00a6 List: \u00a6 List: \u00a6 * Item A \u00a6 * Item A \u00a6 * Item B \u00a6 * Item B \u00a6 */ \u00a6 */ \u00a6 Since the *'s are optional, they should not be consumed if used as bullets in a comment where leading *'s are absent. Unfortunately the following case fails. The bullets are incorrectly interpreted as leading *'s. /** List: * Item A * Item B */ Relevant: https://www.doxygen.nl/manual/markdown.html#mddox_stars",
            "title": "JavaDoc"
        },
        {
            "location": "specs/content-types/javadoc/#javadoc",
            "text": "Java, Java/Type/CoffeeScript and PHP all support java/jsdoc (/** ... */), which makes use of @tags. The tag structure is preserved when rewrapping. language: \"javascript\" /** \u00a6 -> /** \u00a6 * Description of the function. * Description of the \u00a6 * @param {string} str \u00a6 * function. \u00a6 * @returns {string} \u00a6 * @param {string} str \u00a6 * The return value \u00a6 * @returns {string} The \u00a6 */ \u00a6 * return value \u00a6 function convert(str) { */ function convert(str) { language: \"coffeescript\" Coffeescript has two common comment styles, and in each case the positioning of the #/* characters is preserved. ###* \u00a6 -> ###* \u00a6 * Description of the function. * Description of the \u00a6 * @param {string} str \u00a6 * function. \u00a6 * @returns {string} \u00a6 * @param {string} str \u00a6 * The return value \u00a6 * @returns {string} The \u00a6 ### \u00a6 * return value \u00a6 ### ###* \u00a6 -> ###* \u00a6 # Description of the function. # Description of the \u00a6 # @param {string} str \u00a6 # function. \u00a6 # @returns {string} \u00a6 # @param {string} str \u00a6 # The return value \u00a6 # @returns {string} The \u00a6 ### \u00a6 # return value \u00a6 ###",
            "title": "JavaDoc"
        },
        {
            "location": "specs/content-types/javadoc/#tags",
            "text": "language: \"javascript\" Where a line starts with a tag, it starts a new paragraph for wrapping. /** \u00a6 -> /** \u00a6 * Text \u00a6 * Text \u00a6 * @tag text text * @tag text \u00a6 */ \u00a6 * text \u00a6 */ Where a tag stands alone on a line, the line break after it is preserved and text on the following line is not wrapped with it. Sometimes this style is preferred: /** \u00a6 -> /** \u00a6 * @description \u00a6 * @description \u00a6 * Long description that * Long description \u00a6 * starts on the next line. * that starts on the \u00a6 */ \u00a6 * next line. \u00a6 \u00a6 */ \u00a6 Also, the @example tag is a special case: all lines between it and the following tag are assumed to be code and therefore ignored for wrapping. /** \u00a6 -> /** \u00a6 * @example \u00a6 * @example \u00a6 * // returns 2 \u00a6 * // returns 2 \u00a6 * Math.abs(3 - 5) \u00a6 * Math.abs(3 - 5) \u00a6 * \u00a6 * \u00a6 * // returns 5 \u00a6 * // returns 5 \u00a6 * Math.abs(1 - 6) \u00a6 * Math.abs(1 - 6) \u00a6 * @returns {Number} \u00a6 * @returns {Number} Absolute\u00a6 * Absolute value of \u00a6 * value of the number given.\u00a6 * the number given. \u00a6 */ \u00a6 */ \u00a6 \u00a6 An @example tag with text on the same line however, is treated as any other (used in php docs) language: \"php\" /** \u00a6 -> /** \u00a6 * text \u00a6 * text \u00a6 * @example url text1 * @example url \u00a6 * text2 \u00a6 * text1 text2 \u00a6 */ \u00a6 */ \u00a6",
            "title": "Tags"
        },
        {
            "location": "specs/content-types/javadoc/#inline-tags",
            "text": "Inline tags are not broken up /** \u00a6 -> /** \u00a6 * {@link a b \\} c} d * {@link a b \\} c} * e \u00a6 * d e \u00a6 */ \u00a6 */ \u00a6",
            "title": "Inline tags"
        },
        {
            "location": "specs/content-types/javadoc/#technical-details",
            "text": "A * at the beginning of each line is conventional but not required. The prefix or each line is preserved. Conventional: /** \u00a6 -> /** \u00a6 * a \u00a6 * a b \u00a6 * b c \u00a6 * c \u00a6 */ \u00a6 */ \u00a6 Star absent on first line: /** \u00a6 -> /** \u00a6 aaa bbb ccc aaa bbb \u00a6 * ddd \u00a6 * ccc ddd \u00a6 */ \u00a6 */ \u00a6 Irregular placement: /** \u00a6 -> /** \u00a6 * aaa bbb ccc * aaa bbb \u00a6 * ddd \u00a6 * ccc ddd \u00a6 */ \u00a6 */ \u00a6",
            "title": "Technical details"
        },
        {
            "location": "specs/content-types/javadoc/#stars-in-content",
            "text": "/** \u00a6 -> /** \u00a6 * List: \u00a6 * List: \u00a6 * * Item A \u00a6 * * Item A \u00a6 * * Item B \u00a6 * * Item B \u00a6 */ \u00a6 */ \u00a6 Since the *'s are optional, they should not be consumed if used as bullets in a comment where leading *'s are absent. /** \u00a6 -> /** \u00a6 List: \u00a6 List: \u00a6 * Item A \u00a6 * Item A \u00a6 * Item B \u00a6 * Item B \u00a6 */ \u00a6 */ \u00a6 Since the *'s are optional, they should not be consumed if used as bullets in a comment where leading *'s are absent. Unfortunately the following case fails. The bullets are incorrectly interpreted as leading *'s. /** List: * Item A * Item B */ Relevant: https://www.doxygen.nl/manual/markdown.html#mddox_stars",
            "title": "Stars in content"
        },
        {
            "location": "specs/content-types/julia/",
            "text": "language: \"julia\" Julia is like Python with slight differences. There are only triple double-quote strings (no triple single-quote). These can effectively be preceeded by any user-defined string r\"\"\"\u00a6 -> r\"\"\"\u00a6 a b c a b \u00a6 d \u00a6 c d \u00a6 \"\"\" \u00a6 \"\"\" \u00a6 doc\"\"\"\u00a6 -> doc\"\"\" a b c d a b c \u00a6 e \u00a6 d e \u00a6 \"\"\" \u00a6 \"\"\" \u00a6 This can also be preceeded by the @doc macro @doc raw\"\"\"\u00a6 -> @doc raw\"\"\" a b c d e f g a b c d e f h i \u00a6 g h i \u00a6 \"\"\" \u00a6 \"\"\" \u00a6 It also has # line comments and #= =# block comments. # a b c -> # a b \u00a6 # d \u00a6 # c d \u00a6 #= \u00a6 #= \u00a6 a b c -> a b \u00a6 d \u00a6 c d \u00a6 =# \u00a6 =# \u00a6",
            "title": "Julia"
        },
        {
            "location": "specs/content-types/latex/",
            "text": "LaTeX language: \"latex\" LaTeX has its own special wrapping behaviors. Both comments and content are wrapped. Line breaks For any command, if it's alone on a line (including args), then line breaks before and after will be kept. \\begin{abstract} \u00a6 -> \\begin{abstract} \u00a6 The abstract. \u00a6 The abstract. \u00a6 \\end{abstract} \u00a6 \\end{abstract} \u00a6 Args can be in {} or [] brackets, and there can be any number in any order. \\begin{definition}[term] \u00a6 -> \\begin{definition}[term] \u00a6 The \u00a6 The definition definition \u00a6 \\newtheorem{name}[counter]{Printed output} -> \\newtheorem{name}[counter]{Printed output} Text \u00a6 Text text \u00a6 text \u00a6 Also some commands (eg item ), will always keep a line break before them. \\begin{enumerate} -> \\begin{enumerate} \\item Item one \u00a6 \\item Item one \u00a6 \\item Item \u00a6 \\item Item two \u00a6 two \u00a6 \\item Item \u00a6 \\item Item three three \u00a6 \\end{enumerate}\u00a6 \\end{enumerate}\u00a6 \\[ and $$ should, like most other commands, preserve a line break before. a b c \u00a6 -> a b c d \u00a6 d e \u00a6 e \u00a6 \\[ \\] \u00a6 \\[ \\] \u00a6 a b c \u00a6 -> a b c d \u00a6 d e \u00a6 e \u00a6 $$ $$ \u00a6 $$ $$ \u00a6 A line break will also be kept after a line break command ( \\\\ , \\newline etc.). Eg: a b c d e f \u00a6 a b c d e f g h \u00a6 g h i j \\\\ \u00a6 i j \\\\ \u00a6 a b c d e f \u00a6 a b c d e f g h \u00a6 g h i \\\\newline \u00a6 i \\\\newline \u00a6 a \u00a6 a b \u00a6 b \\\\linebreak[4]\u00a6 -> \\\\linebreak[4] \u00a6 aaaaaaa \u00a6 aaaaaaa bbbbbbb \u00a6 bbbbbbb \\\\* \u00a6 \\\\* \u00a6 aaaaaaa \u00a6 aaaaaaa bbbbbbb \u00a6 bbbbbbb \\\\[2in] \u00a6 \\\\[2in] \u00a6 Preserved sections Anything within a verbatim environment is preserved without wrapping. Text before/after it is wrapped normally. Normal text \u00a6 -> Normal text normal\u00a6 normal text. \u00a6 text. \u00a6 \\begin{verbatim} \u00a6 \\begin{verbatim} \u00a6 Verbatim text Verbatim text preserved as-is preserved as-is \\end{verbatim} \u00a6 \\end{verbatim} \u00a6 Normal text \u00a6 Normal text normal\u00a6 normal text. \u00a6 text. \u00a6 This also applies to alltt , and source code environments listing and lstlisting , as well as all * variants. Note: to get this behavior, the \\begin{...} command must be alone on a line and not inline within a paragraph. a b c d e f g h \u00a6 -> a b c d e f g h i \u00a6 i j \u00a6 j \u00a6 \\begin{align*} \u00a6 \\begin{align*} \u00a6 a \u00a6 a \u00a6 b \u00a6 b \u00a6 \\end{align*} \u00a6 \\end{align*} \u00a6 a b c d e f g h \u00a6 a b c d e f g h i \u00a6 i j \u00a6 j \u00a6 The shortcuts \\( \\[ $ $$ also create a preserved section. a b c d e f g h \u00a6 -> a b c d e f g h i \u00a6 i j \u00a6 j \u00a6 \\( \u00a6 \\( \u00a6 a \u00a6 a \u00a6 b \u00a6 b \u00a6 \\) \u00a6 \\) \u00a6 a b c d e f g h \u00a6 -> a b c d e f g h i \u00a6 i j \u00a6 j \u00a6 \\[ \u00a6 \\[ \u00a6 a \u00a6 a \u00a6 b \u00a6 b \u00a6 \\] \u00a6 \\] \u00a6 a b c d e f g h \u00a6 a b c d e f g h i \u00a6 i j \u00a6 j \u00a6 $ \u00a6 $ \u00a6 a \u00a6 a \u00a6 b \u00a6 b \u00a6 $ \u00a6 $ \u00a6 a b c d e f g h \u00a6 a b c d e f g h i \u00a6 i j \u00a6 j \u00a6 $$ \u00a6 $$ \u00a6 a \u00a6 a \u00a6 b \u00a6 b \u00a6 $$ \u00a6 $$ \u00a6 a b c d e f g h \u00a6 a b c d e f g h i \u00a6 i j \u00a6 j \u00a6 Math sections The above also applies to math environments: math , displaymath , equation , align , gather , multline ; as well as shortcuts \\(...\\) , $...$ , \\[...\\] , $$...$$ . Used within a paragraph, they are wrapped normally. The well-known Pythagorean -> The well-known \u00a6 theorem is $a^2 + b^2 = Pythagorean theorem is\u00a6 c^2$. \u00a6 $a^2 + b^2 = c^2$. \u00a6 But with the opening section marker alone on a line, the section is preserved. One of the double angle -> One of the double \u00a6 formulas is: \u00a6 angle formulas is: \u00a6 $ \u00a6 $ \u00a6 \\cos (2\\theta) = \\cos (2\\theta) = \\cos^2 \\theta \\cos^2 \\theta - \\sin^2 \\theta - \\sin^2 \\theta $ \u00a6 $ \u00a6 Comments Line comments begin with a % % one two \u00a6 -> % one two three \u00a6 % three four \u00a6 % four \u00a6 In general, like for all languages, end-of-line comments are not properly supported. But a line-break after comment that comes after text on the same line will be preserved. a b c d e f g h \u00a6 -> a b c d e f g h i \u00a6 i j % z y x \u00a6 j % z y x \u00a6 k l m \u00a6 k l m \u00a6 Long comments cannot yet be wrapped, however. If too long, they will be put on the next line. a b c d e f g h \u00a6 -> a b c d e f g h i \u00a6 i j % z y x w v u t s r j \u00a6 k l m % z y x w v u t s r \u00a6 k l m \u00a6",
            "title": "LaTeX"
        },
        {
            "location": "specs/content-types/latex/#latex",
            "text": "language: \"latex\" LaTeX has its own special wrapping behaviors. Both comments and content are wrapped.",
            "title": "LaTeX"
        },
        {
            "location": "specs/content-types/latex/#line-breaks",
            "text": "For any command, if it's alone on a line (including args), then line breaks before and after will be kept. \\begin{abstract} \u00a6 -> \\begin{abstract} \u00a6 The abstract. \u00a6 The abstract. \u00a6 \\end{abstract} \u00a6 \\end{abstract} \u00a6 Args can be in {} or [] brackets, and there can be any number in any order. \\begin{definition}[term] \u00a6 -> \\begin{definition}[term] \u00a6 The \u00a6 The definition definition \u00a6 \\newtheorem{name}[counter]{Printed output} -> \\newtheorem{name}[counter]{Printed output} Text \u00a6 Text text \u00a6 text \u00a6 Also some commands (eg item ), will always keep a line break before them. \\begin{enumerate} -> \\begin{enumerate} \\item Item one \u00a6 \\item Item one \u00a6 \\item Item \u00a6 \\item Item two \u00a6 two \u00a6 \\item Item \u00a6 \\item Item three three \u00a6 \\end{enumerate}\u00a6 \\end{enumerate}\u00a6 \\[ and $$ should, like most other commands, preserve a line break before. a b c \u00a6 -> a b c d \u00a6 d e \u00a6 e \u00a6 \\[ \\] \u00a6 \\[ \\] \u00a6 a b c \u00a6 -> a b c d \u00a6 d e \u00a6 e \u00a6 $$ $$ \u00a6 $$ $$ \u00a6 A line break will also be kept after a line break command ( \\\\ , \\newline etc.). Eg: a b c d e f \u00a6 a b c d e f g h \u00a6 g h i j \\\\ \u00a6 i j \\\\ \u00a6 a b c d e f \u00a6 a b c d e f g h \u00a6 g h i \\\\newline \u00a6 i \\\\newline \u00a6 a \u00a6 a b \u00a6 b \\\\linebreak[4]\u00a6 -> \\\\linebreak[4] \u00a6 aaaaaaa \u00a6 aaaaaaa bbbbbbb \u00a6 bbbbbbb \\\\* \u00a6 \\\\* \u00a6 aaaaaaa \u00a6 aaaaaaa bbbbbbb \u00a6 bbbbbbb \\\\[2in] \u00a6 \\\\[2in] \u00a6",
            "title": "Line breaks"
        },
        {
            "location": "specs/content-types/latex/#preserved-sections",
            "text": "Anything within a verbatim environment is preserved without wrapping. Text before/after it is wrapped normally. Normal text \u00a6 -> Normal text normal\u00a6 normal text. \u00a6 text. \u00a6 \\begin{verbatim} \u00a6 \\begin{verbatim} \u00a6 Verbatim text Verbatim text preserved as-is preserved as-is \\end{verbatim} \u00a6 \\end{verbatim} \u00a6 Normal text \u00a6 Normal text normal\u00a6 normal text. \u00a6 text. \u00a6 This also applies to alltt , and source code environments listing and lstlisting , as well as all * variants. Note: to get this behavior, the \\begin{...} command must be alone on a line and not inline within a paragraph. a b c d e f g h \u00a6 -> a b c d e f g h i \u00a6 i j \u00a6 j \u00a6 \\begin{align*} \u00a6 \\begin{align*} \u00a6 a \u00a6 a \u00a6 b \u00a6 b \u00a6 \\end{align*} \u00a6 \\end{align*} \u00a6 a b c d e f g h \u00a6 a b c d e f g h i \u00a6 i j \u00a6 j \u00a6 The shortcuts \\( \\[ $ $$ also create a preserved section. a b c d e f g h \u00a6 -> a b c d e f g h i \u00a6 i j \u00a6 j \u00a6 \\( \u00a6 \\( \u00a6 a \u00a6 a \u00a6 b \u00a6 b \u00a6 \\) \u00a6 \\) \u00a6 a b c d e f g h \u00a6 -> a b c d e f g h i \u00a6 i j \u00a6 j \u00a6 \\[ \u00a6 \\[ \u00a6 a \u00a6 a \u00a6 b \u00a6 b \u00a6 \\] \u00a6 \\] \u00a6 a b c d e f g h \u00a6 a b c d e f g h i \u00a6 i j \u00a6 j \u00a6 $ \u00a6 $ \u00a6 a \u00a6 a \u00a6 b \u00a6 b \u00a6 $ \u00a6 $ \u00a6 a b c d e f g h \u00a6 a b c d e f g h i \u00a6 i j \u00a6 j \u00a6 $$ \u00a6 $$ \u00a6 a \u00a6 a \u00a6 b \u00a6 b \u00a6 $$ \u00a6 $$ \u00a6 a b c d e f g h \u00a6 a b c d e f g h i \u00a6 i j \u00a6 j \u00a6",
            "title": "Preserved sections"
        },
        {
            "location": "specs/content-types/latex/#math-sections",
            "text": "The above also applies to math environments: math , displaymath , equation , align , gather , multline ; as well as shortcuts \\(...\\) , $...$ , \\[...\\] , $$...$$ . Used within a paragraph, they are wrapped normally. The well-known Pythagorean -> The well-known \u00a6 theorem is $a^2 + b^2 = Pythagorean theorem is\u00a6 c^2$. \u00a6 $a^2 + b^2 = c^2$. \u00a6 But with the opening section marker alone on a line, the section is preserved. One of the double angle -> One of the double \u00a6 formulas is: \u00a6 angle formulas is: \u00a6 $ \u00a6 $ \u00a6 \\cos (2\\theta) = \\cos (2\\theta) = \\cos^2 \\theta \\cos^2 \\theta - \\sin^2 \\theta - \\sin^2 \\theta $ \u00a6 $ \u00a6",
            "title": "Math sections"
        },
        {
            "location": "specs/content-types/latex/#comments",
            "text": "Line comments begin with a % % one two \u00a6 -> % one two three \u00a6 % three four \u00a6 % four \u00a6 In general, like for all languages, end-of-line comments are not properly supported. But a line-break after comment that comes after text on the same line will be preserved. a b c d e f g h \u00a6 -> a b c d e f g h i \u00a6 i j % z y x \u00a6 j % z y x \u00a6 k l m \u00a6 k l m \u00a6 Long comments cannot yet be wrapped, however. If too long, they will be put on the next line. a b c d e f g h \u00a6 -> a b c d e f g h i \u00a6 i j % z y x w v u t s r j \u00a6 k l m % z y x w v u t s r \u00a6 k l m \u00a6",
            "title": "Comments"
        },
        {
            "location": "specs/content-types/lean/",
            "text": "language: \"lean\" -- a b c -> -- a b \u00a6 -- d \u00a6 -- c d \u00a6 x x x x x x x x x x /- a b c /- a b \u00a6 d \u00a6 c d \u00a6 -/ \u00a6 -/ \u00a6 x x x x x x x x x x",
            "title": "Lean"
        },
        {
            "location": "specs/content-types/lua/",
            "text": "language: \"lua\" Line comment --a b c -> --a b \u00a6 --d \u00a6 --c d \u00a6 z y x w z y x w v u \u00a6 v u \u00a6 Block comment --[[ --[[ a b c -> a b \u00a6 d \u00a6 c d \u00a6 ]]-- \u00a6 ]]-- \u00a6 z y x w z y x w v u \u00a6 v u \u00a6 Block comment markers can have any number or '='s in them as long as they match --[=[ --[=[ a b c -> a b \u00a6 d \u00a6 c d \u00a6 ]=]-- \u00a6 ]=]-- \u00a6 z y x w z y x w v u \u00a6 v u \u00a6 --[=====[ --[=====[ a b c -> a b \u00a6 d \u00a6 c d \u00a6 ]=====]-- ]=====]-- z y x w z y x w v u \u00a6 v u \u00a6",
            "title": "Lua"
        },
        {
            "location": "specs/content-types/matlab/",
            "text": "language: \"matlab\" In MATLAB, comments starting with %% are \"code section titles\", which must not be wrapped. %% Section title -> %% Section title % a b c d e % a b c d % f g \u00a6 % e f g \u00a6 x = 0:1:6*pi; x = 0:1:6*pi; y = sin(x); y = sin(x); plot(x,y) \u00a6 plot(x,y) \u00a6 \u00a6 \u00a6 %{ \u00a6 %{ \u00a6 a b c d e f g a b c d e \u00a6 h i \u00a6 f g h i \u00a6 %} \u00a6 %} \u00a6",
            "title": "Matlab"
        },
        {
            "location": "specs/content-types/octave/",
            "text": "language: \"octave\" References: - https://octave.org/doc/v5.2.0/Comments.html#Comments - https://wiki.octave.org/Octave_style_guide#Comments Line comments with % or # : x x x x x x x x x x % a b c -> % a b \u00a6 % d \u00a6 % c d \u00a6 x x x x x x x x x x x x x x x x x x x x # a b c -> # a b \u00a6 # d \u00a6 # c d \u00a6 x x x x x x x x x x ## is also allowed: x x x x x x x x x x ## a b c -> ## a b \u00a6 ## d \u00a6 ## c d \u00a6 x x x x x x x x x x Block comments with %{ ... %} or #{ ... #} : x x x x x x x x x x %{ a b c -> %{ a b \u00a6 d \u00a6 c d \u00a6 %} \u00a6 %} \u00a6 x x x x x x x x x x x x x x x x x x x x #{ a b c -> #{ a b \u00a6 d \u00a6 c d \u00a6 #} \u00a6 #} \u00a6 x x x x x x x x x x Demo/test blocks (with %! ) contain code so shouldn't be touched: %! a b c -> %! a b c %! d \u00a6 %! d \u00a6",
            "title": "Octave"
        },
        {
            "location": "specs/content-types/plaintext/",
            "text": "Basics language: \"plaintext\" Long lines are split at whitespace and wrapped. A long line. -> A long \u00a6 \u00a6 line. \u00a6 Short lines are concatenated and then wrapped as appropriate. Three. \u00a6 -> Three. Short. \u00a6 Short. \u00a6 Lines. \u00a6 Lines. \u00a6 Words that are longer than the wrapping width (like URLs) will be put on a new line but won't be broken up. Go to www.example.com -> Go to \u00a6 \u00a6 www.example.com Paragraphs are separated by blank lines. Foo bar baz. -> Foo bar \u00a6 \u00a6 baz. \u00a6 Foo \u00a6 \u00a6 bar. \u00a6 Foo bar. \u00a6 Or by a significant difference in indent (2 characters or more). This only applies to the default plain text type. Foo bar baz. -> Foo bar \u00a6 Foo \u00a6 baz. \u00a6 bar. \u00a6 Foo bar.\u00a6 Also works with tab characters. Two spaces at the end of a line will preserve the line break after it (this works anywhere). Foo bar.\u00b7\u00b7 \u00a6 -> Foo bar.\u00b7\u00b7 \u00a6 Baz foo \u00a6 Baz foo bar \u00a6 bar baz. \u00a6 baz. \u00a6 Odd cases Tab characters in the middle of a paragraph could cause improper wrapping.",
            "title": "Basics"
        },
        {
            "location": "specs/content-types/plaintext/#basics",
            "text": "language: \"plaintext\" Long lines are split at whitespace and wrapped. A long line. -> A long \u00a6 \u00a6 line. \u00a6 Short lines are concatenated and then wrapped as appropriate. Three. \u00a6 -> Three. Short. \u00a6 Short. \u00a6 Lines. \u00a6 Lines. \u00a6 Words that are longer than the wrapping width (like URLs) will be put on a new line but won't be broken up. Go to www.example.com -> Go to \u00a6 \u00a6 www.example.com Paragraphs are separated by blank lines. Foo bar baz. -> Foo bar \u00a6 \u00a6 baz. \u00a6 Foo \u00a6 \u00a6 bar. \u00a6 Foo bar. \u00a6 Or by a significant difference in indent (2 characters or more). This only applies to the default plain text type. Foo bar baz. -> Foo bar \u00a6 Foo \u00a6 baz. \u00a6 bar. \u00a6 Foo bar.\u00a6 Also works with tab characters. Two spaces at the end of a line will preserve the line break after it (this works anywhere). Foo bar.\u00b7\u00b7 \u00a6 -> Foo bar.\u00b7\u00b7 \u00a6 Baz foo \u00a6 Baz foo bar \u00a6 bar baz. \u00a6 baz. \u00a6",
            "title": "Basics"
        },
        {
            "location": "specs/content-types/plaintext/#odd-cases",
            "text": "Tab characters in the middle of a paragraph could cause improper wrapping.",
            "title": "Odd cases"
        },
        {
            "location": "specs/content-types/powershell/",
            "text": "PowerShell language: \"powershell\" PowerShell supports comment-based help documentation. Basic example <# \u00a6 <# \u00a6 .SYNOPSIS \u00a6 .SYNOPSIS \u00a6 What the function does\u00a6 What the function does\u00a6 .DESCRIPTION \u00a6 .DESCRIPTION \u00a6 Longer explanation of what it does. -> Longer explanation of \u00a6 \u00a6 what it does. \u00a6 Another paragraph. \u00a6 \u00a6 \u00a6 Another paragraph. \u00a6 .PARAMETER ToString \u00a6 \u00a6 Add to output \u00a6 .PARAMETER ToString \u00a6 the result \u00a6 Add to output the \u00a6 as a string \u00a6 result as a string \u00a6 \u00a6 \u00a6 .EXAMPLE \u00a6 .EXAMPLE \u00a6 Test-Function \u00a6 Test-Function \u00a6 \u00a6 \u00a6 .EXAMPLE \u00a6 .EXAMPLE \u00a6 Test-Function -ToString Test-Function -ToString Tests the function and outputs Tests the function and\u00a6 the result \u00a6 outputs the result as \u00a6 as a string. \u00a6 a string. \u00a6 #> \u00a6 #> \u00a6 All lines beginning with keywords (. and then one or more capital letters) are not wrapped. <# \u00a6 -> <# \u00a6 one two three one two \u00a6 four \u00a6 three four \u00a6 .A \u00a6 .A \u00a6 one two three one two \u00a6 four \u00a6 three four \u00a6 #> \u00a6 #> \u00a6 CBH can also be in # line comments # one two three -> # one two \u00a6 # four \u00a6 # three four \u00a6 # .A \u00a6 # .A \u00a6 # one two three # one two \u00a6 # four \u00a6 # three four \u00a6 Some keywords (eg .PARAMETER) take arguments. These must be kept on the same line. <# \u00a6 -> <# \u00a6 .PARAMETER LongParameterName .PARAMETER LongParameterName aaaaa bbbbb aaaaa \u00a6 ccc \u00a6 bbbbb ccc \u00a6 #> \u00a6 #> \u00a6 Each section has its own independent indent. The indent is determined by the first line of text in the section. # .SYNOPSIS \u00a6 -> # .SYNOPSIS \u00a6 # aaa bbb ccc # aaa bbb \u00a6 # ddd \u00a6 # ccc ddd \u00a6 <# \u00a6 -> <# \u00a6 .SYNOPSIS \u00a6 .SYNOPSIS \u00a6 aaa bbb ccc aaa bbb \u00a6 ddd \u00a6 ccc ddd \u00a6 #> \u00a6 #> \u00a6 Example sections .EXAMPLE sections get some special treatment. The first line is assumed to be code, so won't be wrapped. (PowerShell makes this assumption too, and when the help is shown, adds PS C:\\> to the beginning of the line and a blank line after it.) Lines after that will be wrapped. # .EXAMPLE \u00a6 -> # .EXAMPLE \u00a6 # Get-Greeting -name Sam # Get-Greeting -name Sam # Gets a greeting for \"Sam\" # Gets a greeting \u00a6 \u00a6 # for \"Sam\" \u00a6 Extra code lines can also be declared by starting them with PS C:\\> . A line starting with this won't be wrapped. # .EXAMPLE \u00a6 -> # .EXAMPLE \u00a6 # PS C:\\>$a = 123 # PS C:\\>$a = 123 # PS C:\\>$b = 456 # PS C:\\>$b = 456 # PS C:\\>$c = $a + $b # PS C:\\>$c = $a + $b # \u00a6 # \u00a6 # This line is still # This line is \u00a6 # wrapped. \u00a6 # still wrapped.\u00a6 Other lines are processed as markdown, so large code or output sections can also be indented 4 spaces. <# \u00a6 <# \u00a6 .EXAMPLE \u00a6 \u00b7.EXAMPLE \u00a6 \u00a6 \u00a6 Get-User -name [D-E]* Get-User -name [D-E]* \u00a6 \u00a6 Gets all users with names -> Gets all users with \u00a6 beginning D-E: \u00a6 names beginning D-E:\u00a6 \u00a6 \u00a6 Name Password Name Password ---- -------- ---- -------- Dave 123456 Dave 123456 Eric Password1! Eric Password1! #> \u00a6 #> \u00a6",
            "title": "PowerShell"
        },
        {
            "location": "specs/content-types/powershell/#powershell",
            "text": "language: \"powershell\" PowerShell supports comment-based help documentation. Basic example <# \u00a6 <# \u00a6 .SYNOPSIS \u00a6 .SYNOPSIS \u00a6 What the function does\u00a6 What the function does\u00a6 .DESCRIPTION \u00a6 .DESCRIPTION \u00a6 Longer explanation of what it does. -> Longer explanation of \u00a6 \u00a6 what it does. \u00a6 Another paragraph. \u00a6 \u00a6 \u00a6 Another paragraph. \u00a6 .PARAMETER ToString \u00a6 \u00a6 Add to output \u00a6 .PARAMETER ToString \u00a6 the result \u00a6 Add to output the \u00a6 as a string \u00a6 result as a string \u00a6 \u00a6 \u00a6 .EXAMPLE \u00a6 .EXAMPLE \u00a6 Test-Function \u00a6 Test-Function \u00a6 \u00a6 \u00a6 .EXAMPLE \u00a6 .EXAMPLE \u00a6 Test-Function -ToString Test-Function -ToString Tests the function and outputs Tests the function and\u00a6 the result \u00a6 outputs the result as \u00a6 as a string. \u00a6 a string. \u00a6 #> \u00a6 #> \u00a6 All lines beginning with keywords (. and then one or more capital letters) are not wrapped. <# \u00a6 -> <# \u00a6 one two three one two \u00a6 four \u00a6 three four \u00a6 .A \u00a6 .A \u00a6 one two three one two \u00a6 four \u00a6 three four \u00a6 #> \u00a6 #> \u00a6 CBH can also be in # line comments # one two three -> # one two \u00a6 # four \u00a6 # three four \u00a6 # .A \u00a6 # .A \u00a6 # one two three # one two \u00a6 # four \u00a6 # three four \u00a6 Some keywords (eg .PARAMETER) take arguments. These must be kept on the same line. <# \u00a6 -> <# \u00a6 .PARAMETER LongParameterName .PARAMETER LongParameterName aaaaa bbbbb aaaaa \u00a6 ccc \u00a6 bbbbb ccc \u00a6 #> \u00a6 #> \u00a6 Each section has its own independent indent. The indent is determined by the first line of text in the section. # .SYNOPSIS \u00a6 -> # .SYNOPSIS \u00a6 # aaa bbb ccc # aaa bbb \u00a6 # ddd \u00a6 # ccc ddd \u00a6 <# \u00a6 -> <# \u00a6 .SYNOPSIS \u00a6 .SYNOPSIS \u00a6 aaa bbb ccc aaa bbb \u00a6 ddd \u00a6 ccc ddd \u00a6 #> \u00a6 #> \u00a6",
            "title": "PowerShell"
        },
        {
            "location": "specs/content-types/powershell/#example-sections",
            "text": ".EXAMPLE sections get some special treatment. The first line is assumed to be code, so won't be wrapped. (PowerShell makes this assumption too, and when the help is shown, adds PS C:\\> to the beginning of the line and a blank line after it.) Lines after that will be wrapped. # .EXAMPLE \u00a6 -> # .EXAMPLE \u00a6 # Get-Greeting -name Sam # Get-Greeting -name Sam # Gets a greeting for \"Sam\" # Gets a greeting \u00a6 \u00a6 # for \"Sam\" \u00a6 Extra code lines can also be declared by starting them with PS C:\\> . A line starting with this won't be wrapped. # .EXAMPLE \u00a6 -> # .EXAMPLE \u00a6 # PS C:\\>$a = 123 # PS C:\\>$a = 123 # PS C:\\>$b = 456 # PS C:\\>$b = 456 # PS C:\\>$c = $a + $b # PS C:\\>$c = $a + $b # \u00a6 # \u00a6 # This line is still # This line is \u00a6 # wrapped. \u00a6 # still wrapped.\u00a6 Other lines are processed as markdown, so large code or output sections can also be indented 4 spaces. <# \u00a6 <# \u00a6 .EXAMPLE \u00a6 \u00b7.EXAMPLE \u00a6 \u00a6 \u00a6 Get-User -name [D-E]* Get-User -name [D-E]* \u00a6 \u00a6 Gets all users with names -> Gets all users with \u00a6 beginning D-E: \u00a6 names beginning D-E:\u00a6 \u00a6 \u00a6 Name Password Name Password ---- -------- ---- -------- Dave 123456 Dave 123456 Eric Password1! Eric Password1! #> \u00a6 #> \u00a6",
            "title": "Example sections"
        },
        {
            "location": "specs/content-types/prolog/",
            "text": "language: \"prolog\" % a b c -> % a b \u00a6 % d \u00a6 % c d \u00a6 /* a b c -> /* a b \u00a6 d \u00a6 c d \u00a6 */ \u00a6 */ \u00a6",
            "title": "Prolog"
        },
        {
            "location": "specs/content-types/proto/",
            "text": "language: \"proto\" // a b c -> // a b \u00a6 // d \u00a6 // c d \u00a6 x x x x x x x x x x",
            "title": "Proto"
        },
        {
            "location": "specs/content-types/python/",
            "text": "Python language: \"python\" Whole paragraphs of text can be written between triple \" or ' \"\"\" \u00a6 -> \"\"\" \u00a6 a b c a b \u00a6 d \u00a6 c d \u00a6 \"\"\" \u00a6 \"\"\" \u00a6 ''' \u00a6 -> ''' \u00a6 a b c a b \u00a6 d \u00a6 c d \u00a6 ''' \u00a6 ''' \u00a6 ''' Could appear inside a \"\"\"-block and vice-versa. \"\"\" \u00a6 -> \"\"\" \u00a6 a b c a b \u00a6 d \u00a6 c d \u00a6 ''' \u00a6 ''' \u00a6 a \u00a6 a b \u00a6 b \u00a6 \"\"\" \u00a6 \"\"\" \u00a6 ''' \u00a6 -> ''' \u00a6 a b c a b \u00a6 d \u00a6 c d \u00a6 \"\"\" \u00a6 \"\"\" \u00a6 a \u00a6 a b \u00a6 b \u00a6 ''' \u00a6 ''' \u00a6 Triple-quoted strings can be preceded with a character. Valid combinations are b, f, r, u, br, rb, fr, rf, and with any comnbination of upper and lower case. b\"\"\" -> b\"\"\"\u00a6 a b c a b \u00a6 d \u00a6 c d \u00a6 \"\"\" \u00a6 \"\"\" \u00a6 f\"\"\" -> f\"\"\"\u00a6 a b c a b \u00a6 d \u00a6 c d \u00a6 \"\"\" \u00a6 \"\"\" \u00a6 r''' -> r'''\u00a6 a b c a b \u00a6 d \u00a6 c d \u00a6 ''' \u00a6 ''' \u00a6 u''' -> u'''\u00a6 a b c a b \u00a6 d \u00a6 c d \u00a6 ''' \u00a6 ''' \u00a6 fr\"\"\" -> fr\"\"\" a b c a b \u00a6 d \u00a6 c d \u00a6 \"\"\" \u00a6 \"\"\" \u00a6 rF''' -> rF''' a b c a b \u00a6 d \u00a6 c d \u00a6 ''' \u00a6 ''' \u00a6 Br\"\"\" -> Br\"\"\" a b c a b \u00a6 d \u00a6 c d \u00a6 \"\"\" \u00a6 \"\"\" \u00a6 RB''' -> RB''' a b c a b \u00a6 d \u00a6 c d \u00a6 ''' \u00a6 ''' \u00a6 Starting the string later on the line is also (imperfectly) supported. var = \"\"\"\u00a6 -> var = \"\"\" a b c d e f a b c d e g h \u00a6 f g h \u00a6 \"\"\" \u00a6 \"\"\" \u00a6 i \u00a6 i \u00a6 j \u00a6 j \u00a6 Imperfectly, because it's not a full language parser. Strings on one line are wrapped too, var = \"\"\"a b c\"\"\" -> var = \"\"\"a b x x x x x x c\"\"\" \u00a6 \u00a6 x x x x x x Though these should maybe be left alone in a large (eg whole-document) selection, and only wrapped if explicitly asked reStructuredText The content of Python docstrings is reStructuredText. \"\"\" \u00a6 \"\"\" \u00a6 :Author: Me \u00a6 :Author: Me \u00a6 :version: 1 \u00a6 :version: 1 \u00a6 \u00a6 \u00a6 term \u00a6 term \u00a6 definition \u00a6 -> definition text \u00a6 text text \u00a6 text \u00a6 \u00a6 \u00a6 :: \u00a6 :: \u00a6 \u00a6 \u00a6 literal \u00a6 literal \u00a6 block \u00a6 block \u00a6 \"\"\" \u00a6 \"\"\" \u00a6",
            "title": "Python"
        },
        {
            "location": "specs/content-types/python/#python",
            "text": "language: \"python\" Whole paragraphs of text can be written between triple \" or ' \"\"\" \u00a6 -> \"\"\" \u00a6 a b c a b \u00a6 d \u00a6 c d \u00a6 \"\"\" \u00a6 \"\"\" \u00a6 ''' \u00a6 -> ''' \u00a6 a b c a b \u00a6 d \u00a6 c d \u00a6 ''' \u00a6 ''' \u00a6 ''' Could appear inside a \"\"\"-block and vice-versa. \"\"\" \u00a6 -> \"\"\" \u00a6 a b c a b \u00a6 d \u00a6 c d \u00a6 ''' \u00a6 ''' \u00a6 a \u00a6 a b \u00a6 b \u00a6 \"\"\" \u00a6 \"\"\" \u00a6 ''' \u00a6 -> ''' \u00a6 a b c a b \u00a6 d \u00a6 c d \u00a6 \"\"\" \u00a6 \"\"\" \u00a6 a \u00a6 a b \u00a6 b \u00a6 ''' \u00a6 ''' \u00a6 Triple-quoted strings can be preceded with a character. Valid combinations are b, f, r, u, br, rb, fr, rf, and with any comnbination of upper and lower case. b\"\"\" -> b\"\"\"\u00a6 a b c a b \u00a6 d \u00a6 c d \u00a6 \"\"\" \u00a6 \"\"\" \u00a6 f\"\"\" -> f\"\"\"\u00a6 a b c a b \u00a6 d \u00a6 c d \u00a6 \"\"\" \u00a6 \"\"\" \u00a6 r''' -> r'''\u00a6 a b c a b \u00a6 d \u00a6 c d \u00a6 ''' \u00a6 ''' \u00a6 u''' -> u'''\u00a6 a b c a b \u00a6 d \u00a6 c d \u00a6 ''' \u00a6 ''' \u00a6 fr\"\"\" -> fr\"\"\" a b c a b \u00a6 d \u00a6 c d \u00a6 \"\"\" \u00a6 \"\"\" \u00a6 rF''' -> rF''' a b c a b \u00a6 d \u00a6 c d \u00a6 ''' \u00a6 ''' \u00a6 Br\"\"\" -> Br\"\"\" a b c a b \u00a6 d \u00a6 c d \u00a6 \"\"\" \u00a6 \"\"\" \u00a6 RB''' -> RB''' a b c a b \u00a6 d \u00a6 c d \u00a6 ''' \u00a6 ''' \u00a6 Starting the string later on the line is also (imperfectly) supported. var = \"\"\"\u00a6 -> var = \"\"\" a b c d e f a b c d e g h \u00a6 f g h \u00a6 \"\"\" \u00a6 \"\"\" \u00a6 i \u00a6 i \u00a6 j \u00a6 j \u00a6 Imperfectly, because it's not a full language parser. Strings on one line are wrapped too, var = \"\"\"a b c\"\"\" -> var = \"\"\"a b x x x x x x c\"\"\" \u00a6 \u00a6 x x x x x x Though these should maybe be left alone in a large (eg whole-document) selection, and only wrapped if explicitly asked",
            "title": "Python"
        },
        {
            "location": "specs/content-types/python/#restructuredtext",
            "text": "The content of Python docstrings is reStructuredText. \"\"\" \u00a6 \"\"\" \u00a6 :Author: Me \u00a6 :Author: Me \u00a6 :version: 1 \u00a6 :version: 1 \u00a6 \u00a6 \u00a6 term \u00a6 term \u00a6 definition \u00a6 -> definition text \u00a6 text text \u00a6 text \u00a6 \u00a6 \u00a6 :: \u00a6 :: \u00a6 \u00a6 \u00a6 literal \u00a6 literal \u00a6 block \u00a6 block \u00a6 \"\"\" \u00a6 \"\"\" \u00a6",
            "title": "reStructuredText"
        },
        {
            "location": "specs/content-types/r/",
            "text": "language: \"r\" # a b c -> # a b \u00a6 # d \u00a6 # c d \u00a6 ROxygen comments #' a b c -> #' a b \u00a6 #' d \u00a6 #' c d \u00a6",
            "title": "R"
        },
        {
            "location": "specs/content-types/tcl/",
            "text": "language: \"tcl\" # a b c -> # a b \u00a6 # d \u00a6 # c d \u00a6 z y x w z y x w v u \u00a6 v u \u00a6",
            "title": "Tcl"
        },
        {
            "location": "specs/content-types/yaml/",
            "text": "language: \"yaml\" In yaml (like markdown), the content is treated as wrappable text rather than code. This allows multiline text content to be wrapped if desired. short values: \u00a6 -> short values: \u00a6 a: 10 \u00a6 a: 10 \u00a6 b: 20 \u00a6 b: 20 \u00a6 long line: > \u00a6 long line: > \u00a6 aaa\u00ab\u00bb bbb ccc ddd aaa bbb ccc \u00a6 short lines: > \u00a6 ddd \u00a6 aaa\u00ab\u00bb \u00a6 short lines: > \u00a6 bbb \u00a6 aaa bbb ccc \u00a6 ccc \u00a6 ddd \u00a6 ddd \u00a6 \u00a6 Paragraphs are only determined by blank lines or significant differences (>=2) in indent. Therefore care must be taken to select only the desired paragraphs, because with normal key: value lines undesirable wrapping will happen. short values: \u00a6 -> short values: \u00a6 a: 10 \u00a6 a: 10 b: \u00a6 b: 20 \u00a6 20 \u00a6 Full support for yaml files (like markdown, latex) may be added in the future.",
            "title": "Yaml"
        },
        {
            "location": "specs/content-types/markdown/_markdown/",
            "text": "Markdown Markdown (mostly based on the CommonMark spec ) is used for the contents of code comments (in most languages), as well as normal Markdown files. language: \"markdown\" Paragraphs ( details ) Long lines are split at whitespace and wrapped. A long line. -> A long \u00a6 \u00a6 line. \u00a6 Short lines are concatenated and then wrapped as appropriate. Three. \u00a6 -> Three. Short. \u00a6 Short. \u00a6 Lines. \u00a6 Lines. \u00a6 Normal paragraphs are separated by spaces. Paragraph one. -> Paragraph \u00a6 \u00a6 one. \u00a6 Para \u00a6 \u00a6 two. \u00a6 Para two. \u00a6 A line break can be forced within a paragraph by ending a line with a single \\ or two spaces. A \u00a6 -> A break\\ \u00a6 break\\ \u00a6 Another line \u00a6 Another line break\u00b7\u00b7 break\u00b7\u00b7 \u00a6 More text \u00a6 More text \u00a6 Line breaks are also preserved after a line that ends in <br> or <br/> HTML \u00a6 HTML line \u00a6 line break<br> \u00a6 -> break<br> \u00a6 HTML \u00a6 HTML line \u00a6 line break<br/>\u00a6 break<br/> \u00a6 Text \u00a6 Text \u00a6 Thematic breaks ( details ) A thematic break ( <hr/> in HTML) is made from at least 3 of the characters *** , --- or ___ . *** \u00a6 *** \u00a6 --- \u00a6 -> --- \u00a6 ___ \u00a6 ___ \u00a6 ATX headings The text must be on a single line, so these are not wrapped. # Heading style 1 \u00a6 -> # Heading style 1 \u00a6 ### With trailing #'s ### ### With trailing #'s ### Setext headings ( details ) However setext headings (with underlines) can be wrapped. But the underline remains unchanged (this is maybe something that could be added in the future). Heading with underline -> Heading with \u00a6 ---------------------\u00a6 underline \u00a6 With double \u00a6 ---------------------\u00a6 underline \u00a6 With double underline\u00a6 ================== \u00a6 ================== \u00a6 Bullet lists ( details ) They can immediately follow a paragraph. List items: \u00a6 -> List items: \u00a6 - With dash \u00a6 - With dash \u00a6 * With star \u00a6 * With star \u00a6 + With plus text wrapped + With plus \u00a6 \u00a6 text wrapped \u00a6 Numbered lists 1) Item 1 \u00a6 -> 1) Item 1 \u00a6 2. Item 2 \u00a6 2. Item 2 \u00a6 999999999) Item 999999999 \u00a6 999999999) Item 999999999 \u00a6 Block quotes ( details ) > one two three -> > one two \u00a6 four \u00a6 three four \u00a6 > one two three -> > one two \u00a6 > four \u00a6 > three four\u00a6 Indented code blocks ( details ) \u00b7\u00b7\u00b7\u00b7a = 1; \u00a6 -> \u00b7\u00b7\u00b7\u00b7a = 1; \u00a6 \u00b7\u00b7\u00b7\u00b7b = 2; \u00a6 \u00b7\u00b7\u00b7\u00b7b = 2; \u00a6 text text text text text \u00a6 \u00a6 text \u00a6 Fenced code blocks ( details ) Can come directly after a paragraph. Some \u00a6 -> Some text \u00a6 text \u00a6 ``` c \u00a6 ``` c \u00a6 a = 1; \u00a6 a = 1; \u00a6 b = 2; \u00a6 b = 2; \u00a6 ``` \u00a6 ``` \u00a6 \u00b7\u00b7~~~ javascript \u00b7\u00b7~~~ javascript a = 1; \u00a6 a = 1; \u00a6 b = 2; \u00a6 b = 2; \u00a6 \u00b7~~~ \u00a6 \u00b7~~~ \u00a6 \u00a6 Tables ( details ) Tables are not in commonmark, and the minimum that represents a table varies greatly between markdown flavors. Therefore Rewrap has quite a permissive specification: a table consists of at least two lines containing a | , where at least one is a \"separator\" line ( --- | --- | ... ). still | just \u00a6 -> still | just paragraph \u00a6 paragraph | text \u00a6 | text \u00a6 ---- | --- \u00a6 -> ---- | --- \u00a6 this | is \u00a6 this | is \u00a6 a | table \u00a6 a | table \u00a6 Other HTML Footnotes and Link Reference Definitions Comments Front Matter",
            "title": "Markdown"
        },
        {
            "location": "specs/content-types/markdown/_markdown/#markdown",
            "text": "Markdown (mostly based on the CommonMark spec ) is used for the contents of code comments (in most languages), as well as normal Markdown files. language: \"markdown\"",
            "title": "Markdown"
        },
        {
            "location": "specs/content-types/markdown/_markdown/#paragraphs",
            "text": "( details ) Long lines are split at whitespace and wrapped. A long line. -> A long \u00a6 \u00a6 line. \u00a6 Short lines are concatenated and then wrapped as appropriate. Three. \u00a6 -> Three. Short. \u00a6 Short. \u00a6 Lines. \u00a6 Lines. \u00a6 Normal paragraphs are separated by spaces. Paragraph one. -> Paragraph \u00a6 \u00a6 one. \u00a6 Para \u00a6 \u00a6 two. \u00a6 Para two. \u00a6 A line break can be forced within a paragraph by ending a line with a single \\ or two spaces. A \u00a6 -> A break\\ \u00a6 break\\ \u00a6 Another line \u00a6 Another line break\u00b7\u00b7 break\u00b7\u00b7 \u00a6 More text \u00a6 More text \u00a6 Line breaks are also preserved after a line that ends in <br> or <br/> HTML \u00a6 HTML line \u00a6 line break<br> \u00a6 -> break<br> \u00a6 HTML \u00a6 HTML line \u00a6 line break<br/>\u00a6 break<br/> \u00a6 Text \u00a6 Text \u00a6",
            "title": "Paragraphs"
        },
        {
            "location": "specs/content-types/markdown/_markdown/#thematic-breaks",
            "text": "( details ) A thematic break ( <hr/> in HTML) is made from at least 3 of the characters *** , --- or ___ . *** \u00a6 *** \u00a6 --- \u00a6 -> --- \u00a6 ___ \u00a6 ___ \u00a6",
            "title": "Thematic breaks"
        },
        {
            "location": "specs/content-types/markdown/_markdown/#atx-headings",
            "text": "The text must be on a single line, so these are not wrapped. # Heading style 1 \u00a6 -> # Heading style 1 \u00a6 ### With trailing #'s ### ### With trailing #'s ###",
            "title": "ATX headings"
        },
        {
            "location": "specs/content-types/markdown/_markdown/#setext-headings",
            "text": "( details ) However setext headings (with underlines) can be wrapped. But the underline remains unchanged (this is maybe something that could be added in the future). Heading with underline -> Heading with \u00a6 ---------------------\u00a6 underline \u00a6 With double \u00a6 ---------------------\u00a6 underline \u00a6 With double underline\u00a6 ================== \u00a6 ================== \u00a6",
            "title": "Setext headings"
        },
        {
            "location": "specs/content-types/markdown/_markdown/#bullet-lists",
            "text": "( details ) They can immediately follow a paragraph. List items: \u00a6 -> List items: \u00a6 - With dash \u00a6 - With dash \u00a6 * With star \u00a6 * With star \u00a6 + With plus text wrapped + With plus \u00a6 \u00a6 text wrapped \u00a6",
            "title": "Bullet lists"
        },
        {
            "location": "specs/content-types/markdown/_markdown/#numbered-lists",
            "text": "1) Item 1 \u00a6 -> 1) Item 1 \u00a6 2. Item 2 \u00a6 2. Item 2 \u00a6 999999999) Item 999999999 \u00a6 999999999) Item 999999999 \u00a6",
            "title": "Numbered lists"
        },
        {
            "location": "specs/content-types/markdown/_markdown/#block-quotes",
            "text": "( details ) > one two three -> > one two \u00a6 four \u00a6 three four \u00a6 > one two three -> > one two \u00a6 > four \u00a6 > three four\u00a6",
            "title": "Block quotes"
        },
        {
            "location": "specs/content-types/markdown/_markdown/#indented-code-blocks",
            "text": "( details ) \u00b7\u00b7\u00b7\u00b7a = 1; \u00a6 -> \u00b7\u00b7\u00b7\u00b7a = 1; \u00a6 \u00b7\u00b7\u00b7\u00b7b = 2; \u00a6 \u00b7\u00b7\u00b7\u00b7b = 2; \u00a6 text text text text text \u00a6 \u00a6 text \u00a6",
            "title": "Indented code blocks"
        },
        {
            "location": "specs/content-types/markdown/_markdown/#fenced-code-blocks",
            "text": "( details ) Can come directly after a paragraph. Some \u00a6 -> Some text \u00a6 text \u00a6 ``` c \u00a6 ``` c \u00a6 a = 1; \u00a6 a = 1; \u00a6 b = 2; \u00a6 b = 2; \u00a6 ``` \u00a6 ``` \u00a6 \u00b7\u00b7~~~ javascript \u00b7\u00b7~~~ javascript a = 1; \u00a6 a = 1; \u00a6 b = 2; \u00a6 b = 2; \u00a6 \u00b7~~~ \u00a6 \u00b7~~~ \u00a6 \u00a6",
            "title": "Fenced code blocks"
        },
        {
            "location": "specs/content-types/markdown/_markdown/#tables",
            "text": "( details ) Tables are not in commonmark, and the minimum that represents a table varies greatly between markdown flavors. Therefore Rewrap has quite a permissive specification: a table consists of at least two lines containing a | , where at least one is a \"separator\" line ( --- | --- | ... ). still | just \u00a6 -> still | just paragraph \u00a6 paragraph | text \u00a6 | text \u00a6 ---- | --- \u00a6 -> ---- | --- \u00a6 this | is \u00a6 this | is \u00a6 a | table \u00a6 a | table \u00a6",
            "title": "Tables"
        },
        {
            "location": "specs/content-types/markdown/_markdown/#other",
            "text": "HTML Footnotes and Link Reference Definitions Comments Front Matter",
            "title": "Other"
        },
        {
            "location": "specs/content-types/markdown/blockquotes/",
            "text": "language: \"markdown\" Issue 204 > a \u00a6 > a \u00a6 > \u00a6 -> > \u00a6 > a b c > a b\u00a6 > d \u00a6 > c d\u00a6 Content can have varying prefixes. With reformat off this needs to be preserved. > a \u00a6 > a \u00a6 > \u00a6 -> > \u00a6 >a b c >a b \u00a6 >d \u00a6 >c d \u00a6 > a \u00a6 > a \u00a6 > \u00a6 -> > \u00a6 >a b c >a b \u00a6 >d \u00a6 >c d \u00a6 > \u00a6 > \u00a6 > a \u00a6 > a \u00a6 > a \u00a6 > a \u00a6 > \u00a6 -> > \u00a6 >>a b c >>a b\u00a6 d \u00a6 c d \u00a6 > \u00a6 > \u00a6 >>> a\u00a6 >>> a\u00a6 > a \u00a6 > a \u00a6 >>> a b -> >>> a\u00a6 >>> \u00a6 >>> b\u00a6 >>> \u00a6 If the input is only 1 line, then created lines are given the same prefix as the first > a b c d e f -> > a b c \u00a6 \u00a6 > d e f \u00a6 >a b c d e f -> >a b c \u00a6 \u00a6 >d e f \u00a6 > a b c d e f -> > a b c \u00a6 \u00a6 > d e f \u00a6 If the a line doesn't start with the > marker, then the blockquote section has terminated, unless the line is a paragraph continuation line. >\u00b7\u00b7``` \u00a6 >\u00b7\u00b7``` \u00a6 \u00b7\u00b7\u00b7foo \u00a6 -> \u00b7\u00b7\u00b7foo \u00a6 \u00b7\u00b7bar \u00a6 \u00b7\u00b7bar baz\u00a6 \u00b7\u00b7baz \u00a6 \u00a6 The first (optional) space after the > marker is treated as part of the blockquote marker, so an indented code block has to be indented 5 spaces. >\u00b7\u00b7\u00b7\u00b7\u00b7code block >\u00b7\u00b7\u00b7\u00b7\u00b7code block >\u00b7\u00b7\u00b7\u00b7text \u00a6 -> >\u00b7\u00b7\u00b7\u00b7text text\u00a6 >\u00b7\u00b7\u00b7\u00b7text \u00a6 \u00a6 > one\u00b7\u00b7 \u00a6 > one\u00b7\u00b7 \u00a6 two \u00a6 -> two three\u00a6 > three four > four",
            "title": "Blockquotes"
        },
        {
            "location": "specs/content-types/markdown/comments/",
            "text": "Markdown: Comments language: markdown Comments are detected but wrapping their contents is not yet supported. \u00a6 \u00a6 <!-- \u00a6 <!-- \u00a6 Comment \u00a6 Comment \u00a6 not wrapped (yet) not wrapped (yet) --> \u00a6 -> --> \u00a6 \u00a6 \u00a6 new \u00a6 new paragraph \u00a6 paragraph \u00a6 \u00a6",
            "title": "Markdown: Comments"
        },
        {
            "location": "specs/content-types/markdown/comments/#markdown-comments",
            "text": "language: markdown Comments are detected but wrapping their contents is not yet supported. \u00a6 \u00a6 <!-- \u00a6 <!-- \u00a6 Comment \u00a6 Comment \u00a6 not wrapped (yet) not wrapped (yet) --> \u00a6 -> --> \u00a6 \u00a6 \u00a6 new \u00a6 new paragraph \u00a6 paragraph \u00a6 \u00a6",
            "title": "Markdown: Comments"
        },
        {
            "location": "specs/content-types/markdown/fenced-code-blocks/",
            "text": "language: \"markdown\" A fenced code block begins with at least 3 backticks or at least 3 tildes. ``` \u00a6 -> ``` \u00a6 code \u00a6 code \u00a6 block \u00a6 block \u00a6 ~~~ \u00a6 -> ~~~ \u00a6 code \u00a6 code \u00a6 block \u00a6 block \u00a6 Fewer than 3 doesn't start a code block. `` \u00a6 -> `` no code\u00a6 no \u00a6 block \u00a6 code block\u00a6 \u00a6 ~~ \u00a6 -> ~~ no code\u00a6 no \u00a6 block \u00a6 code block\u00a6 \u00a6 As with other markdown they may be indented up to inc 3 spaces. \u00b7\u00b7\u00b7~~~ \u00a6 -> \u00b7\u00b7\u00b7~~~ \u00a6 code code \u00a6 block block \u00a6 4 or more and it doesn't count. \u00b7\u00b7\u00b7\u00b7~~~ \u00a6 -> \u00b7\u00b7\u00b7\u00b7~~~ \u00a6 Not in a code block Not in a \u00a6 code block\u00a6 If the opening code fence is tildes, any characters may follow it. ~~~a bc`~`~ ~~~a bc`~`~ code \u00a6 code \u00a6 block \u00a6 -> block \u00a6 ~~~ \u00a6 ~~~ \u00a6 one \u00a6 one two \u00a6 two \u00a6 \u00a6 If the opening code fence is backticks, any characters except backticks may follow it. ```a bc~~~~ ```a bc~~~~ code \u00a6 code \u00a6 block \u00a6 -> block \u00a6 ``` \u00a6 ``` \u00a6 text \u00a6 text text \u00a6 text \u00a6 \u00a6 If there are backticks following, then the text between is treated as inline code instead. ```a bc``\u00a6 ```a bc`` not in \u00a6 -> not in a \u00a6 a code \u00a6 code \u00a6 block \u00a6 block \u00a6 The closing fence must use the same character as the opening fence. ``` \u00a6 ``` \u00a6 code \u00a6 code \u00a6 block \u00a6 block \u00a6 ~~~ \u00a6 ~~~ \u00a6 still \u00a6 -> still \u00a6 in code block in code block ``` \u00a6 ``` \u00a6 outside code outside \u00a6 block \u00a6 code block\u00a6 ~~~ \u00a6 ~~~ \u00a6 code \u00a6 code \u00a6 block \u00a6 block \u00a6 ``` \u00a6 ``` \u00a6 still \u00a6 -> still \u00a6 in code block in code block ~~~ \u00a6 ~~~ \u00a6 outside code outside \u00a6 block \u00a6 code block\u00a6 If the closing fence is indented more than 3 spaces (relative to the container not the opening fence), it doesn't count. \u00b7\u00b7``` \u00a6 \u00b7\u00b7``` \u00a6 code \u00a6 code \u00a6 block \u00a6 block \u00a6 \u00b7\u00b7\u00b7\u00b7``` \u00a6 \u00b7\u00b7\u00b7\u00b7``` \u00a6 still \u00a6 -> still \u00a6 in code block in code block ``` \u00a6 ``` \u00a6 outside code outside \u00a6 block \u00a6 code block\u00a6 If the opening fence is 4 or more characters, the closing fence must be as least as long. ~~~~ \u00a6 ~~~~ \u00a6 code \u00a6 code \u00a6 block \u00a6 block \u00a6 ~~~ \u00a6 ~~~ \u00a6 still \u00a6 -> still \u00a6 in code block in code block ~~~~~ \u00a6 ~~~~~ \u00a6 outside code outside \u00a6 block \u00a6 code block\u00a6 If there is anything other than whitespace on the line after the closing fence, it doesn't count. ``` \u00a6 ``` \u00a6 code \u00a6 code \u00a6 block \u00a6 block \u00a6 ``` abc \u00a6 ``` abc \u00a6 still \u00a6 -> still \u00a6 in code block in code block ``` \u00a6 ``` \u00a6 outside code outside \u00a6 block \u00a6 code block\u00a6",
            "title": "Fenced code blocks"
        },
        {
            "location": "specs/content-types/markdown/footnotes/",
            "text": "language: \"markdown\" Footnotes are not to be confused with link reference definitions . Footnotes are not in the CommonMark spec, but are supported by a variety of other flavors of markdown, including GFM, (PHP) Markdown Extra, MultiMarkdown and Pandoc. These all have slight differences, so until Rewrap offers support for multiple markdown specs, it tries to cover everything as best it can. A footnote is a section beginning with [^<label>]: , where <label> is any sequence of non-whitespace characters, excluding ] [^fn1]: Footnote Since following paragraphs in the footnote must be indented by at least 4 spaces (see below), a when a single-line footnote is wrapped, created lines are also indented 4 spaces. [^1]: foot note -> [^1]: foot \u00a6 \u00a6 \u00b7\u00b7\u00b7\u00b7note \u00a6 Does a footnote interrupt a paragraph? Pandoc says no but GFM, PHP Markdown, and MultiMarkdown say yes So we allow it. text \u00a6 text [^1] \u00a6 [^1] text \u00a6 -> text \u00a6 [^1]: foot note [^1]: foot \u00a6 \u00a6 note \u00a6 Similarly footnotes can be on consecutive lines text \u00a6 text [^1] \u00a6 [^1] [^2] \u00a6 [^2] \u00a6 [^1]: 1 \u00a6 -> [^1]: 1 \u00a6 [^2]: 2 \u00a6 [^2]: 2 \u00a6 Subsequent paragraphs within the footnote must be indented 4-7 spaces. 8 spaces or more becomes an indented code block [^fn1]: text text [^fn1]: text \u00a6 \u00a6 text \u00a6 \u00b7\u00b7\u00b7\u00b7text \u00a6 -> \u00a6 \u00b7\u00b7\u00b7\u00b7text \u00a6 \u00b7\u00b7\u00b7\u00b7text text\u00a6 \u00a6 \u00a6 \u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7code block \u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7code block Unlike list items , there can be any amount of whitespace between the footnote label and its content; the indent isn't significant. Therefore it's not possible to start an indented code block on the first line of a footnote. [^fn1]: > block quote -> [^fn1]: > block \u00a6 \u00a6 > quote \u00a6",
            "title": "Footnotes"
        },
        {
            "location": "specs/content-types/markdown/front-matter/",
            "text": "Markdown: Front Matter language: \"markdown\" Some markdown implementations support a Yaml header , also known as front matter : an extra section at the top of the file that starts and ends with lines with triple dashes ( --- ). For example DocFX and Assemble . Nothing is wrapped in the yaml header (this could possibly be changed to the yaml parser later). --- \u00a6 -> --- \u00a6 a: \u00a6 a: \u00a6 b: c \u00a6 b: c \u00a6 foo: bar foo: bar --- \u00a6 --- \u00a6 xx \u00a6 xx yy \u00a6 yy zz \u00a6 zz \u00a6 A yaml list should stay intact. --- \u00a6 --- \u00a6 files: \u00a6 files: \u00a6 - 00-zero.md - 00-zero.md - 01-one.md -> - 01-one.md --- \u00a6 --- \u00a6 The yaml header must start on the first line of the document. If it doesn't then it will be interpreted differently. Text \u00a6 Text \u00a6 \u00a6 \u00a6 --- \u00a6 --- \u00a6 Not a yaml header. -> Not a yaml \u00a6 Actually a \u00a6 header. Actually setext heading a setext heading --- \u00a6 --- \u00a6 Markers The start marker must not be indented. \u00b7--- \u00a6 \u00b7--- \u00a6 Not a front matter section -> Not a front matter \u00a6 \u00a6 section \u00a6 It may have whitespace after the --- , but no other characters are allowed ---\u00b7 \u00a6 ---\u00b7 \u00a6 A front matter section A front matter section --- \u00a6 -> --- \u00a6 Normal \u00a6 Normal paragraph \u00a6 paragraph \u00a6 \u00a6 ---- \u00a6 ---- \u00a6 Not a front matter section -> Not a front matter \u00a6 \u00a6 section \u00a6 --- abc \u00a6 -> --- abc Not a front\u00a6 Not a front matter section matter section \u00a6 The end marker must not be indented. --- \u00a6 --- \u00a6 A front matter section A front matter section \u00b7--- \u00a6 -> \u00b7--- \u00a6 Still in the front matter Still in the front matter However unlike the start marker, as long as it starts with --- , any characters may follow on the line. --- \u00a6 --- \u00a6 A front matter section A front matter section ---- \u00a6 -> ---- \u00a6 Normal \u00a6 Normal paragraph \u00a6 paragraph \u00a6 \u00a6 --- \u00a6 --- \u00a6 A front matter section A front matter section ---abc \u00a6 -> ---abc \u00a6 Normal \u00a6 Normal paragraph \u00a6 paragraph \u00a6 \u00a6",
            "title": "Markdown: Front Matter"
        },
        {
            "location": "specs/content-types/markdown/front-matter/#markdown-front-matter",
            "text": "language: \"markdown\" Some markdown implementations support a Yaml header , also known as front matter : an extra section at the top of the file that starts and ends with lines with triple dashes ( --- ). For example DocFX and Assemble . Nothing is wrapped in the yaml header (this could possibly be changed to the yaml parser later). --- \u00a6 -> --- \u00a6 a: \u00a6 a: \u00a6 b: c \u00a6 b: c \u00a6 foo: bar foo: bar --- \u00a6 --- \u00a6 xx \u00a6 xx yy \u00a6 yy zz \u00a6 zz \u00a6 A yaml list should stay intact. --- \u00a6 --- \u00a6 files: \u00a6 files: \u00a6 - 00-zero.md - 00-zero.md - 01-one.md -> - 01-one.md --- \u00a6 --- \u00a6 The yaml header must start on the first line of the document. If it doesn't then it will be interpreted differently. Text \u00a6 Text \u00a6 \u00a6 \u00a6 --- \u00a6 --- \u00a6 Not a yaml header. -> Not a yaml \u00a6 Actually a \u00a6 header. Actually setext heading a setext heading --- \u00a6 --- \u00a6",
            "title": "Markdown: Front Matter"
        },
        {
            "location": "specs/content-types/markdown/front-matter/#markers",
            "text": "The start marker must not be indented. \u00b7--- \u00a6 \u00b7--- \u00a6 Not a front matter section -> Not a front matter \u00a6 \u00a6 section \u00a6 It may have whitespace after the --- , but no other characters are allowed ---\u00b7 \u00a6 ---\u00b7 \u00a6 A front matter section A front matter section --- \u00a6 -> --- \u00a6 Normal \u00a6 Normal paragraph \u00a6 paragraph \u00a6 \u00a6 ---- \u00a6 ---- \u00a6 Not a front matter section -> Not a front matter \u00a6 \u00a6 section \u00a6 --- abc \u00a6 -> --- abc Not a front\u00a6 Not a front matter section matter section \u00a6 The end marker must not be indented. --- \u00a6 --- \u00a6 A front matter section A front matter section \u00b7--- \u00a6 -> \u00b7--- \u00a6 Still in the front matter Still in the front matter However unlike the start marker, as long as it starts with --- , any characters may follow on the line. --- \u00a6 --- \u00a6 A front matter section A front matter section ---- \u00a6 -> ---- \u00a6 Normal \u00a6 Normal paragraph \u00a6 paragraph \u00a6 \u00a6 --- \u00a6 --- \u00a6 A front matter section A front matter section ---abc \u00a6 -> ---abc \u00a6 Normal \u00a6 Normal paragraph \u00a6 paragraph \u00a6 \u00a6",
            "title": "Markers"
        },
        {
            "location": "specs/content-types/markdown/headings/",
            "text": "Markdown: Headings language: markdown Setext headings As little as one = or - is required. A paragraph can come straight after. heading \u00a6 heading text \u00a6 text one \u00a6 one \u00a6 = \u00a6 -> = \u00a6 some \u00a6 some para \u00a6 para text \u00a6 text \u00a6 heading \u00a6 heading text \u00a6 text two \u00a6 two \u00a6 - \u00a6 -> - \u00a6 some \u00a6 some para \u00a6 para text \u00a6 text \u00a6 The underline can be indented up to 3 spaces. heading \u00a6 -> heading \u00a6 \u00b7\u00b7\u00b7= \u00a6 \u00b7\u00b7\u00b7= \u00a6 Whitespace after the underline is allowed. heading \u00a6 -> heading \u00a6 =\u00b7 \u00a6 =\u00b7 \u00a6 Whitespace inbetween underline characters is not allowed. heading \u00a6 -> heading = = \u00a6 = = \u00a6 \u00a6 No other characters are allowed. heading \u00a6 -> heading =-=-=\u00a6 =-=-= \u00a6 \u00a6 heading \u00a6 -> heading --- \u00a6 --- jkl \u00a6 jkl \u00a6 A setext heading underline can't some after a different block, so in this case it must be treated as normal paragraph text. \u00b7\u00b7\u00b7\u00b7indented code block \u00b7\u00b7\u00b7\u00b7indented code block === \u00a6 -> === text \u00a6 text \u00a6 \u00a6",
            "title": "Markdown: Headings"
        },
        {
            "location": "specs/content-types/markdown/headings/#markdown-headings",
            "text": "language: markdown",
            "title": "Markdown: Headings"
        },
        {
            "location": "specs/content-types/markdown/headings/#setext-headings",
            "text": "As little as one = or - is required. A paragraph can come straight after. heading \u00a6 heading text \u00a6 text one \u00a6 one \u00a6 = \u00a6 -> = \u00a6 some \u00a6 some para \u00a6 para text \u00a6 text \u00a6 heading \u00a6 heading text \u00a6 text two \u00a6 two \u00a6 - \u00a6 -> - \u00a6 some \u00a6 some para \u00a6 para text \u00a6 text \u00a6 The underline can be indented up to 3 spaces. heading \u00a6 -> heading \u00a6 \u00b7\u00b7\u00b7= \u00a6 \u00b7\u00b7\u00b7= \u00a6 Whitespace after the underline is allowed. heading \u00a6 -> heading \u00a6 =\u00b7 \u00a6 =\u00b7 \u00a6 Whitespace inbetween underline characters is not allowed. heading \u00a6 -> heading = = \u00a6 = = \u00a6 \u00a6 No other characters are allowed. heading \u00a6 -> heading =-=-=\u00a6 =-=-= \u00a6 \u00a6 heading \u00a6 -> heading --- \u00a6 --- jkl \u00a6 jkl \u00a6 A setext heading underline can't some after a different block, so in this case it must be treated as normal paragraph text. \u00b7\u00b7\u00b7\u00b7indented code block \u00b7\u00b7\u00b7\u00b7indented code block === \u00a6 -> === text \u00a6 text \u00a6 \u00a6",
            "title": "Setext headings"
        },
        {
            "location": "specs/content-types/markdown/html/",
            "text": "HTML in Markdown language: markdown \u00a6 \u00a6 <!-- \u00a6 <!-- \u00a6 Comment \u00a6 Comment \u00a6 not wrapped (yet) not wrapped (yet) --> \u00a6 -> --> \u00a6 \u00a6 \u00a6 new \u00a6 new paragraph \u00a6 paragraph \u00a6 \u00a6",
            "title": "HTML in Markdown"
        },
        {
            "location": "specs/content-types/markdown/html/#html-in-markdown",
            "text": "language: markdown \u00a6 \u00a6 <!-- \u00a6 <!-- \u00a6 Comment \u00a6 Comment \u00a6 not wrapped (yet) not wrapped (yet) --> \u00a6 -> --> \u00a6 \u00a6 \u00a6 new \u00a6 new paragraph \u00a6 paragraph \u00a6 \u00a6",
            "title": "HTML in Markdown"
        },
        {
            "location": "specs/content-types/markdown/indented-code-blocks/",
            "text": "language: \"markdown\" An indented code block can't immediately follow a paragraph. This is because paragraph text after the first line can be indented to any level and it's still considered part of the paragraph. (After wrapping the 2nd & 3rd lines remain indented because Rewrap preserves all paragraph line indentation.) paragraph \u00a6 paragraph not\u00a6 \u00b7\u00b7\u00b7\u00b7not a \u00a6 -> \u00b7\u00b7\u00b7\u00b7a code \u00a6 \u00b7\u00b7\u00b7\u00b7code block \u00b7\u00b7\u00b7\u00b7block \u00a6 Since an ATX heading must be on a single line, an indented code block can immediately follow it (unlike with a normal paragraph). # Heading \u00a6 # Heading \u00a6 \u00b7\u00b7\u00b7\u00b7code \u00a6 -> \u00b7\u00b7\u00b7\u00b7code \u00a6 \u00b7\u00b7\u00b7\u00b7block \u00a6 \u00b7\u00b7\u00b7\u00b7block \u00a6",
            "title": "Indented code blocks"
        },
        {
            "location": "specs/content-types/markdown/linkrefdefs/",
            "text": "Markdown: Link reference definitions language: \"markdown\" This doesn't precisely follow the link reference definition specification , but should be a \"good enough\" implementation A link reference definition, like all markdown paragraphs, can be indented up to 3 spaces. It has the pattern [<label>]: where <label> is characters containing at least 1 non-whitespace character. If a single long line is wrapped, created lines are indented 4 spaces, to match footnotes . [link]: /url \"link title\" -> [link]: /url \u00a6 \u00a6 \"link title\"\u00a6 Link reference definitions do not interrupt a paragraph; ie. there must be a blank line between one and a normal paragraph. If there's no blank line it'll be treated as part of the paragraph. paragraph \u00a6 paragraph text \u00a6 text [link] \u00a6 -> [link] [link]: \u00a6 [link]: some_url \u00a6 some_url \u00a6 LDRs consist of just a single paragraph, and no blank line is required between multiple LRDs. text [one] \u00a6 text [one] text \u00a6 text [two] \u00a6 [two] \u00a6 \u00a6 -> \u00a6 [one]: url1 description [one]: url1 \u00a6 [two]: url2 \u00a6 description \u00a6 [two]: url2 \u00a6 LRDs are terminated by any of the normal paragraph-interrupting blocks, like fenced code block or list item. [one]: \u00a6 [one]: url\u00a6 url \u00a6 - list \u00a6 - list item item \u00a6 \u00a6 \u00a6 [two]: \u00a6 -> [two]: url\u00a6 url \u00a6 ``` js \u00a6 ``` js \u00a6 let i; \u00a6 let i; \u00a6 ``` \u00a6 ``` \u00a6 \u00a6",
            "title": "Markdown: Link reference definitions"
        },
        {
            "location": "specs/content-types/markdown/linkrefdefs/#markdown-link-reference-definitions",
            "text": "language: \"markdown\" This doesn't precisely follow the link reference definition specification , but should be a \"good enough\" implementation A link reference definition, like all markdown paragraphs, can be indented up to 3 spaces. It has the pattern [<label>]: where <label> is characters containing at least 1 non-whitespace character. If a single long line is wrapped, created lines are indented 4 spaces, to match footnotes . [link]: /url \"link title\" -> [link]: /url \u00a6 \u00a6 \"link title\"\u00a6 Link reference definitions do not interrupt a paragraph; ie. there must be a blank line between one and a normal paragraph. If there's no blank line it'll be treated as part of the paragraph. paragraph \u00a6 paragraph text \u00a6 text [link] \u00a6 -> [link] [link]: \u00a6 [link]: some_url \u00a6 some_url \u00a6 LDRs consist of just a single paragraph, and no blank line is required between multiple LRDs. text [one] \u00a6 text [one] text \u00a6 text [two] \u00a6 [two] \u00a6 \u00a6 -> \u00a6 [one]: url1 description [one]: url1 \u00a6 [two]: url2 \u00a6 description \u00a6 [two]: url2 \u00a6 LRDs are terminated by any of the normal paragraph-interrupting blocks, like fenced code block or list item. [one]: \u00a6 [one]: url\u00a6 url \u00a6 - list \u00a6 - list item item \u00a6 \u00a6 \u00a6 [two]: \u00a6 -> [two]: url\u00a6 url \u00a6 ``` js \u00a6 ``` js \u00a6 let i; \u00a6 let i; \u00a6 ``` \u00a6 ``` \u00a6 \u00a6",
            "title": "Markdown: Link reference definitions"
        },
        {
            "location": "specs/content-types/markdown/lists/",
            "text": "Markdown: Lists language: \"markdown\" - a \u00a6 -> - a b \u00a6 b c \u00a6 c \u00a6 Any paragraph under a list item can have the second line indented less than the list item content indent. If this is so it will be preserved. \u00b7*\u00b7\u00b7a b \u00a6 \u00b7*\u00b7\u00b7a b c \u00a6 c d e \u00a6 d e \u00a6 \u00a6 -> \u00a6 \u00b7\u00b7\u00b7\u00b7a b \u00a6 \u00b7\u00b7\u00b7\u00b7a b c \u00a6 c d e \u00a6 d e \u00a6 However, when creating a new second line, its indent is set to match that of the first, since that is most desirable. \u00b7+\u00b7\u00b7a b c d e -> \u00b7+\u00b7\u00b7a b c \u00a6 \u00a6 d e \u00a6 Similarly any newly-created line in a paragraph is given the same indent as the line above it. \u00b7*\u00b7\u00b7text \u00a6 \u00b7*\u00b7\u00b7text \u00a6 text text text \u00a6 \u00a6 text \u00a6 \u00b7\u00b7\u00b7\u00b7text text -> \u00a6 text \u00a6 \u00b7\u00b7\u00b7\u00b7text \u00a6 \u00a6 text \u00a6 \u00a6 text \u00a6 List items may be separated by blank lines * a b c d e -> * a b c d \u00a6 f \u00a6 e f \u00a6 \u00a6 \u00a6 * a b c * a b \u00a6 d \u00a6 c d \u00a6 \u00a6 \u00a6 * a b c * a b \u00a6 d \u00a6 c d \u00a6 There may be 1-4 spaces between the list item marker and following text, and this determines the indent for the rest of the list item. If there are more spaces, the indent is reset to 1 space, and the text is considered an inline code block. \u00b7\u00b7+ code block \u00b7\u00b7+ code block \u00b7\u00b7\u00b7\u00b7text in list item -> \u00b7\u00b7\u00b7\u00b7text in \u00a6 \u00a6 list item \u00a6 Other List items: \u00a6 -> List items: \u00a6 * > Block quote text wrapped * > Block quote \u00a6 \u00a6 > text wrapped\u00a6 > * > bq li\u00a6bq -> > * > bq li\u00a6 \u00a6 > > bq \u00a6 language: \"markdown\", reformat: true * a b \u00a6 -> * a b c \u00a6 c d \u00a6 d \u00a6 * a b \u00a6 * a b c \u00a6 c d \u00a6 d * a b \u00a6 -> * a b c \u00a6 c d \u00a6 d \u00a6 * a \u00a6 * a b \u00a6 b c \u00a6 c * a b \u00a6 -> * a b c \u00a6 c d \u00a6 d \u00a6 \u00a6 a a * a \u00a6 -> * a \u00a6 >b \u00a6 > b \u00a6 >c \u00a6 > c \u00a6 language: \"markdown\" Terminating paragraphs An unordered list item terminates a paragraph. text \u00a6 text \u00a6 \u00b7\u00b7\u00b7- list item -> \u00b7\u00b7\u00b7- list \u00a6 \u00a6 item \u00a6 As long as the marker is indented 3 spaces or less. text \u00a6 text - list\u00a6 \u00b7\u00b7\u00b7\u00b7- list item -> \u00b7\u00b7\u00b7\u00b7item \u00a6 Terminating the list item Any line that is not a paragraph continuation line, where the text indent is less than that of the first line of the list item, terminates the list item and that line is not part of it. Here the ATX heading is not in the list item because the indent is too small: \u00b7-\u00b7\u00b7text \u00a6 -> \u00b7-\u00b7\u00b7text \u00a6 \u00b7\u00b7\u00b7# heading \u00a6 \u00b7\u00b7\u00b7# heading \u00a6 Here however, even though the heading is indented less than the text, since it is indented 4 spaces, it's counted as a paragraph continuation line instead: \u00b7\u00b7-\u00b7\u00b7text \u00a6 -> \u00b7\u00b7-\u00b7\u00b7text # \u00a6 \u00b7\u00b7\u00b7\u00b7# heading \u00a6 \u00b7\u00b7\u00b7\u00b7heading \u00a6 If a fenced code block inside a list item has a line with less than the required indent, it and the list item are terminated. *\u00b7\u00b7``` \u00a6 *\u00b7\u00b7``` \u00a6 \u00b7\u00b7\u00b7foo \u00a6 -> \u00b7\u00b7\u00b7foo \u00a6 \u00b7\u00b7bar \u00a6 \u00b7\u00b7bar baz\u00a6 \u00b7\u00b7baz \u00a6 \u00a6 Other tests Double list-item: - - a \u00a6 -> - - a b\u00a6 b \u00a6 \u00a6 - - - is a thematic break rather than a triple list item. - - - \u00a6 - - - \u00a6 indented \u00a6 -> indented \u00a6 code block \u00a6 code block \u00a6",
            "title": "Markdown: Lists"
        },
        {
            "location": "specs/content-types/markdown/lists/#markdown-lists",
            "text": "language: \"markdown\" - a \u00a6 -> - a b \u00a6 b c \u00a6 c \u00a6 Any paragraph under a list item can have the second line indented less than the list item content indent. If this is so it will be preserved. \u00b7*\u00b7\u00b7a b \u00a6 \u00b7*\u00b7\u00b7a b c \u00a6 c d e \u00a6 d e \u00a6 \u00a6 -> \u00a6 \u00b7\u00b7\u00b7\u00b7a b \u00a6 \u00b7\u00b7\u00b7\u00b7a b c \u00a6 c d e \u00a6 d e \u00a6 However, when creating a new second line, its indent is set to match that of the first, since that is most desirable. \u00b7+\u00b7\u00b7a b c d e -> \u00b7+\u00b7\u00b7a b c \u00a6 \u00a6 d e \u00a6 Similarly any newly-created line in a paragraph is given the same indent as the line above it. \u00b7*\u00b7\u00b7text \u00a6 \u00b7*\u00b7\u00b7text \u00a6 text text text \u00a6 \u00a6 text \u00a6 \u00b7\u00b7\u00b7\u00b7text text -> \u00a6 text \u00a6 \u00b7\u00b7\u00b7\u00b7text \u00a6 \u00a6 text \u00a6 \u00a6 text \u00a6 List items may be separated by blank lines * a b c d e -> * a b c d \u00a6 f \u00a6 e f \u00a6 \u00a6 \u00a6 * a b c * a b \u00a6 d \u00a6 c d \u00a6 \u00a6 \u00a6 * a b c * a b \u00a6 d \u00a6 c d \u00a6 There may be 1-4 spaces between the list item marker and following text, and this determines the indent for the rest of the list item. If there are more spaces, the indent is reset to 1 space, and the text is considered an inline code block. \u00b7\u00b7+ code block \u00b7\u00b7+ code block \u00b7\u00b7\u00b7\u00b7text in list item -> \u00b7\u00b7\u00b7\u00b7text in \u00a6 \u00a6 list item \u00a6 Other List items: \u00a6 -> List items: \u00a6 * > Block quote text wrapped * > Block quote \u00a6 \u00a6 > text wrapped\u00a6 > * > bq li\u00a6bq -> > * > bq li\u00a6 \u00a6 > > bq \u00a6 language: \"markdown\", reformat: true * a b \u00a6 -> * a b c \u00a6 c d \u00a6 d \u00a6 * a b \u00a6 * a b c \u00a6 c d \u00a6 d * a b \u00a6 -> * a b c \u00a6 c d \u00a6 d \u00a6 * a \u00a6 * a b \u00a6 b c \u00a6 c * a b \u00a6 -> * a b c \u00a6 c d \u00a6 d \u00a6 \u00a6 a a * a \u00a6 -> * a \u00a6 >b \u00a6 > b \u00a6 >c \u00a6 > c \u00a6 language: \"markdown\"",
            "title": "Markdown: Lists"
        },
        {
            "location": "specs/content-types/markdown/lists/#terminating-paragraphs",
            "text": "An unordered list item terminates a paragraph. text \u00a6 text \u00a6 \u00b7\u00b7\u00b7- list item -> \u00b7\u00b7\u00b7- list \u00a6 \u00a6 item \u00a6 As long as the marker is indented 3 spaces or less. text \u00a6 text - list\u00a6 \u00b7\u00b7\u00b7\u00b7- list item -> \u00b7\u00b7\u00b7\u00b7item \u00a6",
            "title": "Terminating paragraphs"
        },
        {
            "location": "specs/content-types/markdown/lists/#terminating-the-list-item",
            "text": "Any line that is not a paragraph continuation line, where the text indent is less than that of the first line of the list item, terminates the list item and that line is not part of it. Here the ATX heading is not in the list item because the indent is too small: \u00b7-\u00b7\u00b7text \u00a6 -> \u00b7-\u00b7\u00b7text \u00a6 \u00b7\u00b7\u00b7# heading \u00a6 \u00b7\u00b7\u00b7# heading \u00a6 Here however, even though the heading is indented less than the text, since it is indented 4 spaces, it's counted as a paragraph continuation line instead: \u00b7\u00b7-\u00b7\u00b7text \u00a6 -> \u00b7\u00b7-\u00b7\u00b7text # \u00a6 \u00b7\u00b7\u00b7\u00b7# heading \u00a6 \u00b7\u00b7\u00b7\u00b7heading \u00a6 If a fenced code block inside a list item has a line with less than the required indent, it and the list item are terminated. *\u00b7\u00b7``` \u00a6 *\u00b7\u00b7``` \u00a6 \u00b7\u00b7\u00b7foo \u00a6 -> \u00b7\u00b7\u00b7foo \u00a6 \u00b7\u00b7bar \u00a6 \u00b7\u00b7bar baz\u00a6 \u00b7\u00b7baz \u00a6 \u00a6",
            "title": "Terminating the list item"
        },
        {
            "location": "specs/content-types/markdown/lists/#other-tests",
            "text": "Double list-item: - - a \u00a6 -> - - a b\u00a6 b \u00a6 \u00a6 - - - is a thematic break rather than a triple list item. - - - \u00a6 - - - \u00a6 indented \u00a6 -> indented \u00a6 code block \u00a6 code block \u00a6",
            "title": "Other tests"
        },
        {
            "location": "specs/content-types/markdown/paragraphs/",
            "text": "Markdown: Paragraphs language: \"markdown\" The first line might be shorter than the indent of the others. a \u00a6 -> a b c \u00a6 b \u00a6 \u00a6 c \u00a6 \u00a6 The \"shape\" of any paragraph is kept; meaning the indent for each line. Any lines added at the end have the indent of the line before it. one two -> one \u00a6 three two \u00a6 four \u00a6 three\u00a6 four \u00a6 Paragraph terminators Blank line: a \u00a6 -> a b \u00a6 b c \u00a6 c \u00a6 \u00a6 \u00a6 a \u00a6 a \u00a6 The following blocks can interrupt a paragraph. However they are only treated as such a block if they have an indent less than 4 spaces. Fenced code block: a b c \u00a6 -> a b c d \u00a6 d e \u00a6 e \u00a6 ~~~ a \u00a6 ~~~ a \u00a6 a b c \u00a6 -> a b c d \u00a6 d e \u00a6 e \u00a6 ``` a \u00a6 ``` a \u00a6 ATX heading: a b \u00a6 -> a b c \u00a6 c d \u00a6 d \u00a6 ## a \u00a6 ## a \u00a6 But not: a b \u00a6 -> a b c \u00a6 c d \u00a6 d ## a\u00a6 ## a \u00a6 Non-text line: a b c \u00a6 -> a b c d \u00a6 d e \u00a6 e \u00a6 *** \u00a6 *** \u00a6 List item: a b \u00a6 -> a b c \u00a6 c d \u00a6 d \u00a6 - a \u00a6 - a \u00a6 a b \u00a6 -> a b c \u00a6 c d \u00a6 d \u00a6 * a \u00a6 * a \u00a6 a b \u00a6 -> a b c \u00a6 c d \u00a6 d \u00a6 + a \u00a6 + a \u00a6 Block quote: a b \u00a6 -> a b c \u00a6 c d \u00a6 d \u00a6 > a \u00a6 > a \u00a6 Html block types 1 to 6 : a b c d \u00a6 -> a b c d e \u00a6 e f \u00a6 f \u00a6 <script \u00a6 <script \u00a6 a b c d \u00a6 -> a b c d e \u00a6 e f \u00a6 f \u00a6 <!-- a \u00a6 <!-- a \u00a6 a b c d \u00a6 -> a b c d e \u00a6 e f \u00a6 f \u00a6 <?a \u00a6 <?a \u00a6 a b c d \u00a6 -> a b c d e \u00a6 e f \u00a6 f \u00a6 <!A \u00a6 <!A \u00a6 a b c d \u00a6 -> a b c d e f\u00a6 e f g \u00a6 g \u00a6 <![CDATA[ \u00a6 <![CDATA[ \u00a6 a b c d \u00a6 -> a b c d e \u00a6 e f \u00a6 f \u00a6 <DD \u00a6 <DD \u00a6 a b c d \u00a6 -> a b c d e \u00a6 e f \u00a6 f \u00a6 </dd> \u00a6 </dd> \u00a6",
            "title": "Markdown: Paragraphs"
        },
        {
            "location": "specs/content-types/markdown/paragraphs/#markdown-paragraphs",
            "text": "language: \"markdown\" The first line might be shorter than the indent of the others. a \u00a6 -> a b c \u00a6 b \u00a6 \u00a6 c \u00a6 \u00a6 The \"shape\" of any paragraph is kept; meaning the indent for each line. Any lines added at the end have the indent of the line before it. one two -> one \u00a6 three two \u00a6 four \u00a6 three\u00a6 four \u00a6",
            "title": "Markdown: Paragraphs"
        },
        {
            "location": "specs/content-types/markdown/paragraphs/#paragraph-terminators",
            "text": "Blank line: a \u00a6 -> a b \u00a6 b c \u00a6 c \u00a6 \u00a6 \u00a6 a \u00a6 a \u00a6 The following blocks can interrupt a paragraph. However they are only treated as such a block if they have an indent less than 4 spaces. Fenced code block: a b c \u00a6 -> a b c d \u00a6 d e \u00a6 e \u00a6 ~~~ a \u00a6 ~~~ a \u00a6 a b c \u00a6 -> a b c d \u00a6 d e \u00a6 e \u00a6 ``` a \u00a6 ``` a \u00a6 ATX heading: a b \u00a6 -> a b c \u00a6 c d \u00a6 d \u00a6 ## a \u00a6 ## a \u00a6 But not: a b \u00a6 -> a b c \u00a6 c d \u00a6 d ## a\u00a6 ## a \u00a6 Non-text line: a b c \u00a6 -> a b c d \u00a6 d e \u00a6 e \u00a6 *** \u00a6 *** \u00a6 List item: a b \u00a6 -> a b c \u00a6 c d \u00a6 d \u00a6 - a \u00a6 - a \u00a6 a b \u00a6 -> a b c \u00a6 c d \u00a6 d \u00a6 * a \u00a6 * a \u00a6 a b \u00a6 -> a b c \u00a6 c d \u00a6 d \u00a6 + a \u00a6 + a \u00a6 Block quote: a b \u00a6 -> a b c \u00a6 c d \u00a6 d \u00a6 > a \u00a6 > a \u00a6 Html block types 1 to 6 : a b c d \u00a6 -> a b c d e \u00a6 e f \u00a6 f \u00a6 <script \u00a6 <script \u00a6 a b c d \u00a6 -> a b c d e \u00a6 e f \u00a6 f \u00a6 <!-- a \u00a6 <!-- a \u00a6 a b c d \u00a6 -> a b c d e \u00a6 e f \u00a6 f \u00a6 <?a \u00a6 <?a \u00a6 a b c d \u00a6 -> a b c d e \u00a6 e f \u00a6 f \u00a6 <!A \u00a6 <!A \u00a6 a b c d \u00a6 -> a b c d e f\u00a6 e f g \u00a6 g \u00a6 <![CDATA[ \u00a6 <![CDATA[ \u00a6 a b c d \u00a6 -> a b c d e \u00a6 e f \u00a6 f \u00a6 <DD \u00a6 <DD \u00a6 a b c d \u00a6 -> a b c d e \u00a6 e f \u00a6 f \u00a6 </dd> \u00a6 </dd> \u00a6",
            "title": "Paragraph terminators"
        },
        {
            "location": "specs/content-types/markdown/tables/",
            "text": "Markdown: tables language: markdown Tables are not in commonmark, and the minimum that represents a table varies greatly between markdown flavors. Some require separator rows ( | --- | --- | ), some don't, and some specify where they can occur Github Flavored Markdown spec Rewrap has quite a permissive specification to try to accommodate all of thee. To differentiate from normal paragraph text, the following is considered a table: - Two or more consecutive lines that: - are indented no more than 3 spaces relative to the parent block, and - contain at least one pipe ( | ) character not preceded by a backslash ( \\ ) - And, at least one of the lines contains only the characters | : - and space, with at least 1 | and one - . a | table \u00a6 -> a | table \u00a6 - | - \u00a6 - | - \u00a6 not | a \u00a6 -> not | a table | no \u00a6 table | no \u00a6 \u00a6 A table can interrupt a paragraph.",
            "title": "Markdown: tables"
        },
        {
            "location": "specs/content-types/markdown/tables/#markdown-tables",
            "text": "language: markdown Tables are not in commonmark, and the minimum that represents a table varies greatly between markdown flavors. Some require separator rows ( | --- | --- | ), some don't, and some specify where they can occur Github Flavored Markdown spec Rewrap has quite a permissive specification to try to accommodate all of thee. To differentiate from normal paragraph text, the following is considered a table: - Two or more consecutive lines that: - are indented no more than 3 spaces relative to the parent block, and - contain at least one pipe ( | ) character not preceded by a backslash ( \\ ) - And, at least one of the lines contains only the characters | : - and space, with at least 1 | and one - . a | table \u00a6 -> a | table \u00a6 - | - \u00a6 - | - \u00a6 not | a \u00a6 -> not | a table | no \u00a6 table | no \u00a6 \u00a6 A table can interrupt a paragraph.",
            "title": "Markdown: tables"
        },
        {
            "location": "specs/content-types/markdown/thematic-breaks/",
            "text": "Markdown: Thematic Breaks language: markdown Thematic break lines are not be wrapped. They require at least 3 characters of * - or _ . *** \u00a6 *** \u00a6 --- \u00a6 -> --- \u00a6 ___ \u00a6 ___ \u00a6 A paragraph can come immediately after. *** \u00a6 *** \u00a6 paragraph \u00a6 -> paragraph text \u00a6 text \u00a6 \u00a6 Can be any length >= 3 and can contain spaces inbetween. *** *** *** *** *** *** *** *** *** *** paragraph \u00a6 -> paragraph text \u00a6 text \u00a6 \u00a6 The marker 3 characters don't have to be consecutive. As long as there are at least 3. - - - \u00a6 - - - \u00a6 paragraph \u00a6 -> paragraph text \u00a6 text \u00a6 \u00a6 Trailing spaces are allowed. ____\u00b7 \u00a6 ____\u00b7 \u00a6 paragraph \u00a6 -> paragraph text \u00a6 text \u00a6 \u00a6 Up to 3 leading spaces are allowed (more and it's an indented code block instead, though that makes no difference to wrapping). \u00b7\u00b7\u00b7---- \u00a6 \u00b7\u00b7\u00b7---- \u00a6 paragraph \u00a6 -> paragraph text \u00a6 text \u00a6 \u00a6 Can interrupt a paragraph. If --- is used, it would be a setext heading instead, though that makes no difference to wrapping. some \u00a6 -> some paragraph \u00a6 paragraph text \u00a6 text \u00a6 *** \u00a6 *** \u00a6 and some \u00a6 and some more \u00a6 more \u00a6 \u00a6 Invalid cases In these cases the break is invalid so will be wrapped into the paragraph instead: -- \u00a6 -- too few \u00a6 too few \u00a6 -> characters \u00a6 characters \u00a6 \u00a6 *-* \u00a6 *-* characters not\u00a6 characters not \u00a6 -> the same \u00a6 the same \u00a6 \u00a6 ___ foo \u00a6 ___ foo extra \u00a6 extra characters \u00a6 -> characters after \u00a6 after \u00a6 \u00a6 === \u00a6 === wrong \u00a6 wrong \u00a6 -> characters \u00a6 characters \u00a6 \u00a6",
            "title": "Markdown: Thematic Breaks"
        },
        {
            "location": "specs/content-types/markdown/thematic-breaks/#markdown-thematic-breaks",
            "text": "language: markdown Thematic break lines are not be wrapped. They require at least 3 characters of * - or _ . *** \u00a6 *** \u00a6 --- \u00a6 -> --- \u00a6 ___ \u00a6 ___ \u00a6 A paragraph can come immediately after. *** \u00a6 *** \u00a6 paragraph \u00a6 -> paragraph text \u00a6 text \u00a6 \u00a6 Can be any length >= 3 and can contain spaces inbetween. *** *** *** *** *** *** *** *** *** *** paragraph \u00a6 -> paragraph text \u00a6 text \u00a6 \u00a6 The marker 3 characters don't have to be consecutive. As long as there are at least 3. - - - \u00a6 - - - \u00a6 paragraph \u00a6 -> paragraph text \u00a6 text \u00a6 \u00a6 Trailing spaces are allowed. ____\u00b7 \u00a6 ____\u00b7 \u00a6 paragraph \u00a6 -> paragraph text \u00a6 text \u00a6 \u00a6 Up to 3 leading spaces are allowed (more and it's an indented code block instead, though that makes no difference to wrapping). \u00b7\u00b7\u00b7---- \u00a6 \u00b7\u00b7\u00b7---- \u00a6 paragraph \u00a6 -> paragraph text \u00a6 text \u00a6 \u00a6 Can interrupt a paragraph. If --- is used, it would be a setext heading instead, though that makes no difference to wrapping. some \u00a6 -> some paragraph \u00a6 paragraph text \u00a6 text \u00a6 *** \u00a6 *** \u00a6 and some \u00a6 and some more \u00a6 more \u00a6 \u00a6",
            "title": "Markdown: Thematic Breaks"
        },
        {
            "location": "specs/content-types/markdown/thematic-breaks/#invalid-cases",
            "text": "In these cases the break is invalid so will be wrapped into the paragraph instead: -- \u00a6 -- too few \u00a6 too few \u00a6 -> characters \u00a6 characters \u00a6 \u00a6 *-* \u00a6 *-* characters not\u00a6 characters not \u00a6 -> the same \u00a6 the same \u00a6 \u00a6 ___ foo \u00a6 ___ foo extra \u00a6 extra characters \u00a6 -> characters after \u00a6 after \u00a6 \u00a6 === \u00a6 === wrong \u00a6 wrong \u00a6 -> characters \u00a6 characters \u00a6 \u00a6",
            "title": "Invalid cases"
        },
        {
            "location": "specs/content-types/restructuredtext/_restructuredtext/",
            "text": "reStructuredText reStructuredText (RST or reST) is used for .rst files and docstrings in Python. language: reStructuredText These wrapping behaviors were created from the official RST spec and the Online RST Editor at http://rst.ninjs.org When source text doesn't follow the spec correctly, RST processors can sometimes emit warnings (where output is produced anyway) and errors (where the text is malformed and no output is produced). For the purposes of wrapping, warnings are simply ignored and where there would be an error, the source text is left as-is and not wrapped. Paragraphs Paragraphs are separated by blank lines. paragraph one paragraph \u00a6 \u00a6 -> one \u00a6 para \u00a6 \u00a6 two \u00a6 para two \u00a6 In almost all cases lines in a paragraph must all have the same indent. A difference in indent denotes a new block in some way. reStructuredText has no indented code block. Any indent denotes a block quote, and further indent a new block quote, although there must be a blank line before. \u00b7\u00b7\u00b7\u00b7block \u00a6 \u00b7\u00b7\u00b7\u00b7block quote \u00a6 \u00b7\u00b7\u00b7\u00b7quote text \u00a6 \u00b7\u00b7\u00b7\u00b7text \u00a6 \u00a6 -> \u00a6 \u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7further indented \u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7further \u00a6 \u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7block \u00a6 \u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7indented \u00a6 \u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7quote \u00a6 \u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7block quote\u00a6 If a line in a paragraph is indented less than previous ones, RST considers it a new paragraph (though would give a warning). \u00b7\u00b7\u00b7\u00b7Para text \u00a6 \u00b7\u00b7\u00b7\u00b7Para text \u00a6 \u00b7\u00b7Less indented \u00a6 -> \u00b7\u00b7Less indented text\u00a6 \u00b7\u00b7text \u00a6 \u00a6 Section titles ( details ) Section titles are made up of one line of text with an underline and possible overline of punctuation characters. All text in the title must be on the same line. Because of this, section titles are never wrapped. Where there are more than two lines, it will be treated as a normal paragraph, with the underline characters as part of the text. a long section title -> a long section title ==================== ==================== \u00a6 \u00a6 not a \u00a6 not a section \u00a6 section \u00a6 -> title ======= \u00a6 title \u00a6 \u00a6 ======= \u00a6 \u00a6 Transitions ( details ) Transitions are horizontal separators created by 4 or more punctuation characters. There must be no indent and there must be a blank line before and after do avoid confusion with section titles. Transition markers are Transition markers \u00a6 left untouched \u00a6 are left untouched \u00a6 \u00a6 \u00a6 -------------------------- -> -------------------------- \u00a6 \u00a6 \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\" \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\" \u00a6 \u00a6 ************************** ************************** Bullet lists ( details ) Bullet lists are created with one of the markers * + - \u2022 \u2023 \u2043 . A single line will wrap so text is at the same indent \u2022 bullet item text -> \u2022 bullet item \u00a6 \u00a6 text \u00a6 Enumerated lists ( details ) Enumerated lists have either numerals, letters, or roman numerals with the form X. , X) or (X) 1. item one text 1. item one \u00a6 2. item \u00a6 -> text \u00a6 two \u00a6 2. item two \u00a6 (a) item one text (a) item one \u00a6 (b) item \u00a6 -> text \u00a6 two \u00a6 (b) item two \u00a6 Field lists ( details ) Field list items have the form :<field name>: <field body> . The line break after each item is preserved and the body content is wrapped. Extra lines of the body content must all be indented by the same amount, though the indent can be as little as 1 space. :Date: 2001-08-16 \u00a6 :Date: 2001-08-16 \u00a6 :Version: 1 \u00a6 :Version: 1 \u00a6 :Authors: - Me \u00a6 :Authors: - Me \u00a6 - Myself \u00a6 -> - Myself \u00a6 - I \u00a6 - I \u00a6 :Abstract: Lorem ipsum lorem :Abstract: Lorem ipsum \u00a6 ipsum lorem ipsum. \u00a6 lorem ipsum lorem ipsum. \u00a6 Option lists Not supported yet Literal blocks ( details ) Literal blocks are used for code samples or anything that mustn't be wrapped. A literal block follows any line that ends with :: . :: \u00a6 :: \u00a6 \u00a6 \u00a6 code \u00a6 code \u00a6 block \u00a6 block \u00a6 \u00a6 \u00a6 not wrapped -> not wrapped \u00a6 \u00a6 normal paragraph normal \u00a6 \u00a6 paragraph \u00a6 Example:: \u00a6 Example:: \u00a6 \u00a6 \u00a6 code block -> code block \u00a6 \u00a6 normal paragraph normal \u00a6 \u00a6 paragraph \u00a6 Line blocks Line blocks are a way of preserving line breaks. When a line begins with \"|\" + whitespace, the line-break before it will be preserved, though the rest of the line can be wrapped. | Line one \u00a6 -> | Line one \u00a6 | Line two \u00a6 | Line two \u00a6 A long line is wrapped with the text indent of created lines matching that of the first. | A too-long line | A too-long \u00a6 | Another long line -> line \u00a6 \u00a6 | Another long\u00a6 \u00a6 line \u00a6 Line blocks cannot contain other elements such as bullet lists or literal blocks. Doctest blocks ( details ) Doctest blocks are intended for interactive Python sessions cut-and-pasted into documentation. They start with >>> and all following lines in the block are not wrapped. This is an \u00a6 This is an ordinary \u00a6 ordinary paragraph. \u00a6 paragraph. \u00a6 \u00a6 -> \u00a6 >>> print 'this is a Doctest block' >>> print 'this is a Doctest block' this is a Doctest block this is a Doctest block Tables ( details ) No wrapping is attemped on tables. Tables can take two forms: \"grid tables\" +---+---+---+ \u00a6 +---+---+---+ \u00a6 | | T | F | \u00a6 | | T | F | \u00a6 +===+===+===+ \u00a6 +===+===+===+ \u00a6 | T | F | T | \u00a6 -> | T | F | T | \u00a6 +---+---+---+ \u00a6 +---+---+---+ \u00a6 | F | T | F | \u00a6 | F | T | F | \u00a6 +---+---+---+ \u00a6 +---+---+---+ \u00a6 And \"simple tables\". === === === \u00a6 === === === \u00a6 T F \u00a6 T F \u00a6 === === === \u00a6 === === === \u00a6 T F T \u00a6 -> T F T \u00a6 F T F \u00a6 F T F \u00a6 === === === \u00a6 === === === \u00a6 Explicit markup blocks Explicit markup blocks cover footnotes, citations, hyperlink targets, directives, substitution definitions, and comments. They are denoted by a block that starts with .. followed by whitespace. Footnotes and citations These can contain body content The footnote content (body elements) must be consistently indented and left-aligned. The first body element within a footnote may often begin on the same line as the footnote label. However, if the first element fits on one line and the indentation of the remaining elements differ, the first element must begin on the line after the footnote label. Otherwise, the difference in indentation will not be detected. .. [*] This is a footnote -> .. [*] This is a \u00a6 \u00a6 footnote \u00a6 .. [#] - A footnote \u00a6 .. [#] - A footnote \u00a6 - With bullets \u00a6 - With bullets \u00a6 .. [#note.1] A \u00a6 -> .. [#note.1] A named \u00a6 named footnote \u00a6 footnote \u00a6 .. [GVR-2001] This is \u00a6 .. [GVR-2001] This is a \u00a6 a citation \u00a6 citation \u00a6 Hyperlink targets These aren't wrapped for now. Explicit and implicit .. link_1: https://longer.url .. link_1: https://longer.url .. __: a.com \u00a6 -> .. __: a.com \u00a6 __ https://c.d \u00a6 __ https://c.d \u00a6 Directives These aren't wrapped for now. .. meta:: \u00a6 .. meta:: \u00a6 :keywords: key words -> :keywords: key words :description: description :description: description text \u00a6 text \u00a6 Substitution definitions These aren't wrapped for now .. |pic| image:: pic.png -> .. |pic| image:: pic.png \u00a6 \u00a6 Comments These aren't wrapped for now .. Anything else that's written .. Anything else that's written in a block \u00a6 -> in a block \u00a6 after a \"..\" \u00a6 after a \"..\" \u00a6",
            "title": "reStructuredText"
        },
        {
            "location": "specs/content-types/restructuredtext/_restructuredtext/#restructuredtext",
            "text": "reStructuredText (RST or reST) is used for .rst files and docstrings in Python. language: reStructuredText These wrapping behaviors were created from the official RST spec and the Online RST Editor at http://rst.ninjs.org When source text doesn't follow the spec correctly, RST processors can sometimes emit warnings (where output is produced anyway) and errors (where the text is malformed and no output is produced). For the purposes of wrapping, warnings are simply ignored and where there would be an error, the source text is left as-is and not wrapped.",
            "title": "reStructuredText"
        },
        {
            "location": "specs/content-types/restructuredtext/_restructuredtext/#paragraphs",
            "text": "Paragraphs are separated by blank lines. paragraph one paragraph \u00a6 \u00a6 -> one \u00a6 para \u00a6 \u00a6 two \u00a6 para two \u00a6 In almost all cases lines in a paragraph must all have the same indent. A difference in indent denotes a new block in some way. reStructuredText has no indented code block. Any indent denotes a block quote, and further indent a new block quote, although there must be a blank line before. \u00b7\u00b7\u00b7\u00b7block \u00a6 \u00b7\u00b7\u00b7\u00b7block quote \u00a6 \u00b7\u00b7\u00b7\u00b7quote text \u00a6 \u00b7\u00b7\u00b7\u00b7text \u00a6 \u00a6 -> \u00a6 \u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7further indented \u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7further \u00a6 \u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7block \u00a6 \u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7indented \u00a6 \u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7quote \u00a6 \u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7block quote\u00a6 If a line in a paragraph is indented less than previous ones, RST considers it a new paragraph (though would give a warning). \u00b7\u00b7\u00b7\u00b7Para text \u00a6 \u00b7\u00b7\u00b7\u00b7Para text \u00a6 \u00b7\u00b7Less indented \u00a6 -> \u00b7\u00b7Less indented text\u00a6 \u00b7\u00b7text \u00a6 \u00a6",
            "title": "Paragraphs"
        },
        {
            "location": "specs/content-types/restructuredtext/_restructuredtext/#section-titles",
            "text": "( details ) Section titles are made up of one line of text with an underline and possible overline of punctuation characters. All text in the title must be on the same line. Because of this, section titles are never wrapped. Where there are more than two lines, it will be treated as a normal paragraph, with the underline characters as part of the text. a long section title -> a long section title ==================== ==================== \u00a6 \u00a6 not a \u00a6 not a section \u00a6 section \u00a6 -> title ======= \u00a6 title \u00a6 \u00a6 ======= \u00a6 \u00a6",
            "title": "Section titles"
        },
        {
            "location": "specs/content-types/restructuredtext/_restructuredtext/#transitions",
            "text": "( details ) Transitions are horizontal separators created by 4 or more punctuation characters. There must be no indent and there must be a blank line before and after do avoid confusion with section titles. Transition markers are Transition markers \u00a6 left untouched \u00a6 are left untouched \u00a6 \u00a6 \u00a6 -------------------------- -> -------------------------- \u00a6 \u00a6 \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\" \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\" \u00a6 \u00a6 ************************** **************************",
            "title": "Transitions"
        },
        {
            "location": "specs/content-types/restructuredtext/_restructuredtext/#bullet-lists",
            "text": "( details ) Bullet lists are created with one of the markers * + - \u2022 \u2023 \u2043 . A single line will wrap so text is at the same indent \u2022 bullet item text -> \u2022 bullet item \u00a6 \u00a6 text \u00a6",
            "title": "Bullet lists"
        },
        {
            "location": "specs/content-types/restructuredtext/_restructuredtext/#enumerated-lists",
            "text": "( details ) Enumerated lists have either numerals, letters, or roman numerals with the form X. , X) or (X) 1. item one text 1. item one \u00a6 2. item \u00a6 -> text \u00a6 two \u00a6 2. item two \u00a6 (a) item one text (a) item one \u00a6 (b) item \u00a6 -> text \u00a6 two \u00a6 (b) item two \u00a6",
            "title": "Enumerated lists"
        },
        {
            "location": "specs/content-types/restructuredtext/_restructuredtext/#field-lists",
            "text": "( details ) Field list items have the form :<field name>: <field body> . The line break after each item is preserved and the body content is wrapped. Extra lines of the body content must all be indented by the same amount, though the indent can be as little as 1 space. :Date: 2001-08-16 \u00a6 :Date: 2001-08-16 \u00a6 :Version: 1 \u00a6 :Version: 1 \u00a6 :Authors: - Me \u00a6 :Authors: - Me \u00a6 - Myself \u00a6 -> - Myself \u00a6 - I \u00a6 - I \u00a6 :Abstract: Lorem ipsum lorem :Abstract: Lorem ipsum \u00a6 ipsum lorem ipsum. \u00a6 lorem ipsum lorem ipsum. \u00a6",
            "title": "Field lists"
        },
        {
            "location": "specs/content-types/restructuredtext/_restructuredtext/#option-lists",
            "text": "Not supported yet",
            "title": "Option lists"
        },
        {
            "location": "specs/content-types/restructuredtext/_restructuredtext/#literal-blocks",
            "text": "( details ) Literal blocks are used for code samples or anything that mustn't be wrapped. A literal block follows any line that ends with :: . :: \u00a6 :: \u00a6 \u00a6 \u00a6 code \u00a6 code \u00a6 block \u00a6 block \u00a6 \u00a6 \u00a6 not wrapped -> not wrapped \u00a6 \u00a6 normal paragraph normal \u00a6 \u00a6 paragraph \u00a6 Example:: \u00a6 Example:: \u00a6 \u00a6 \u00a6 code block -> code block \u00a6 \u00a6 normal paragraph normal \u00a6 \u00a6 paragraph \u00a6",
            "title": "Literal blocks"
        },
        {
            "location": "specs/content-types/restructuredtext/_restructuredtext/#line-blocks",
            "text": "Line blocks are a way of preserving line breaks. When a line begins with \"|\" + whitespace, the line-break before it will be preserved, though the rest of the line can be wrapped. | Line one \u00a6 -> | Line one \u00a6 | Line two \u00a6 | Line two \u00a6 A long line is wrapped with the text indent of created lines matching that of the first. | A too-long line | A too-long \u00a6 | Another long line -> line \u00a6 \u00a6 | Another long\u00a6 \u00a6 line \u00a6 Line blocks cannot contain other elements such as bullet lists or literal blocks.",
            "title": "Line blocks"
        },
        {
            "location": "specs/content-types/restructuredtext/_restructuredtext/#doctest-blocks",
            "text": "( details ) Doctest blocks are intended for interactive Python sessions cut-and-pasted into documentation. They start with >>> and all following lines in the block are not wrapped. This is an \u00a6 This is an ordinary \u00a6 ordinary paragraph. \u00a6 paragraph. \u00a6 \u00a6 -> \u00a6 >>> print 'this is a Doctest block' >>> print 'this is a Doctest block' this is a Doctest block this is a Doctest block",
            "title": "Doctest blocks"
        },
        {
            "location": "specs/content-types/restructuredtext/_restructuredtext/#tables",
            "text": "( details ) No wrapping is attemped on tables. Tables can take two forms: \"grid tables\" +---+---+---+ \u00a6 +---+---+---+ \u00a6 | | T | F | \u00a6 | | T | F | \u00a6 +===+===+===+ \u00a6 +===+===+===+ \u00a6 | T | F | T | \u00a6 -> | T | F | T | \u00a6 +---+---+---+ \u00a6 +---+---+---+ \u00a6 | F | T | F | \u00a6 | F | T | F | \u00a6 +---+---+---+ \u00a6 +---+---+---+ \u00a6 And \"simple tables\". === === === \u00a6 === === === \u00a6 T F \u00a6 T F \u00a6 === === === \u00a6 === === === \u00a6 T F T \u00a6 -> T F T \u00a6 F T F \u00a6 F T F \u00a6 === === === \u00a6 === === === \u00a6",
            "title": "Tables"
        },
        {
            "location": "specs/content-types/restructuredtext/_restructuredtext/#explicit-markup-blocks",
            "text": "Explicit markup blocks cover footnotes, citations, hyperlink targets, directives, substitution definitions, and comments. They are denoted by a block that starts with .. followed by whitespace.",
            "title": "Explicit markup blocks"
        },
        {
            "location": "specs/content-types/restructuredtext/_restructuredtext/#footnotes-and-citations",
            "text": "These can contain body content The footnote content (body elements) must be consistently indented and left-aligned. The first body element within a footnote may often begin on the same line as the footnote label. However, if the first element fits on one line and the indentation of the remaining elements differ, the first element must begin on the line after the footnote label. Otherwise, the difference in indentation will not be detected. .. [*] This is a footnote -> .. [*] This is a \u00a6 \u00a6 footnote \u00a6 .. [#] - A footnote \u00a6 .. [#] - A footnote \u00a6 - With bullets \u00a6 - With bullets \u00a6 .. [#note.1] A \u00a6 -> .. [#note.1] A named \u00a6 named footnote \u00a6 footnote \u00a6 .. [GVR-2001] This is \u00a6 .. [GVR-2001] This is a \u00a6 a citation \u00a6 citation \u00a6",
            "title": "Footnotes and citations"
        },
        {
            "location": "specs/content-types/restructuredtext/_restructuredtext/#hyperlink-targets",
            "text": "These aren't wrapped for now. Explicit and implicit .. link_1: https://longer.url .. link_1: https://longer.url .. __: a.com \u00a6 -> .. __: a.com \u00a6 __ https://c.d \u00a6 __ https://c.d \u00a6",
            "title": "Hyperlink targets"
        },
        {
            "location": "specs/content-types/restructuredtext/_restructuredtext/#directives",
            "text": "These aren't wrapped for now. .. meta:: \u00a6 .. meta:: \u00a6 :keywords: key words -> :keywords: key words :description: description :description: description text \u00a6 text \u00a6",
            "title": "Directives"
        },
        {
            "location": "specs/content-types/restructuredtext/_restructuredtext/#substitution-definitions",
            "text": "These aren't wrapped for now .. |pic| image:: pic.png -> .. |pic| image:: pic.png \u00a6 \u00a6",
            "title": "Substitution definitions"
        },
        {
            "location": "specs/content-types/restructuredtext/_restructuredtext/#comments",
            "text": "These aren't wrapped for now .. Anything else that's written .. Anything else that's written in a block \u00a6 -> in a block \u00a6 after a \"..\" \u00a6 after a \"..\" \u00a6",
            "title": "Comments"
        },
        {
            "location": "specs/content-types/restructuredtext/bullet-lists/",
            "text": "reStructuredText: Bullet Lists language: reStructuredText There must be whitespace after the bullet marker. *not a bullet item -> *not a bullet \u00a6 \u00a6 item \u00a6 Child content A bullet item can have from the first line: a blank line, a line block, another bullet item, a (ignored) transition line, or a normal paragraph. A bullet item can contain a sub bullet item on the first line. + + This is a sub-item -> + + This is a \u00a6 \u00a6 sub-item \u00a6 The text indent for the first line determines the base indent for all content. * Text can be indented any * Text can be indented\u00a6 amount from the bullet any amount from the \u00a6 point as long \u00a6 -> bullet point as long\u00a6 as it's all \u00a6 as it's all indented\u00a6 indented the same amount the same amount \u00a6 + First paragraph \u00a6 + First paragraph \u00a6 This is a \u00a6 -> This is a separate\u00a6 separate paragraph\u00a6 paragraph \u00a6 Content before A bullet item can't come straight after a paragraph without a blank line inbetween. It will be treated as part of the paragraph. paragraph text \u00a6 -> paragraph text * not \u00a6 * not a bullet \u00a6 a bullet \u00a6 However, as always, that only applies if they're at the same indent. If the paragraph and list item are at different indents, then they're separate. paragraph \u00a6 paragraph text \u00a6 text \u00a6 -> - bullet in a \u00a6 - bullet in a definition definition \u00a6 Content after - A paragraph \u00a6 - A paragraph in a \u00a6 in a bullet point \u00a6 bullet point \u00a6 but this is a \u00a6 but this is a new \u00a6 new paragraph \u00a6 -> paragraph \u00a6 \u00a6 \u00a6 Sibling and sub-items Multiple list items don't require a blank line between them. * first \u00a6 * first item\u00a6 item \u00a6 -> * second \u00a6 * second item item \u00a6 * first \u00a6 * first item\u00a6 item \u00a6 -> * second \u00a6 * second item item \u00a6 * first \u00a6 * first item\u00a6 item \u00a6 -> * second \u00a6 * second item. item. \u00a6 However when the bullet marker is at the same text indent as the first line, it will be treated as the same paragraph. - Line one \u00a6 -> - Line one - This is \u00a6 - This is the same paragraph the same paragraph \u00a6 Except if the first line is blank + \u00a6 + \u00a6 + This is a new paragraph + This is a new \u00a6 \u00a6 paragraph \u00a6 * \u00a6 -> \u00a6 * This is a new paragraph * \u00a6 \u00a6 * This is a new \u00a6 \u00a6 paragraph \u00a6",
            "title": "reStructuredText: Bullet Lists"
        },
        {
            "location": "specs/content-types/restructuredtext/bullet-lists/#restructuredtext-bullet-lists",
            "text": "language: reStructuredText There must be whitespace after the bullet marker. *not a bullet item -> *not a bullet \u00a6 \u00a6 item \u00a6",
            "title": "reStructuredText: Bullet Lists"
        },
        {
            "location": "specs/content-types/restructuredtext/bullet-lists/#child-content",
            "text": "A bullet item can have from the first line: a blank line, a line block, another bullet item, a (ignored) transition line, or a normal paragraph. A bullet item can contain a sub bullet item on the first line. + + This is a sub-item -> + + This is a \u00a6 \u00a6 sub-item \u00a6 The text indent for the first line determines the base indent for all content. * Text can be indented any * Text can be indented\u00a6 amount from the bullet any amount from the \u00a6 point as long \u00a6 -> bullet point as long\u00a6 as it's all \u00a6 as it's all indented\u00a6 indented the same amount the same amount \u00a6 + First paragraph \u00a6 + First paragraph \u00a6 This is a \u00a6 -> This is a separate\u00a6 separate paragraph\u00a6 paragraph \u00a6",
            "title": "Child content"
        },
        {
            "location": "specs/content-types/restructuredtext/bullet-lists/#content-before",
            "text": "A bullet item can't come straight after a paragraph without a blank line inbetween. It will be treated as part of the paragraph. paragraph text \u00a6 -> paragraph text * not \u00a6 * not a bullet \u00a6 a bullet \u00a6 However, as always, that only applies if they're at the same indent. If the paragraph and list item are at different indents, then they're separate. paragraph \u00a6 paragraph text \u00a6 text \u00a6 -> - bullet in a \u00a6 - bullet in a definition definition \u00a6",
            "title": "Content before"
        },
        {
            "location": "specs/content-types/restructuredtext/bullet-lists/#content-after",
            "text": "- A paragraph \u00a6 - A paragraph in a \u00a6 in a bullet point \u00a6 bullet point \u00a6 but this is a \u00a6 but this is a new \u00a6 new paragraph \u00a6 -> paragraph \u00a6 \u00a6 \u00a6",
            "title": "Content after"
        },
        {
            "location": "specs/content-types/restructuredtext/bullet-lists/#sibling-and-sub-items",
            "text": "Multiple list items don't require a blank line between them. * first \u00a6 * first item\u00a6 item \u00a6 -> * second \u00a6 * second item item \u00a6 * first \u00a6 * first item\u00a6 item \u00a6 -> * second \u00a6 * second item item \u00a6 * first \u00a6 * first item\u00a6 item \u00a6 -> * second \u00a6 * second item. item. \u00a6 However when the bullet marker is at the same text indent as the first line, it will be treated as the same paragraph. - Line one \u00a6 -> - Line one - This is \u00a6 - This is the same paragraph the same paragraph \u00a6 Except if the first line is blank + \u00a6 + \u00a6 + This is a new paragraph + This is a new \u00a6 \u00a6 paragraph \u00a6 * \u00a6 -> \u00a6 * This is a new paragraph * \u00a6 \u00a6 * This is a new \u00a6 \u00a6 paragraph \u00a6",
            "title": "Sibling and sub-items"
        },
        {
            "location": "specs/content-types/restructuredtext/doctest-blocks/",
            "text": "reStructuredText: Doctest Blocks language: reStructuredText Doctest blocks can be indented (ie: inside blockquotes). \u00b7\u00b7>>> print 'Doctest block' -> \u00b7\u00b7>>> print 'Doctest block' Doctest block \u00a6 Doctest block \u00a6 They are terminated by a blank line, or something at a lesser indent. >>> print 'Doctest block' >>> print 'Doctest block' Doctest block \u00a6 Doctest block \u00a6 \u00a6 -> \u00a6 Normal \u00a6 Normal paragraph \u00a6 paragraph \u00a6 \u00a6 \u00b7\u00b7>>> print 'Doctest block' \u00b7\u00b7>>> print 'Doctest block' Doctest block \u00a6 -> Doctest block \u00a6 Normal \u00a6 Normal paragraph \u00a6 paragraph \u00a6 \u00a6 \u00b7\u00b7>>> print 'Doctest block' \u00b7\u00b7>>> print 'Doctest block' Doctest block \u00a6 -> Doctest block \u00a6 * Bullet \u00a6 * Bullet item \u00a6 item \u00a6 \u00a6 The space after >>> is required. >>> This is a doctest block >>> This is a doctest block \u00a6 -> \u00a6 >>>This is a normal paragraph >>>This is a normal \u00a6 \u00a6 paragraph \u00a6 Or a line ending. >>> \u00a6 >>> \u00a6 print 'Doctest block' -> print 'Doctest block' Doctest block \u00a6 Doctest block \u00a6 But then there must be no blank lines after the >>> . >>> \u00a6 >>> \u00a6 \u00a6 -> \u00a6 Now a normal paragraph Now a normal \u00a6 \u00a6 paragraph \u00a6 Doctest blocks do not interrupt a paragraph at the same indent. Paragraph text \u00a6 Paragraph text >>> \u00a6 >>> This is still part -> This is still part \u00a6 of the paragraph \u00a6 of the paragraph \u00a6 But are fine at a greater indent (ie: part of a definition) Paragraph \u00a6 Paragraph text \u00a6 text \u00a6 -> >>> This is a doctest block >>> This is a doctest block \u00a6 Or a lesser indent \u00b7\u00b7\u00b7\u00b7Paragraph text \u00b7\u00b7\u00b7\u00b7Paragraph \u00a6 >>> This is a doctest block -> text \u00a6 \u00a6 >>> This is a doctest block Further-indented lines remain part of the block >>> Doctest block\u00a6 >>> Doctest block\u00a6 more \u00a6 more \u00a6 lines \u00a6 -> lines \u00a6 \u00a6 \u00a6 Normal paragraph again. Normal paragraph \u00a6 again. \u00a6",
            "title": "reStructuredText: Doctest Blocks"
        },
        {
            "location": "specs/content-types/restructuredtext/doctest-blocks/#restructuredtext-doctest-blocks",
            "text": "language: reStructuredText Doctest blocks can be indented (ie: inside blockquotes). \u00b7\u00b7>>> print 'Doctest block' -> \u00b7\u00b7>>> print 'Doctest block' Doctest block \u00a6 Doctest block \u00a6 They are terminated by a blank line, or something at a lesser indent. >>> print 'Doctest block' >>> print 'Doctest block' Doctest block \u00a6 Doctest block \u00a6 \u00a6 -> \u00a6 Normal \u00a6 Normal paragraph \u00a6 paragraph \u00a6 \u00a6 \u00b7\u00b7>>> print 'Doctest block' \u00b7\u00b7>>> print 'Doctest block' Doctest block \u00a6 -> Doctest block \u00a6 Normal \u00a6 Normal paragraph \u00a6 paragraph \u00a6 \u00a6 \u00b7\u00b7>>> print 'Doctest block' \u00b7\u00b7>>> print 'Doctest block' Doctest block \u00a6 -> Doctest block \u00a6 * Bullet \u00a6 * Bullet item \u00a6 item \u00a6 \u00a6 The space after >>> is required. >>> This is a doctest block >>> This is a doctest block \u00a6 -> \u00a6 >>>This is a normal paragraph >>>This is a normal \u00a6 \u00a6 paragraph \u00a6 Or a line ending. >>> \u00a6 >>> \u00a6 print 'Doctest block' -> print 'Doctest block' Doctest block \u00a6 Doctest block \u00a6 But then there must be no blank lines after the >>> . >>> \u00a6 >>> \u00a6 \u00a6 -> \u00a6 Now a normal paragraph Now a normal \u00a6 \u00a6 paragraph \u00a6 Doctest blocks do not interrupt a paragraph at the same indent. Paragraph text \u00a6 Paragraph text >>> \u00a6 >>> This is still part -> This is still part \u00a6 of the paragraph \u00a6 of the paragraph \u00a6 But are fine at a greater indent (ie: part of a definition) Paragraph \u00a6 Paragraph text \u00a6 text \u00a6 -> >>> This is a doctest block >>> This is a doctest block \u00a6 Or a lesser indent \u00b7\u00b7\u00b7\u00b7Paragraph text \u00b7\u00b7\u00b7\u00b7Paragraph \u00a6 >>> This is a doctest block -> text \u00a6 \u00a6 >>> This is a doctest block Further-indented lines remain part of the block >>> Doctest block\u00a6 >>> Doctest block\u00a6 more \u00a6 more \u00a6 lines \u00a6 -> lines \u00a6 \u00a6 \u00a6 Normal paragraph again. Normal paragraph \u00a6 again. \u00a6",
            "title": "reStructuredText: Doctest Blocks"
        },
        {
            "location": "specs/content-types/restructuredtext/enumerated-lists/",
            "text": "reStructuredText: Enumerated lists Enumerated (or numbered) lists behave similarly to bullet lists . The rules for list item markers are more complex than for example markdown, however. The marker format for items can be X. , X) or (X) where X is the enumerator. The various accepted emumerators are given below. language: \"reStructuredText\" Arabic numerals: 1, 2, 3 ... (no upper limit in RST, though we have the limit of a signed int32). 1) item one text 1) item one \u00a6 2) item \u00a6 -> text \u00a6 two \u00a6 2) item two \u00a6 999999998) item one text 999999998) item one \u00a6 999999999) item \u00a6 -> text \u00a6 two \u00a6 999999999) item two \u00a6 Letters: A ,B, C ... Z. Upper or lower-case, but cannot mix case within a list. A. item one text A. item one \u00a6 B. item \u00a6 -> text \u00a6 two \u00a6 B. item two \u00a6 a. item one text a. item one \u00a6 b. item \u00a6 -> text \u00a6 two \u00a6 b. item two \u00a6 Roman numerals: I, II, III, IV ... MMMMCMXCIX (4999). Again can be upper or lower case, but can't be mixed. (i) item one text (i) item one \u00a6 (ii) item \u00a6 -> text \u00a6 two \u00a6 (ii) item two \u00a6 (MMMMCMXCVIII) item one text (MMMMCMXCVIII) item one \u00a6 (MMMMCMXCIX) item \u00a6 -> text \u00a6 two \u00a6 (MMMMCMXCIX) item two \u00a6 Auto enumerator A # can be used in place of an enumerator. #. item one text #. item one \u00a6 #. item \u00a6 -> text \u00a6 two \u00a6 #. item two \u00a6 Validation While enumerated lists don't have to start with \"1\" or equivalent, following items must follow sequentially (\"2\", \"3\" etc). If they don't, then they are not considered part of the same list. If there are blank lines between list items, this has no effect on wrapping. But if there are no blank lines, the whole text is considered a normal paragraph instead. This rule is not yet enfored in Rewrap.",
            "title": "reStructuredText: Enumerated lists"
        },
        {
            "location": "specs/content-types/restructuredtext/enumerated-lists/#restructuredtext-enumerated-lists",
            "text": "Enumerated (or numbered) lists behave similarly to bullet lists . The rules for list item markers are more complex than for example markdown, however. The marker format for items can be X. , X) or (X) where X is the enumerator. The various accepted emumerators are given below. language: \"reStructuredText\" Arabic numerals: 1, 2, 3 ... (no upper limit in RST, though we have the limit of a signed int32). 1) item one text 1) item one \u00a6 2) item \u00a6 -> text \u00a6 two \u00a6 2) item two \u00a6 999999998) item one text 999999998) item one \u00a6 999999999) item \u00a6 -> text \u00a6 two \u00a6 999999999) item two \u00a6 Letters: A ,B, C ... Z. Upper or lower-case, but cannot mix case within a list. A. item one text A. item one \u00a6 B. item \u00a6 -> text \u00a6 two \u00a6 B. item two \u00a6 a. item one text a. item one \u00a6 b. item \u00a6 -> text \u00a6 two \u00a6 b. item two \u00a6 Roman numerals: I, II, III, IV ... MMMMCMXCIX (4999). Again can be upper or lower case, but can't be mixed. (i) item one text (i) item one \u00a6 (ii) item \u00a6 -> text \u00a6 two \u00a6 (ii) item two \u00a6 (MMMMCMXCVIII) item one text (MMMMCMXCVIII) item one \u00a6 (MMMMCMXCIX) item \u00a6 -> text \u00a6 two \u00a6 (MMMMCMXCIX) item two \u00a6",
            "title": "reStructuredText: Enumerated lists"
        },
        {
            "location": "specs/content-types/restructuredtext/enumerated-lists/#auto-enumerator",
            "text": "A # can be used in place of an enumerator. #. item one text #. item one \u00a6 #. item \u00a6 -> text \u00a6 two \u00a6 #. item two \u00a6",
            "title": "Auto enumerator"
        },
        {
            "location": "specs/content-types/restructuredtext/enumerated-lists/#validation",
            "text": "While enumerated lists don't have to start with \"1\" or equivalent, following items must follow sequentially (\"2\", \"3\" etc). If they don't, then they are not considered part of the same list. If there are blank lines between list items, this has no effect on wrapping. But if there are no blank lines, the whole text is considered a normal paragraph instead. This rule is not yet enfored in Rewrap.",
            "title": "Validation"
        },
        {
            "location": "specs/content-types/restructuredtext/field-lists/",
            "text": "reStructuredText: Field Lists language: reStructuredText A field list item has the form :<fieldname>: <content> The line break before each field list item is preserved :Date: 2001-08-16 \u00a6 -> :Date: 2001-08-16 \u00a6 :Version: 1 \u00a6 :Version: 1 \u00a6 Child content The content of field list items is not restricted to one line. The initial paragraph can multiple lines, with two conditions: the second line must be indented further than the field name marker, and subsequent lines must have the same indent as the second line. :item: the content may :item: the content \u00a6 spread over multiple -> may spread over \u00a6 lines. \u00a6 multiple lines. \u00a6 This is in contrast to bullet items and enumerated items , subsequent lines must have the same indent as that of the first. If a single line field list item is too long, wrapped lines are given a 4 space indent relative to the field name marker. :Field: A line that's too long -> :Field: A line that's \u00a6 \u00a6 too long \u00a6 There must be whitespace between the closing : and the content. :this:is not a field list item :this:is not a field \u00a6 \u00a6 list item \u00a6 :this: is a field list item -> \u00a6 \u00a6 :this: is a field \u00a6 \u00a6 list item \u00a6 Field name The field name may contain spaces, but not line breaks. :a field name: 1 \u00a6 -> :a field name: 1 \u00a6 :another field name: 2 \u00a6 :another field name: 2 \u00a6 The field name may contain : characters only if they are escaped with \\ . Address field In an address field, content is taken as literal content. :Address: 999 Letsby Avenue :Address: 999 Letsby Avenue Sheffield \u00a6 Sheffield \u00a6 \u00a6 -> \u00a6 text \u00a6 text text \u00a6 text \u00a6 \u00a6 \"Address\" is case sensitive. :address: Not a real address -> :address: Not a real \u00a6 \u00a6 address \u00a6 Content before A field list doesn't interrupt a paragraph paragraph \u00a6 paragraph text :abc: \u00a6 text \u00a6 -> 123 \u00a6 :abc: 123 \u00a6 \u00a6 Content after A paragraph or any body content can come after a field list item (with a warning) :abc: 123 \u00a6 :abc: 123 \u00a6 paragraph \u00a6 -> paragraph text \u00a6 text \u00a6 \u00a6",
            "title": "reStructuredText: Field Lists"
        },
        {
            "location": "specs/content-types/restructuredtext/field-lists/#restructuredtext-field-lists",
            "text": "language: reStructuredText A field list item has the form :<fieldname>: <content> The line break before each field list item is preserved :Date: 2001-08-16 \u00a6 -> :Date: 2001-08-16 \u00a6 :Version: 1 \u00a6 :Version: 1 \u00a6",
            "title": "reStructuredText: Field Lists"
        },
        {
            "location": "specs/content-types/restructuredtext/field-lists/#child-content",
            "text": "The content of field list items is not restricted to one line. The initial paragraph can multiple lines, with two conditions: the second line must be indented further than the field name marker, and subsequent lines must have the same indent as the second line. :item: the content may :item: the content \u00a6 spread over multiple -> may spread over \u00a6 lines. \u00a6 multiple lines. \u00a6 This is in contrast to bullet items and enumerated items , subsequent lines must have the same indent as that of the first. If a single line field list item is too long, wrapped lines are given a 4 space indent relative to the field name marker. :Field: A line that's too long -> :Field: A line that's \u00a6 \u00a6 too long \u00a6 There must be whitespace between the closing : and the content. :this:is not a field list item :this:is not a field \u00a6 \u00a6 list item \u00a6 :this: is a field list item -> \u00a6 \u00a6 :this: is a field \u00a6 \u00a6 list item \u00a6",
            "title": "Child content"
        },
        {
            "location": "specs/content-types/restructuredtext/field-lists/#field-name",
            "text": "The field name may contain spaces, but not line breaks. :a field name: 1 \u00a6 -> :a field name: 1 \u00a6 :another field name: 2 \u00a6 :another field name: 2 \u00a6 The field name may contain : characters only if they are escaped with \\ .",
            "title": "Field name"
        },
        {
            "location": "specs/content-types/restructuredtext/field-lists/#address-field",
            "text": "In an address field, content is taken as literal content. :Address: 999 Letsby Avenue :Address: 999 Letsby Avenue Sheffield \u00a6 Sheffield \u00a6 \u00a6 -> \u00a6 text \u00a6 text text \u00a6 text \u00a6 \u00a6 \"Address\" is case sensitive. :address: Not a real address -> :address: Not a real \u00a6 \u00a6 address \u00a6",
            "title": "Address field"
        },
        {
            "location": "specs/content-types/restructuredtext/field-lists/#content-before",
            "text": "A field list doesn't interrupt a paragraph paragraph \u00a6 paragraph text :abc: \u00a6 text \u00a6 -> 123 \u00a6 :abc: 123 \u00a6 \u00a6",
            "title": "Content before"
        },
        {
            "location": "specs/content-types/restructuredtext/field-lists/#content-after",
            "text": "A paragraph or any body content can come after a field list item (with a warning) :abc: 123 \u00a6 :abc: 123 \u00a6 paragraph \u00a6 -> paragraph text \u00a6 text \u00a6 \u00a6",
            "title": "Content after"
        },
        {
            "location": "specs/content-types/restructuredtext/literal-blocks/",
            "text": "reStructuredText: Literal Blocks language: \"reStructuredText\" Whitespace after the :: is allowed. Example::\u00b7\u00b7 Example::\u00b7\u00b7 \u00a6 \u00a6 code block -> code block \u00a6 \u00a6 But there are two conditions. The first is that there's a blank line between the paragraph and literal block: Example:: \u00a6 Example:: \u00a6 no blank line; \u00a6 -> no blank line; \u00a6 taken as normal paragraph taken as normal \u00a6 \u00a6 paragraph \u00a6 Example:: \u00a6 Example:: if the \u00a6 if the indent is the same, -> indent is the same, \u00a6 taken as the same paragraph taken as the same \u00a6 \u00a6 paragraph Though there can be any number of blank lines Example:: \u00a6 Example:: \u00a6 \u00a6 \u00a6 \u00a6 \u00a6 \u00a6 \u00a6 code block -> code block \u00a6 \u00a6 The second is that the indent of the literal block, while it doesn't have to be 4 spaces, must be greater than that of the paragraph introducing it. Example :: \u00a6 Example :: \u00a6 \u00a6 -> \u00a6 1-space indent is fine 1-space indent is fine Example :: \u00a6 Example :: \u00a6 \u00a6 -> \u00a6 no indent - normal paragraph no indent - normal \u00a6 \u00a6 paragraph \u00a6 \u00b7Indented blockquote :: \u00a6 \u00b7Indented blockquote :: \u00a6 \u00a6 -> \u00a6 not indented further - normal not indented further - \u00a6 paragraph \u00a6 normal paragraph \u00a6 \u00b7Indented blockquote :: \u00a6 \u00b7Indented blockquote :: \u00a6 \u00a6 \u00a6 \u00b7\u00b7indented further - literal \u00b7\u00b7indented further - literal block \u00a6 block \u00a6 \u00a6 -> \u00a6 \u00b7\u00b7still in the literal block \u00b7\u00b7still in the literal block \u00a6 \u00a6 \u00b7normal paragraph \u00a6 \u00b7normal paragraph again \u00a6 again \u00a6 \u00a6 Quoted literal blocks With quoted literal blocks, the above rules for indentation can be ignored, and instead of being indented, the lines of the literal block are prefixed with one of the following characters: ! \" # $ % & ' ( ) * + , - . / : ; < = > ? @ [ \\ ] ^ _ { | } ~`. :: \u00a6 :: \u00a6 \u00a6 -> \u00a6 ! literal \u00a6 ! literal \u00a6 ! block \u00a6 ! block \u00a6 As above, there must be a blank line before them. :: \u00a6 :: > this is still\u00a6 > this is still the -> the > same \u00a6 > same paragraph \u00a6 paragraph \u00a6 If a quoted literal block is also indented, then it counts as an indented literal block, and those rules apply. :: \u00a6 :: \u00a6 \u00a6 \u00a6 # just an indented # just an indented # literal block -> # literal block # still in the literal block # still in the literal block # now a normal paragraph # now a normal paragraph The lines of the literal block must all have the same prefix char. If it changes then the literal block ends. :: \u00a6 :: \u00a6 \u00a6 \u00a6 $ just another literal $ just another literal $ block \u00a6 -> $ block \u00a6 @ now this is a normal @ now this is a \u00a6 @ paragraph again\u00a6 normal @ \u00a6 paragraph again \u00a6",
            "title": "reStructuredText: Literal Blocks"
        },
        {
            "location": "specs/content-types/restructuredtext/literal-blocks/#restructuredtext-literal-blocks",
            "text": "language: \"reStructuredText\" Whitespace after the :: is allowed. Example::\u00b7\u00b7 Example::\u00b7\u00b7 \u00a6 \u00a6 code block -> code block \u00a6 \u00a6 But there are two conditions. The first is that there's a blank line between the paragraph and literal block: Example:: \u00a6 Example:: \u00a6 no blank line; \u00a6 -> no blank line; \u00a6 taken as normal paragraph taken as normal \u00a6 \u00a6 paragraph \u00a6 Example:: \u00a6 Example:: if the \u00a6 if the indent is the same, -> indent is the same, \u00a6 taken as the same paragraph taken as the same \u00a6 \u00a6 paragraph Though there can be any number of blank lines Example:: \u00a6 Example:: \u00a6 \u00a6 \u00a6 \u00a6 \u00a6 \u00a6 \u00a6 code block -> code block \u00a6 \u00a6 The second is that the indent of the literal block, while it doesn't have to be 4 spaces, must be greater than that of the paragraph introducing it. Example :: \u00a6 Example :: \u00a6 \u00a6 -> \u00a6 1-space indent is fine 1-space indent is fine Example :: \u00a6 Example :: \u00a6 \u00a6 -> \u00a6 no indent - normal paragraph no indent - normal \u00a6 \u00a6 paragraph \u00a6 \u00b7Indented blockquote :: \u00a6 \u00b7Indented blockquote :: \u00a6 \u00a6 -> \u00a6 not indented further - normal not indented further - \u00a6 paragraph \u00a6 normal paragraph \u00a6 \u00b7Indented blockquote :: \u00a6 \u00b7Indented blockquote :: \u00a6 \u00a6 \u00a6 \u00b7\u00b7indented further - literal \u00b7\u00b7indented further - literal block \u00a6 block \u00a6 \u00a6 -> \u00a6 \u00b7\u00b7still in the literal block \u00b7\u00b7still in the literal block \u00a6 \u00a6 \u00b7normal paragraph \u00a6 \u00b7normal paragraph again \u00a6 again \u00a6 \u00a6",
            "title": "reStructuredText: Literal Blocks"
        },
        {
            "location": "specs/content-types/restructuredtext/literal-blocks/#quoted-literal-blocks",
            "text": "With quoted literal blocks, the above rules for indentation can be ignored, and instead of being indented, the lines of the literal block are prefixed with one of the following characters: ! \" # $ % & ' ( ) * + , - . / : ; < = > ? @ [ \\ ] ^ _ { | } ~`. :: \u00a6 :: \u00a6 \u00a6 -> \u00a6 ! literal \u00a6 ! literal \u00a6 ! block \u00a6 ! block \u00a6 As above, there must be a blank line before them. :: \u00a6 :: > this is still\u00a6 > this is still the -> the > same \u00a6 > same paragraph \u00a6 paragraph \u00a6 If a quoted literal block is also indented, then it counts as an indented literal block, and those rules apply. :: \u00a6 :: \u00a6 \u00a6 \u00a6 # just an indented # just an indented # literal block -> # literal block # still in the literal block # still in the literal block # now a normal paragraph # now a normal paragraph The lines of the literal block must all have the same prefix char. If it changes then the literal block ends. :: \u00a6 :: \u00a6 \u00a6 \u00a6 $ just another literal $ just another literal $ block \u00a6 -> $ block \u00a6 @ now this is a normal @ now this is a \u00a6 @ paragraph again\u00a6 normal @ \u00a6 paragraph again \u00a6",
            "title": "Quoted literal blocks"
        },
        {
            "location": "specs/content-types/restructuredtext/narrow-section-titles/",
            "text": "reStructuredText: \"Narrow\" Section Titles \"Narrow\" section titles are those where the overline if present, otherwise the underline, are <= 3 characters in width. The distinction is made here, because if these are not correctly formed, they are treated as paragraph text and therefore wrapped, whereas wider section titles that are invalid are not wrapped. language: reStructuredText With underline only The underline must be at least as wide as the title text. Less than that and it will be taken as paragraph text. abc \u00a6 -> abc \u00a6 ### \u00a6 ### \u00a6 title \u00a6 -> title ### \u00a6 ### \u00a6 \u00a6 Even a 1-character title is allowed a \u00a6 -> a \u00a6 - \u00a6 - \u00a6 Double-width characters are taken into account. They take 2 underline characters. \u518d \u00a6 \u518d= \u00a6 = \u00a6 \u00a6 \u00a6 -> \u518d \u00a6 \u518d \u00a6 == \u00a6 == \u00a6 \u00a6 (Un)indented underline text text text text text \u00a6 ### \u00a6 -> text \u00a6 \u00a6 ### \u00a6 text text text text text \u00a6 ### \u00a6 -> text \u00a6 \u00a6 ### \u00a6 With over and underline The over and underline must be the same length. If not, everything is taken as paragraph content instead. *** \u00a6 *** Title ***** \u00a6 Title \u00a6 -> \u00a6 ***** \u00a6 \u00a6 If the overline is < 4 characters, then this is interpreted as: a paragraph of punctuation characters, a blockquote, and an invalid section title with just an overline. === \u00a6 === \u00a6 \u00b7This is now a blockquote \u00b7This is now a \u00a6 ===== \u00a6 -> blockquote \u00a6 invalid section title ===== \u00a6 with just overline\u00a6 invalid section title with just overline\u00a6 Parsing Strategy There are lots of permutations. This runs through the cases where a punctuation line is discovered that is < 4 characters. It can possibly be a valid section title if the title text and underline are also the same length. If not valid, it will either be normal paragraph text or a combination of other body elements. Overline indented First taking the case that the overline is indented. This can never be a section title (valid or invalid). The rules for other content are followed instead. What looks like a section title is instead parsed as a normal paragraph, no matter the length of the text or underline. \u00b7=== \u00a6 \u00b7=== abc === \u00a6 abc \u00a6 -> \u00a6 === \u00a6 \u00a6 \u00b7=== \u00a6 \u00b7=== abcd ==== \u00a6 abcd \u00a6 -> \u00a6 ==== \u00a6 \u00a6 As long as the second line is at the same indent, it's a continuation of the paragraph, as normal. If the second line has a different indent, then it starts a new block. Overline not indented If we found a possible overline that was short and not indented then we have to inspect the next line. 2nd line indented We take first the case that that line is indented, because it's simpler. It almost always means a new block started (as is normally the case with a difference in indent). === \u00a6 === \u00a6 text text -> text \u00a6 \u00a6 text \u00a6 === \u00a6 === \u00a6 * text text -> * text \u00a6 \u00a6 text \u00a6 === \u00a6 === \u00a6 | text text -> | text \u00a6 \u00a6 text \u00a6 For almost all cases we can forget the possibility of a section title and continue processing. There is only one case where it is still possible, where the line content ends at or before the overline (regardless of what that content is). === \u00a6 -> === \u00a6 ab \u00a6 ab \u00a6 === \u00a6 -> === \u00a6 == \u00a6 == \u00a6 Here we have to keep in mind that it can still become a section title with the correct underline. If the third line is an underline that matches the overline exactly, then we have a section title (not wrapped). === \u00a6 === \u00a6 ab \u00a6 -> ab \u00a6 === \u00a6 === \u00a6 But in all other cases, it's processed as a paragraph that begins on the second line. === \u00a6 -> === \u00a6 ab \u00a6 ab more\u00a6 more text text \u00a6 This includes the possibility that it is an (invalid) section title after all, with just an underline. === \u00a6 === \u00a6 ab \u00a6 ab \u00a6 == \u00a6 -> == \u00a6 more text more \u00a6 \u00a6 text \u00a6 === \u00a6 === \u00a6 ab \u00a6 ab \u00a6 ^^^^ \u00a6 -> ^^^^ \u00a6 more text more \u00a6 \u00a6 text \u00a6 And of course, a difference in indent starts a new block. === \u00a6 === \u00a6 ab \u00a6 ab \u00a6 more text -> more \u00a6 \u00a6 text \u00a6 === \u00a6 === \u00a6 ab \u00a6 ab \u00a6 + item text -> + item\u00a6 \u00a6 text\u00a6 2nd line not indented Back to the second line, for the case that it's not indented. Firstly, it's possible that this line is a valid underline. These examples produce a section title \"===\", and we would continue processing anew from the line after that. === \u00a6 -> === \u00a6 === \u00a6 === \u00a6 paragraph \u00a6 paragraph text \u00a6 text \u00a6 \u00a6 === \u00a6 -> === \u00a6 &&&& \u00a6 &&&& \u00a6 paragraph \u00a6 paragraph text \u00a6 text \u00a6 \u00a6 If it's anything else, then we currently have wrappable paragraph text. === \u00a6 -> === abc \u00a6 abc \u00a6 \u00a6 === \u00a6 -> === abcd \u00a6 abcd \u00a6 \u00a6 === \u00a6 -> === * a \u00a6 * a \u00a6 \u00a6 === \u00a6 -> === | a \u00a6 | a \u00a6 \u00a6 But as above, we still have the possibility of a section title as long as the 2nd line isn't longer than the first. With a (not indented) underline With text not indented, but ending past the overline, it's all taken as a paragraph, regardless of the underline length === \u00a6 === abcd === \u00a6 abcd \u00a6 -> \u00a6 === \u00a6 \u00a6 === \u00a6 === abcd ==== \u00a6 abcd \u00a6 -> \u00a6 ==== \u00a6 \u00a6 With text not indented and within the overline: if the underline length is the same as the overline length, it's a valid section title (not wrapped). ~~~ \u00a6 ~~~ \u00a6 abc \u00a6 abc \u00a6 ~~~ \u00a6 -> ~~~ \u00a6 paragraph \u00a6 paragraph text \u00a6 text \u00a6 \u00a6 If the underline is any other length, it's all paragraph text ~~~ \u00a6 ~~~ abc ~~ \u00a6 abc \u00a6 -> \u00a6 ~~ \u00a6 \u00a6 ~~~ \u00a6 ~~~ abc ~~~~ \u00a6 abc \u00a6 -> \u00a6 ~~~~ \u00a6 \u00a6 The text can be indented as long as (1) its end column isn't further than that of the overline and (2) the over- and underlines are the same length. ~~~ \u00a6 ~~~ \u00a6 bc \u00a6 bc \u00a6 ~~~ \u00a6 -> ~~~ \u00a6 paragraph \u00a6 paragraph text \u00a6 text \u00a6 \u00a6 If either the text is too long, or the underline a different length, then both the text and the underline start new blocks (if the underline is >= 4 characters, it'll be a transition line). ~~~ \u00a6 ~~~ \u00a6 bc \u00a6 bc \u00a6 ~~ \u00a6 -> ~~ text \u00a6 text \u00a6 \u00a6 ~~~ \u00a6 ~~~ \u00a6 bc \u00a6 bc \u00a6 ~~~~ \u00a6 -> ~~~~ \u00a6 text \u00a6 text \u00a6 ~~~ \u00a6 ~~~ \u00a6 title too long title too \u00a6 ~~~ \u00a6 -> long \u00a6 text \u00a6 ~~~ text \u00a6 text \u00a6 text \u00a6 With an indented underline An undented underline doesn't count as part of the section title. So the results for the first two lines will be the same as with no underline. The underline, depending on its length and the content following, then starts a new /possible section title with overline or transition or normal paragraph. === \u00a6 === abc \u00a6 abc \u00a6 -> == bc \u00a6 == \u00a6 \u00a6 bc \u00a6 \u00a6",
            "title": "reStructuredText: \"Narrow\" Section Titles"
        },
        {
            "location": "specs/content-types/restructuredtext/narrow-section-titles/#restructuredtext-narrow-section-titles",
            "text": "\"Narrow\" section titles are those where the overline if present, otherwise the underline, are <= 3 characters in width. The distinction is made here, because if these are not correctly formed, they are treated as paragraph text and therefore wrapped, whereas wider section titles that are invalid are not wrapped. language: reStructuredText",
            "title": "reStructuredText: \"Narrow\" Section Titles"
        },
        {
            "location": "specs/content-types/restructuredtext/narrow-section-titles/#with-underline-only",
            "text": "The underline must be at least as wide as the title text. Less than that and it will be taken as paragraph text. abc \u00a6 -> abc \u00a6 ### \u00a6 ### \u00a6 title \u00a6 -> title ### \u00a6 ### \u00a6 \u00a6 Even a 1-character title is allowed a \u00a6 -> a \u00a6 - \u00a6 - \u00a6 Double-width characters are taken into account. They take 2 underline characters. \u518d \u00a6 \u518d= \u00a6 = \u00a6 \u00a6 \u00a6 -> \u518d \u00a6 \u518d \u00a6 == \u00a6 == \u00a6 \u00a6",
            "title": "With underline only"
        },
        {
            "location": "specs/content-types/restructuredtext/narrow-section-titles/#unindented-underline",
            "text": "text text text text text \u00a6 ### \u00a6 -> text \u00a6 \u00a6 ### \u00a6 text text text text text \u00a6 ### \u00a6 -> text \u00a6 \u00a6 ### \u00a6",
            "title": "(Un)indented underline"
        },
        {
            "location": "specs/content-types/restructuredtext/narrow-section-titles/#with-over-and-underline",
            "text": "The over and underline must be the same length. If not, everything is taken as paragraph content instead. *** \u00a6 *** Title ***** \u00a6 Title \u00a6 -> \u00a6 ***** \u00a6 \u00a6 If the overline is < 4 characters, then this is interpreted as: a paragraph of punctuation characters, a blockquote, and an invalid section title with just an overline. === \u00a6 === \u00a6 \u00b7This is now a blockquote \u00b7This is now a \u00a6 ===== \u00a6 -> blockquote \u00a6 invalid section title ===== \u00a6 with just overline\u00a6 invalid section title with just overline\u00a6",
            "title": "With over and underline"
        },
        {
            "location": "specs/content-types/restructuredtext/narrow-section-titles/#parsing-strategy",
            "text": "There are lots of permutations. This runs through the cases where a punctuation line is discovered that is < 4 characters. It can possibly be a valid section title if the title text and underline are also the same length. If not valid, it will either be normal paragraph text or a combination of other body elements.",
            "title": "Parsing Strategy"
        },
        {
            "location": "specs/content-types/restructuredtext/narrow-section-titles/#overline-indented",
            "text": "First taking the case that the overline is indented. This can never be a section title (valid or invalid). The rules for other content are followed instead. What looks like a section title is instead parsed as a normal paragraph, no matter the length of the text or underline. \u00b7=== \u00a6 \u00b7=== abc === \u00a6 abc \u00a6 -> \u00a6 === \u00a6 \u00a6 \u00b7=== \u00a6 \u00b7=== abcd ==== \u00a6 abcd \u00a6 -> \u00a6 ==== \u00a6 \u00a6 As long as the second line is at the same indent, it's a continuation of the paragraph, as normal. If the second line has a different indent, then it starts a new block.",
            "title": "Overline indented"
        },
        {
            "location": "specs/content-types/restructuredtext/narrow-section-titles/#overline-not-indented",
            "text": "If we found a possible overline that was short and not indented then we have to inspect the next line.",
            "title": "Overline not indented"
        },
        {
            "location": "specs/content-types/restructuredtext/narrow-section-titles/#2nd-line-indented",
            "text": "We take first the case that that line is indented, because it's simpler. It almost always means a new block started (as is normally the case with a difference in indent). === \u00a6 === \u00a6 text text -> text \u00a6 \u00a6 text \u00a6 === \u00a6 === \u00a6 * text text -> * text \u00a6 \u00a6 text \u00a6 === \u00a6 === \u00a6 | text text -> | text \u00a6 \u00a6 text \u00a6 For almost all cases we can forget the possibility of a section title and continue processing. There is only one case where it is still possible, where the line content ends at or before the overline (regardless of what that content is). === \u00a6 -> === \u00a6 ab \u00a6 ab \u00a6 === \u00a6 -> === \u00a6 == \u00a6 == \u00a6 Here we have to keep in mind that it can still become a section title with the correct underline. If the third line is an underline that matches the overline exactly, then we have a section title (not wrapped). === \u00a6 === \u00a6 ab \u00a6 -> ab \u00a6 === \u00a6 === \u00a6 But in all other cases, it's processed as a paragraph that begins on the second line. === \u00a6 -> === \u00a6 ab \u00a6 ab more\u00a6 more text text \u00a6 This includes the possibility that it is an (invalid) section title after all, with just an underline. === \u00a6 === \u00a6 ab \u00a6 ab \u00a6 == \u00a6 -> == \u00a6 more text more \u00a6 \u00a6 text \u00a6 === \u00a6 === \u00a6 ab \u00a6 ab \u00a6 ^^^^ \u00a6 -> ^^^^ \u00a6 more text more \u00a6 \u00a6 text \u00a6 And of course, a difference in indent starts a new block. === \u00a6 === \u00a6 ab \u00a6 ab \u00a6 more text -> more \u00a6 \u00a6 text \u00a6 === \u00a6 === \u00a6 ab \u00a6 ab \u00a6 + item text -> + item\u00a6 \u00a6 text\u00a6",
            "title": "2nd line indented"
        },
        {
            "location": "specs/content-types/restructuredtext/narrow-section-titles/#2nd-line-not-indented",
            "text": "Back to the second line, for the case that it's not indented. Firstly, it's possible that this line is a valid underline. These examples produce a section title \"===\", and we would continue processing anew from the line after that. === \u00a6 -> === \u00a6 === \u00a6 === \u00a6 paragraph \u00a6 paragraph text \u00a6 text \u00a6 \u00a6 === \u00a6 -> === \u00a6 &&&& \u00a6 &&&& \u00a6 paragraph \u00a6 paragraph text \u00a6 text \u00a6 \u00a6 If it's anything else, then we currently have wrappable paragraph text. === \u00a6 -> === abc \u00a6 abc \u00a6 \u00a6 === \u00a6 -> === abcd \u00a6 abcd \u00a6 \u00a6 === \u00a6 -> === * a \u00a6 * a \u00a6 \u00a6 === \u00a6 -> === | a \u00a6 | a \u00a6 \u00a6 But as above, we still have the possibility of a section title as long as the 2nd line isn't longer than the first.",
            "title": "2nd line not indented"
        },
        {
            "location": "specs/content-types/restructuredtext/narrow-section-titles/#with-a-not-indented-underline",
            "text": "With text not indented, but ending past the overline, it's all taken as a paragraph, regardless of the underline length === \u00a6 === abcd === \u00a6 abcd \u00a6 -> \u00a6 === \u00a6 \u00a6 === \u00a6 === abcd ==== \u00a6 abcd \u00a6 -> \u00a6 ==== \u00a6 \u00a6 With text not indented and within the overline: if the underline length is the same as the overline length, it's a valid section title (not wrapped). ~~~ \u00a6 ~~~ \u00a6 abc \u00a6 abc \u00a6 ~~~ \u00a6 -> ~~~ \u00a6 paragraph \u00a6 paragraph text \u00a6 text \u00a6 \u00a6 If the underline is any other length, it's all paragraph text ~~~ \u00a6 ~~~ abc ~~ \u00a6 abc \u00a6 -> \u00a6 ~~ \u00a6 \u00a6 ~~~ \u00a6 ~~~ abc ~~~~ \u00a6 abc \u00a6 -> \u00a6 ~~~~ \u00a6 \u00a6 The text can be indented as long as (1) its end column isn't further than that of the overline and (2) the over- and underlines are the same length. ~~~ \u00a6 ~~~ \u00a6 bc \u00a6 bc \u00a6 ~~~ \u00a6 -> ~~~ \u00a6 paragraph \u00a6 paragraph text \u00a6 text \u00a6 \u00a6 If either the text is too long, or the underline a different length, then both the text and the underline start new blocks (if the underline is >= 4 characters, it'll be a transition line). ~~~ \u00a6 ~~~ \u00a6 bc \u00a6 bc \u00a6 ~~ \u00a6 -> ~~ text \u00a6 text \u00a6 \u00a6 ~~~ \u00a6 ~~~ \u00a6 bc \u00a6 bc \u00a6 ~~~~ \u00a6 -> ~~~~ \u00a6 text \u00a6 text \u00a6 ~~~ \u00a6 ~~~ \u00a6 title too long title too \u00a6 ~~~ \u00a6 -> long \u00a6 text \u00a6 ~~~ text \u00a6 text \u00a6 text \u00a6",
            "title": "With a (not indented) underline"
        },
        {
            "location": "specs/content-types/restructuredtext/narrow-section-titles/#with-an-indented-underline",
            "text": "An undented underline doesn't count as part of the section title. So the results for the first two lines will be the same as with no underline. The underline, depending on its length and the content following, then starts a new /possible section title with overline or transition or normal paragraph. === \u00a6 === abc \u00a6 abc \u00a6 -> == bc \u00a6 == \u00a6 \u00a6 bc \u00a6 \u00a6",
            "title": "With an indented underline"
        },
        {
            "location": "specs/content-types/restructuredtext/tables/",
            "text": "reStructuredText: Tables language: \"reStructuredText\" No wrapping is attempted on the contents of tables. They are left as-is. Grid tables Grid tables are detected by a line that starts and ends with + , with 3 - inbetween, and then a second line with the same indent, that starts with | . Lines after that must start with | or + , and be at the same indent. +---+ \u00a6 +---+ \u00a6 | a | \u00a6 | a | \u00a6 +---+ \u00a6 -> +---+ \u00a6 \u00a6 \u00a6 normal paragraph normal \u00a6 \u00a6 paragraph \u00a6 An indented grid table (ie: in a blockquote) is fine. +---+ \u00a6 +---+ \u00a6 | a | \u00a6 | a | \u00a6 +---+ \u00a6 -> +---+ \u00a6 \u00a6 \u00a6 normal paragraph normal \u00a6 \u00a6 paragraph \u00a6 Like everything else, grid tables can't interrupt a paragraph at the same indent. Everything will be treated as normal paragraph text. normal paragraph normal \u00a6 +---+ \u00a6 -> paragraph +---+\u00a6 | a | \u00a6 | a | +---+ \u00a6 +---+ \u00a6 \u00a6 At a different indent does work (though may give a warning) normal paragraph normal \u00a6 +---+ \u00a6 paragraph \u00a6 | a | \u00a6 -> +---+ \u00a6 +---+ \u00a6 | a | \u00a6 \u00a6 +---+ \u00a6 normal paragraph normal \u00a6 +---+ \u00a6 paragraph \u00a6 | a | \u00a6 -> +---+ \u00a6 +---+ \u00a6 | a | \u00a6 \u00a6 +---+ \u00a6 A table ends as soon as a line is encountered that doesn't start with | or + or has a different indent. A normal paragraph can therefore come directly after a table (with a warning). +---+ \u00a6 +---+ \u00a6 | a | \u00a6 | a | \u00a6 +---+ \u00a6 -> +---+ \u00a6 normal paragraph normal \u00a6 \u00a6 paragraph \u00a6 If a line that looks like the start of a table is followed by a line that doesn't continue the table, the first line is ignored. +---+ \u00a6 +---+ \u00a6 normal paragraph -> normal \u00a6 \u00a6 paragraph \u00a6 Simple tables Simple tables begin with a line that contains 2 sets of at least one = character, separated by at least one space. They end if a line at the same indent begins with = and has a blank line following. ===== ===== ======= \u00a6 ===== ===== ======= \u00a6 A B A and B \u00a6 A B A and B \u00a6 ===== ===== ======= \u00a6 ===== ===== ======= \u00a6 False False False \u00a6 -> False False False \u00a6 True False False \u00a6 True False False \u00a6 False True False \u00a6 False True False \u00a6 True True True \u00a6 True True True \u00a6 ===== ===== ======= \u00a6 ===== ===== ======= \u00a6 It doesn't matter to us whether the table is malformed or not since the result is the same: it's not wrapped. A complete table because a blank line comes after the 2nd = = . = = \u00a6 = = \u00a6 = = \u00a6 = = \u00a6 \u00a6 -> \u00a6 normal \u00a6 normal \u00a6 text \u00a6 text \u00a6 If the closing line is followed by a blank line, its only conditions are: - It must not be indented - It must consist only of = and whitespace characters = = \u00a6 = = \u00a6 = = \u00a6 = = \u00a6 \u00a6 -> \u00a6 still \u00a6 still \u00a6 in table \u00a6 in table \u00a6 = = \u00a6 = = \u00a6 = % \u00a6 = % \u00a6 \u00a6 -> \u00a6 still \u00a6 still \u00a6 in table \u00a6 in table \u00a6 = = \u00a6 = = \u00a6 = \u00a6 = \u00a6 \u00a6 -> \u00a6 normal \u00a6 normal \u00a6 text \u00a6 text \u00a6 = = \u00a6 = = \u00a6 ==== \u00a6 ==== \u00a6 \u00a6 -> \u00a6 normal \u00a6 normal \u00a6 text \u00a6 text \u00a6 An internal line of = s may be present as long it is not followed as a blank line. This denotes the end of the table header. If this line is present, then the next valid line of = s will unconditionally end the table, meaning a blank line after is not needed. === === === \u00a6 === === === \u00a6 in1 in2 out \u00a6 in1 in2 out \u00a6 === === === \u00a6 === === === \u00a6 1 2 5 \u00a6 -> 1 2 5 \u00a6 3 1 5 \u00a6 -> 3 1 5 \u00a6 === === === \u00a6 === === === \u00a6 normal \u00a6 normal text \u00a6 text \u00a6 \u00a6 = = \u00a6 = = \u00a6 = = \u00a6 = = \u00a6 = = \u00a6 -> = = \u00a6 normal \u00a6 normal text \u00a6 text \u00a6 \u00a6 The rest of the way a simple table works cannot currently be supported by Rewrap. It scans following lines (possibly the whole document) for a closing line, and if none is found, gives lines back to be processed as other blocks Indented Simple tables may be indented (inside a blockquote or other container). Whenever a line is encountered with a lesser indent, it terminates the table. \u00b7= = \u00a6 \u00b7= = \u00a6 a b \u00a6 -> a b text \u00a6 text \u00a6 \u00a6",
            "title": "reStructuredText: Tables"
        },
        {
            "location": "specs/content-types/restructuredtext/tables/#restructuredtext-tables",
            "text": "language: \"reStructuredText\" No wrapping is attempted on the contents of tables. They are left as-is.",
            "title": "reStructuredText: Tables"
        },
        {
            "location": "specs/content-types/restructuredtext/tables/#grid-tables",
            "text": "Grid tables are detected by a line that starts and ends with + , with 3 - inbetween, and then a second line with the same indent, that starts with | . Lines after that must start with | or + , and be at the same indent. +---+ \u00a6 +---+ \u00a6 | a | \u00a6 | a | \u00a6 +---+ \u00a6 -> +---+ \u00a6 \u00a6 \u00a6 normal paragraph normal \u00a6 \u00a6 paragraph \u00a6 An indented grid table (ie: in a blockquote) is fine. +---+ \u00a6 +---+ \u00a6 | a | \u00a6 | a | \u00a6 +---+ \u00a6 -> +---+ \u00a6 \u00a6 \u00a6 normal paragraph normal \u00a6 \u00a6 paragraph \u00a6 Like everything else, grid tables can't interrupt a paragraph at the same indent. Everything will be treated as normal paragraph text. normal paragraph normal \u00a6 +---+ \u00a6 -> paragraph +---+\u00a6 | a | \u00a6 | a | +---+ \u00a6 +---+ \u00a6 \u00a6 At a different indent does work (though may give a warning) normal paragraph normal \u00a6 +---+ \u00a6 paragraph \u00a6 | a | \u00a6 -> +---+ \u00a6 +---+ \u00a6 | a | \u00a6 \u00a6 +---+ \u00a6 normal paragraph normal \u00a6 +---+ \u00a6 paragraph \u00a6 | a | \u00a6 -> +---+ \u00a6 +---+ \u00a6 | a | \u00a6 \u00a6 +---+ \u00a6 A table ends as soon as a line is encountered that doesn't start with | or + or has a different indent. A normal paragraph can therefore come directly after a table (with a warning). +---+ \u00a6 +---+ \u00a6 | a | \u00a6 | a | \u00a6 +---+ \u00a6 -> +---+ \u00a6 normal paragraph normal \u00a6 \u00a6 paragraph \u00a6 If a line that looks like the start of a table is followed by a line that doesn't continue the table, the first line is ignored. +---+ \u00a6 +---+ \u00a6 normal paragraph -> normal \u00a6 \u00a6 paragraph \u00a6",
            "title": "Grid tables"
        },
        {
            "location": "specs/content-types/restructuredtext/tables/#simple-tables",
            "text": "Simple tables begin with a line that contains 2 sets of at least one = character, separated by at least one space. They end if a line at the same indent begins with = and has a blank line following. ===== ===== ======= \u00a6 ===== ===== ======= \u00a6 A B A and B \u00a6 A B A and B \u00a6 ===== ===== ======= \u00a6 ===== ===== ======= \u00a6 False False False \u00a6 -> False False False \u00a6 True False False \u00a6 True False False \u00a6 False True False \u00a6 False True False \u00a6 True True True \u00a6 True True True \u00a6 ===== ===== ======= \u00a6 ===== ===== ======= \u00a6 It doesn't matter to us whether the table is malformed or not since the result is the same: it's not wrapped. A complete table because a blank line comes after the 2nd = = . = = \u00a6 = = \u00a6 = = \u00a6 = = \u00a6 \u00a6 -> \u00a6 normal \u00a6 normal \u00a6 text \u00a6 text \u00a6 If the closing line is followed by a blank line, its only conditions are: - It must not be indented - It must consist only of = and whitespace characters = = \u00a6 = = \u00a6 = = \u00a6 = = \u00a6 \u00a6 -> \u00a6 still \u00a6 still \u00a6 in table \u00a6 in table \u00a6 = = \u00a6 = = \u00a6 = % \u00a6 = % \u00a6 \u00a6 -> \u00a6 still \u00a6 still \u00a6 in table \u00a6 in table \u00a6 = = \u00a6 = = \u00a6 = \u00a6 = \u00a6 \u00a6 -> \u00a6 normal \u00a6 normal \u00a6 text \u00a6 text \u00a6 = = \u00a6 = = \u00a6 ==== \u00a6 ==== \u00a6 \u00a6 -> \u00a6 normal \u00a6 normal \u00a6 text \u00a6 text \u00a6 An internal line of = s may be present as long it is not followed as a blank line. This denotes the end of the table header. If this line is present, then the next valid line of = s will unconditionally end the table, meaning a blank line after is not needed. === === === \u00a6 === === === \u00a6 in1 in2 out \u00a6 in1 in2 out \u00a6 === === === \u00a6 === === === \u00a6 1 2 5 \u00a6 -> 1 2 5 \u00a6 3 1 5 \u00a6 -> 3 1 5 \u00a6 === === === \u00a6 === === === \u00a6 normal \u00a6 normal text \u00a6 text \u00a6 \u00a6 = = \u00a6 = = \u00a6 = = \u00a6 = = \u00a6 = = \u00a6 -> = = \u00a6 normal \u00a6 normal text \u00a6 text \u00a6 \u00a6 The rest of the way a simple table works cannot currently be supported by Rewrap. It scans following lines (possibly the whole document) for a closing line, and if none is found, gives lines back to be processed as other blocks",
            "title": "Simple tables"
        },
        {
            "location": "specs/content-types/restructuredtext/tables/#indented",
            "text": "Simple tables may be indented (inside a blockquote or other container). Whenever a line is encountered with a lesser indent, it terminates the table. \u00b7= = \u00a6 \u00b7= = \u00a6 a b \u00a6 -> a b text \u00a6 text \u00a6 \u00a6",
            "title": "Indented"
        },
        {
            "location": "specs/content-types/restructuredtext/transitions-section-titles/",
            "text": "reStructuredText: Transitions & Section Titles language: reStructuredText Transitions and underlines/overlines for section titles are made from a line of one of any of the Ascii punctiation characters: !\"#$%&'()*+,-./:;<=>?@[\\]^_``{|} ~ . Transitions A transition line is created from \u2265 4 punctuation characters. Transitions must have a blank line before and after. If they don't then they may be interpreted as either invalid, or part of a section title. However that usually won't make a difference for wrapping. text \u00a6 text text \u00a6 text text \u00a6 text \u00a6 \u00a6 \u00a6 //// \u00a6 -> //// \u00a6 \u00a6 \u00a6 text \u00a6 text text \u00a6 text again \u00a6 again \u00a6 \"Wide\" section titles This page covers \"wide\" section titles, where the overline if present, else the underline, is at least 4 characters wide (ie. like a valid transition line). The behavior around these is different from \"narrow\" section titles . Since the text of section titles must be on a single line, it is never wrapped. With underline only An underline can only come on the second line of a paragraph; ie. there can only be one line of text above it. If there is more than one line, then the underline will be treated as paragraph content, no matter how long. Title \u00a6 Title text ===== \u00a6 text \u00a6 -> \u00a6 ===== \u00a6 \u00a6 Make-up Whitespace is allowed after the underline Title \u00a6 -> Title \u00a6 '''''\u00b7 \u00a6 '''''\u00b7 \u00a6 The underline must be made up of the same character. If made from mixed characters it will be treated as paragraph text, no matter how long. title \u00a6 -> title +=+=+ \u00a6 +=+=+ \u00a6 \u00a6 If there are any characters other than whitespace after the underline, everything will be treated as paragraph text. title \u00a6 -> title ***** \u00a6 ***** something something \u00a6 While the underline should be at least as long as the title text, anything \u2265 4 characters will count. title \u00a6 -> title \u00a6 #### \u00a6 #### \u00a6 (Un)indented underline If the underline is at a different indent from the text, it doesn't count as an underline. The text will be treated as normal paragraph text (wrapped). The punctuation line then starts a new block, and will be taken as an (invalid) transition line, or possibly overline for a new section title. text text text text text \u00a6 #### \u00a6 -> text \u00a6 \u00a6 #### \u00a6 text text text text text \u00a6 ############## -> text \u00a6 \u00a6 ############## text text text text text \u00a6 #### \u00a6 -> text \u00a6 \u00a6 #### \u00a6 text text text text text \u00a6 ############### -> text \u00a6 \u00a6 ############### With overline and underline Section titles can have an optional overline. ~~~~~~~ \u00a6 ~~~~~~~ \u00a6 Title \u00a6 -> Title \u00a6 ~~~~~~~ \u00a6 ~~~~~~~ \u00a6 The title text may be indented, as long as its right edge doesn't extend past that of the lines. ====== \u00a6 ====== \u00a6 \u00b7Title \u00a6 \u00b7Title \u00a6 ====== \u00a6 -> ====== \u00a6 paragraph \u00a6 paragraph text \u00a6 text \u00a6 \u00a6 If it does though it's just a warning. ===== \u00a6 ===== \u00a6 \u00b7Title \u00a6 \u00b7Title \u00a6 ===== \u00a6 -> ===== \u00a6 paragraph \u00a6 paragraph text \u00a6 text \u00a6 \u00a6 Invalid inputs (overline not indented) There are lots of ways to make an \"invalid\" 3 line section title. Each of these cases will produce an error in an RST processor, but as in all error cases we don't wrap the content. If there is a text after the overline but a blank line after that. The indent and length of the text doesn't matter. ==== \u00a6 ==== \u00a6 text \u00a6 text \u00a6 \u00a6 -> \u00a6 paragraph \u00a6 paragraph text \u00a6 text \u00a6 \u00a6 ==== \u00a6 ==== \u00a6 text \u00a6 text \u00a6 \u00a6 -> \u00a6 paragraph \u00a6 paragraph text \u00a6 text \u00a6 \u00a6 If the second line is also an unindented punctuation line, these two lines will be ignored and processing will continue at the line after them. ====== \u00a6 ====== \u00a6 ====== \u00a6 -> ====== \u00a6 This is normal paragraph text This is normal paragraph \u00a6 again. \u00a6 text again. \u00a6 Holds true no matter how long the second line. ====== \u00a6 ====== \u00a6 = \u00a6 -> = \u00a6 This is normal paragraph text This is normal paragraph \u00a6 again. \u00a6 text again. \u00a6 If the overline is followed by two lines with content, and the second of those is anything other than a valid (unindented) punctuation line, all 3 lines will be ignored. Processing will continue immediately on the line after that. ====== \u00a6 ====== \u00a6 line 2 \u00a6 line 2 \u00a6 line 3 \u00a6 -> line 3 \u00a6 This is normal paragraph text This is normal paragraph \u00a6 again. \u00a6 text again. \u00a6 ====== \u00a6 ====== \u00a6 = \u00a6 = \u00a6 line 3 \u00a6 -> line 3 \u00a6 This is normal paragraph text This is normal paragraph \u00a6 again. \u00a6 text again. \u00a6 A valid underline means: Not indented. ====== \u00a6 ====== \u00a6 line 2 \u00a6 line 2 \u00a6 ====== \u00a6 -> ====== \u00a6 Normal paragraph text Normal paragraph \u00a6 again. \u00a6 text again. \u00a6 Must be the same character as the overline. ------- \u00a6 ------- \u00a6 Title \u00a6 -> Title \u00a6 +++++++ \u00a6 +++++++ \u00a6 Normal paragraph text Normal paragraph \u00a6 again. \u00a6 text again. \u00a6 Must be the same length as the overline. &&&& \u00a6 &&&& \u00a6 Title \u00a6 -> Title \u00a6 &&& \u00a6 &&& \u00a6 Normal paragraph text Normal paragraph \u00a6 again. \u00a6 text again. \u00a6 Invalid inputs (indented overline) If the overline is indented then behavior is slightly different. It can never be a (valid or invalid) 3 line section title, so the overline is taken as an invalid transition, and subsequent lines processed after that. This is seen therefore seen as an invalid transition followed by an invalid section title with underline. ===== \u00a6 ===== \u00a6 Title \u00a6 -> Title \u00a6 ===== \u00a6 ===== \u00a6 paragraph \u00a6 paragraph text \u00a6 text \u00a6 \u00a6 Here the lines after the overline are normal paragraph text \u00b7====== \u00a6 \u00b7====== \u00a6 line 2 \u00a6 -> \u00b7line 2 line 3 \u00a6 line 3 \u00a6 \u00a6 Other invalid inputs These inputs will cause the content to be interpreted as something other than a 3-line section title. If there are multiple text lines between the over and underline, the first 3 lines will be taken as an invalid section title, and prcocessing continues after that. ===== \u00a6 ===== \u00a6 Title \u00a6 -> Title \u00a6 Text \u00a6 -> Text \u00a6 ===== \u00a6 ===== \u00a6 If the overline is indented, that line will be an invalid transition, followed by a valid section title with underline only. \u00b7===== \u00a6 \u00b7===== \u00a6 Title \u00a6 Title \u00a6 ===== \u00a6 -> ===== \u00a6 paragraph \u00a6 paragraph text \u00a6 text \u00a6 \u00a6 If both are indented, it's no longer interpreted as a title, but a paragraph between two invalid transitions, meaning the text will be wrapped. \u00b7===== \u00a6 \u00b7===== \u00a6 A much longer title A much longer \u00a6 \u00b7===== \u00a6 -> title \u00a6 paragraph \u00a6 \u00b7===== \u00a6 text \u00a6 paragraph text \u00a6 Content before If a section title comes directly after paragraph (that is at least 2 lines) at the same indent, everything is taken as paragraph text, no matter if the overline is present or the over/underline length. paragraph \u00a6 paragraph \u00a6 text \u00a6 text ===== \u00a6 ===== \u00a6 -> Title ===== \u00a6 Title \u00a6 \u00a6 ===== \u00a6 \u00a6 If the paragraph is indented (blockquote), then the section title is valid (with or without overline). \u00b7text \u00a6 \u00b7text text \u00a6 \u00b7text \u00a6 !!!!! \u00a6 !!!!! \u00a6 -> Title \u00a6 Title \u00a6 !!!!! \u00a6 !!!!! \u00a6 \u00a6 \u00b7text \u00a6 \u00b7text text \u00a6 \u00b7text \u00a6 -> Title \u00a6 Title \u00a6 \"\"\"\"\" \u00a6 \"\"\"\"\" \u00a6 \u00a6 Content after A paragraph can come immediately after a section title without even a warning. Title \u00a6 Title \u00a6 $$$$$ \u00a6 -> $$$$$ \u00a6 paragraph \u00a6 paragraph text \u00a6 text \u00a6 \u00a6 Title content An underline takes precedence over a literal block introduction. So if a single text line has a literal block marker (::), but then a valid underline, it will be section title with normal \"::\" characters at the end instead. Subsequent lines will not be a literal block. Example:: \u00a6 Example:: \u00a6 ==== \u00a6 ==== \u00a6 \u00a6 -> \u00a6 This is a blockquote This is a \u00a6 \u00a6 blockquote \u00a6 If the text looks like another body element, eg. a bullet item, then adding an underline will not make it into a title. * text text * text \u00a6 =========== -> text \u00a6 \u00a6 =========== But adding an overline too does. =========== =========== * text text * text text =========== -> =========== text text text \u00a6 \u00a6 text \u00a6",
            "title": "reStructuredText: Transitions & Section Titles"
        },
        {
            "location": "specs/content-types/restructuredtext/transitions-section-titles/#restructuredtext-transitions-section-titles",
            "text": "language: reStructuredText Transitions and underlines/overlines for section titles are made from a line of one of any of the Ascii punctiation characters: !\"#$%&'()*+,-./:;<=>?@[\\]^_``{|} ~ .",
            "title": "reStructuredText: Transitions &amp; Section Titles"
        },
        {
            "location": "specs/content-types/restructuredtext/transitions-section-titles/#transitions",
            "text": "A transition line is created from \u2265 4 punctuation characters. Transitions must have a blank line before and after. If they don't then they may be interpreted as either invalid, or part of a section title. However that usually won't make a difference for wrapping. text \u00a6 text text \u00a6 text text \u00a6 text \u00a6 \u00a6 \u00a6 //// \u00a6 -> //// \u00a6 \u00a6 \u00a6 text \u00a6 text text \u00a6 text again \u00a6 again \u00a6",
            "title": "Transitions"
        },
        {
            "location": "specs/content-types/restructuredtext/transitions-section-titles/#wide-section-titles",
            "text": "This page covers \"wide\" section titles, where the overline if present, else the underline, is at least 4 characters wide (ie. like a valid transition line). The behavior around these is different from \"narrow\" section titles . Since the text of section titles must be on a single line, it is never wrapped.",
            "title": "\"Wide\" section titles"
        },
        {
            "location": "specs/content-types/restructuredtext/transitions-section-titles/#with-underline-only",
            "text": "An underline can only come on the second line of a paragraph; ie. there can only be one line of text above it. If there is more than one line, then the underline will be treated as paragraph content, no matter how long. Title \u00a6 Title text ===== \u00a6 text \u00a6 -> \u00a6 ===== \u00a6 \u00a6",
            "title": "With underline only"
        },
        {
            "location": "specs/content-types/restructuredtext/transitions-section-titles/#make-up",
            "text": "Whitespace is allowed after the underline Title \u00a6 -> Title \u00a6 '''''\u00b7 \u00a6 '''''\u00b7 \u00a6 The underline must be made up of the same character. If made from mixed characters it will be treated as paragraph text, no matter how long. title \u00a6 -> title +=+=+ \u00a6 +=+=+ \u00a6 \u00a6 If there are any characters other than whitespace after the underline, everything will be treated as paragraph text. title \u00a6 -> title ***** \u00a6 ***** something something \u00a6 While the underline should be at least as long as the title text, anything \u2265 4 characters will count. title \u00a6 -> title \u00a6 #### \u00a6 #### \u00a6",
            "title": "Make-up"
        },
        {
            "location": "specs/content-types/restructuredtext/transitions-section-titles/#unindented-underline",
            "text": "If the underline is at a different indent from the text, it doesn't count as an underline. The text will be treated as normal paragraph text (wrapped). The punctuation line then starts a new block, and will be taken as an (invalid) transition line, or possibly overline for a new section title. text text text text text \u00a6 #### \u00a6 -> text \u00a6 \u00a6 #### \u00a6 text text text text text \u00a6 ############## -> text \u00a6 \u00a6 ############## text text text text text \u00a6 #### \u00a6 -> text \u00a6 \u00a6 #### \u00a6 text text text text text \u00a6 ############### -> text \u00a6 \u00a6 ###############",
            "title": "(Un)indented underline"
        },
        {
            "location": "specs/content-types/restructuredtext/transitions-section-titles/#with-overline-and-underline",
            "text": "Section titles can have an optional overline. ~~~~~~~ \u00a6 ~~~~~~~ \u00a6 Title \u00a6 -> Title \u00a6 ~~~~~~~ \u00a6 ~~~~~~~ \u00a6 The title text may be indented, as long as its right edge doesn't extend past that of the lines. ====== \u00a6 ====== \u00a6 \u00b7Title \u00a6 \u00b7Title \u00a6 ====== \u00a6 -> ====== \u00a6 paragraph \u00a6 paragraph text \u00a6 text \u00a6 \u00a6 If it does though it's just a warning. ===== \u00a6 ===== \u00a6 \u00b7Title \u00a6 \u00b7Title \u00a6 ===== \u00a6 -> ===== \u00a6 paragraph \u00a6 paragraph text \u00a6 text \u00a6 \u00a6",
            "title": "With overline and underline"
        },
        {
            "location": "specs/content-types/restructuredtext/transitions-section-titles/#invalid-inputs-overline-not-indented",
            "text": "There are lots of ways to make an \"invalid\" 3 line section title. Each of these cases will produce an error in an RST processor, but as in all error cases we don't wrap the content. If there is a text after the overline but a blank line after that. The indent and length of the text doesn't matter. ==== \u00a6 ==== \u00a6 text \u00a6 text \u00a6 \u00a6 -> \u00a6 paragraph \u00a6 paragraph text \u00a6 text \u00a6 \u00a6 ==== \u00a6 ==== \u00a6 text \u00a6 text \u00a6 \u00a6 -> \u00a6 paragraph \u00a6 paragraph text \u00a6 text \u00a6 \u00a6 If the second line is also an unindented punctuation line, these two lines will be ignored and processing will continue at the line after them. ====== \u00a6 ====== \u00a6 ====== \u00a6 -> ====== \u00a6 This is normal paragraph text This is normal paragraph \u00a6 again. \u00a6 text again. \u00a6 Holds true no matter how long the second line. ====== \u00a6 ====== \u00a6 = \u00a6 -> = \u00a6 This is normal paragraph text This is normal paragraph \u00a6 again. \u00a6 text again. \u00a6 If the overline is followed by two lines with content, and the second of those is anything other than a valid (unindented) punctuation line, all 3 lines will be ignored. Processing will continue immediately on the line after that. ====== \u00a6 ====== \u00a6 line 2 \u00a6 line 2 \u00a6 line 3 \u00a6 -> line 3 \u00a6 This is normal paragraph text This is normal paragraph \u00a6 again. \u00a6 text again. \u00a6 ====== \u00a6 ====== \u00a6 = \u00a6 = \u00a6 line 3 \u00a6 -> line 3 \u00a6 This is normal paragraph text This is normal paragraph \u00a6 again. \u00a6 text again. \u00a6 A valid underline means: Not indented. ====== \u00a6 ====== \u00a6 line 2 \u00a6 line 2 \u00a6 ====== \u00a6 -> ====== \u00a6 Normal paragraph text Normal paragraph \u00a6 again. \u00a6 text again. \u00a6 Must be the same character as the overline. ------- \u00a6 ------- \u00a6 Title \u00a6 -> Title \u00a6 +++++++ \u00a6 +++++++ \u00a6 Normal paragraph text Normal paragraph \u00a6 again. \u00a6 text again. \u00a6 Must be the same length as the overline. &&&& \u00a6 &&&& \u00a6 Title \u00a6 -> Title \u00a6 &&& \u00a6 &&& \u00a6 Normal paragraph text Normal paragraph \u00a6 again. \u00a6 text again. \u00a6",
            "title": "Invalid inputs (overline not indented)"
        },
        {
            "location": "specs/content-types/restructuredtext/transitions-section-titles/#invalid-inputs-indented-overline",
            "text": "If the overline is indented then behavior is slightly different. It can never be a (valid or invalid) 3 line section title, so the overline is taken as an invalid transition, and subsequent lines processed after that. This is seen therefore seen as an invalid transition followed by an invalid section title with underline. ===== \u00a6 ===== \u00a6 Title \u00a6 -> Title \u00a6 ===== \u00a6 ===== \u00a6 paragraph \u00a6 paragraph text \u00a6 text \u00a6 \u00a6 Here the lines after the overline are normal paragraph text \u00b7====== \u00a6 \u00b7====== \u00a6 line 2 \u00a6 -> \u00b7line 2 line 3 \u00a6 line 3 \u00a6 \u00a6",
            "title": "Invalid inputs (indented overline)"
        },
        {
            "location": "specs/content-types/restructuredtext/transitions-section-titles/#other-invalid-inputs",
            "text": "These inputs will cause the content to be interpreted as something other than a 3-line section title. If there are multiple text lines between the over and underline, the first 3 lines will be taken as an invalid section title, and prcocessing continues after that. ===== \u00a6 ===== \u00a6 Title \u00a6 -> Title \u00a6 Text \u00a6 -> Text \u00a6 ===== \u00a6 ===== \u00a6 If the overline is indented, that line will be an invalid transition, followed by a valid section title with underline only. \u00b7===== \u00a6 \u00b7===== \u00a6 Title \u00a6 Title \u00a6 ===== \u00a6 -> ===== \u00a6 paragraph \u00a6 paragraph text \u00a6 text \u00a6 \u00a6 If both are indented, it's no longer interpreted as a title, but a paragraph between two invalid transitions, meaning the text will be wrapped. \u00b7===== \u00a6 \u00b7===== \u00a6 A much longer title A much longer \u00a6 \u00b7===== \u00a6 -> title \u00a6 paragraph \u00a6 \u00b7===== \u00a6 text \u00a6 paragraph text \u00a6",
            "title": "Other invalid inputs"
        },
        {
            "location": "specs/content-types/restructuredtext/transitions-section-titles/#content-before",
            "text": "If a section title comes directly after paragraph (that is at least 2 lines) at the same indent, everything is taken as paragraph text, no matter if the overline is present or the over/underline length. paragraph \u00a6 paragraph \u00a6 text \u00a6 text ===== \u00a6 ===== \u00a6 -> Title ===== \u00a6 Title \u00a6 \u00a6 ===== \u00a6 \u00a6 If the paragraph is indented (blockquote), then the section title is valid (with or without overline). \u00b7text \u00a6 \u00b7text text \u00a6 \u00b7text \u00a6 !!!!! \u00a6 !!!!! \u00a6 -> Title \u00a6 Title \u00a6 !!!!! \u00a6 !!!!! \u00a6 \u00a6 \u00b7text \u00a6 \u00b7text text \u00a6 \u00b7text \u00a6 -> Title \u00a6 Title \u00a6 \"\"\"\"\" \u00a6 \"\"\"\"\" \u00a6 \u00a6",
            "title": "Content before"
        },
        {
            "location": "specs/content-types/restructuredtext/transitions-section-titles/#content-after",
            "text": "A paragraph can come immediately after a section title without even a warning. Title \u00a6 Title \u00a6 $$$$$ \u00a6 -> $$$$$ \u00a6 paragraph \u00a6 paragraph text \u00a6 text \u00a6 \u00a6",
            "title": "Content after"
        },
        {
            "location": "specs/content-types/restructuredtext/transitions-section-titles/#title-content",
            "text": "An underline takes precedence over a literal block introduction. So if a single text line has a literal block marker (::), but then a valid underline, it will be section title with normal \"::\" characters at the end instead. Subsequent lines will not be a literal block. Example:: \u00a6 Example:: \u00a6 ==== \u00a6 ==== \u00a6 \u00a6 -> \u00a6 This is a blockquote This is a \u00a6 \u00a6 blockquote \u00a6 If the text looks like another body element, eg. a bullet item, then adding an underline will not make it into a title. * text text * text \u00a6 =========== -> text \u00a6 \u00a6 =========== But adding an overline too does. =========== =========== * text text * text text =========== -> =========== text text text \u00a6 \u00a6 text \u00a6",
            "title": "Title content"
        },
        {
            "location": "specs/features/block-comments/",
            "text": "Block Comments Block comments can have a variety of forms. The relative positions of the begin and end markers (on separate lines or in-line with the text) are preserved. As is the indent of the text relative to them. language: c Begin and end markers on separate lines: /* \u00a6 /* \u00a6 One Three \u00a6 -> One Three Two \u00a6 Two Four \u00a6 Four \u00a6 */ \u00a6 */ \u00a6 \u00b7\u00b7/* \u00a6 \u00b7\u00b7/* \u00a6 \u00b7\u00b7\u00b7\u00b7\u00b7\u00b7a \u00a6 -> \u00b7\u00b7\u00b7\u00b7\u00b7\u00b7a b \u00a6 \u00b7\u00b7\u00b7\u00b7\u00b7\u00b7b c \u00a6 \u00b7\u00b7\u00b7\u00b7\u00b7\u00b7c \u00a6 \u00b7\u00b7*/ \u00a6 \u00b7\u00b7*/ \u00a6 /* \u00a6 /* \u00a6 \u00b7\u00b7\u00b7\u00b7a b c -> \u00b7\u00b7\u00b7\u00b7a b \u00a6 */ \u00a6 \u00b7\u00b7\u00b7\u00b7c \u00a6 \u00a6 */ \u00a6 Begin and end markers inline with the text. Here the indent of the first line is preserved and the indent for the following lines is taken from that of the second line: /* a \u00a6 -> /* a b \u00a6 b c */ \u00a6 c */ \u00a6 /* a \u00a6 -> /* a b \u00a6 \u00b7\u00b7\u00b7b c */ \u00b7\u00b7\u00b7c */\u00a6 /*\u00b7\u00b7a \u00a6 -> /*\u00b7\u00b7a b \u00a6 \u00b7b c */ \u00a6 \u00b7c */ \u00a6 If there is only one line before wrapping, the added lines will be lined up with the begin comment marker. \u00b7\u00b7/* a b c */ -> \u00b7\u00b7/* a b\u00a6 \u00a6 \u00b7\u00b7c */ \u00a6 If the end marker is on a separate line, it remains where it is. /* a \u00a6 -> /* a b \u00a6 b c \u00a6 c \u00a6 */ \u00a6 */ \u00a6 /* a \u00a6 -> /* a b \u00a6 b c \u00a6 c \u00a6 */ */ Unusual alignment Like for line comments , the \"base\" indent is taken from the least-indented text line. However this doesn't include the first line (with the opening comment marker). This is treated separately. \u00b7\u00b7/* a \u00a6 -> \u00b7\u00b7/* a b \u00a6 \u00b7\u00b7b \u00a6 \u00a6 \u00a6 c */ \u00a6 c */ \u00a6 Javadoc language: javascript Having * characters in front of every line is a convention, but is not required, so in a comment that lacks them, they will remain absent. /** \u00a6 -> /** \u00a6 Gets the absolute value of n Gets the absolute \u00a6 @param n {number} \u00a6 value of n \u00a6 */ \u00a6 @param n {number} \u00a6 \u00a6 */ \u00a6 If a java/jsdoc comment only has one line before wrapping, a default prefix of * is used for created lines. \u00b7\u00b7/** Foo bar\u00a6baz */ -> \u00b7\u00b7/** Foo bar\u00a6 \u00a6 * baz */ \u00a6",
            "title": "Block Comments"
        },
        {
            "location": "specs/features/block-comments/#block-comments",
            "text": "Block comments can have a variety of forms. The relative positions of the begin and end markers (on separate lines or in-line with the text) are preserved. As is the indent of the text relative to them. language: c Begin and end markers on separate lines: /* \u00a6 /* \u00a6 One Three \u00a6 -> One Three Two \u00a6 Two Four \u00a6 Four \u00a6 */ \u00a6 */ \u00a6 \u00b7\u00b7/* \u00a6 \u00b7\u00b7/* \u00a6 \u00b7\u00b7\u00b7\u00b7\u00b7\u00b7a \u00a6 -> \u00b7\u00b7\u00b7\u00b7\u00b7\u00b7a b \u00a6 \u00b7\u00b7\u00b7\u00b7\u00b7\u00b7b c \u00a6 \u00b7\u00b7\u00b7\u00b7\u00b7\u00b7c \u00a6 \u00b7\u00b7*/ \u00a6 \u00b7\u00b7*/ \u00a6 /* \u00a6 /* \u00a6 \u00b7\u00b7\u00b7\u00b7a b c -> \u00b7\u00b7\u00b7\u00b7a b \u00a6 */ \u00a6 \u00b7\u00b7\u00b7\u00b7c \u00a6 \u00a6 */ \u00a6 Begin and end markers inline with the text. Here the indent of the first line is preserved and the indent for the following lines is taken from that of the second line: /* a \u00a6 -> /* a b \u00a6 b c */ \u00a6 c */ \u00a6 /* a \u00a6 -> /* a b \u00a6 \u00b7\u00b7\u00b7b c */ \u00b7\u00b7\u00b7c */\u00a6 /*\u00b7\u00b7a \u00a6 -> /*\u00b7\u00b7a b \u00a6 \u00b7b c */ \u00a6 \u00b7c */ \u00a6 If there is only one line before wrapping, the added lines will be lined up with the begin comment marker. \u00b7\u00b7/* a b c */ -> \u00b7\u00b7/* a b\u00a6 \u00a6 \u00b7\u00b7c */ \u00a6 If the end marker is on a separate line, it remains where it is. /* a \u00a6 -> /* a b \u00a6 b c \u00a6 c \u00a6 */ \u00a6 */ \u00a6 /* a \u00a6 -> /* a b \u00a6 b c \u00a6 c \u00a6 */ */",
            "title": "Block Comments"
        },
        {
            "location": "specs/features/block-comments/#unusual-alignment",
            "text": "Like for line comments , the \"base\" indent is taken from the least-indented text line. However this doesn't include the first line (with the opening comment marker). This is treated separately. \u00b7\u00b7/* a \u00a6 -> \u00b7\u00b7/* a b \u00a6 \u00b7\u00b7b \u00a6 \u00a6 \u00a6 c */ \u00a6 c */ \u00a6",
            "title": "Unusual alignment"
        },
        {
            "location": "specs/features/block-comments/#javadoc",
            "text": "language: javascript Having * characters in front of every line is a convention, but is not required, so in a comment that lacks them, they will remain absent. /** \u00a6 -> /** \u00a6 Gets the absolute value of n Gets the absolute \u00a6 @param n {number} \u00a6 value of n \u00a6 */ \u00a6 @param n {number} \u00a6 \u00a6 */ \u00a6 If a java/jsdoc comment only has one line before wrapping, a default prefix of * is used for created lines. \u00b7\u00b7/** Foo bar\u00a6baz */ -> \u00b7\u00b7/** Foo bar\u00a6 \u00a6 * baz */ \u00a6",
            "title": "Javadoc"
        },
        {
            "location": "specs/features/decoration-lines/",
            "text": "Decoration Lines Decoration lines are lines of just symbols with no text, that are sometimes used in comment blocks. language: \"java\" Line comments A \"decoration line\" is defined as a line where the content after the comment marker (eg //): 1. Is not just whitespace 2. Does not contain any text 3. Has no preceding whitespace (between the comment marker and the content) We need to handle these as a specially, in the case that reformat is on. With reformat on, the whitespace between the comment marker and content is normally normalized to one space. But these lines need to be preserved as they are, with no extra space added. //////// \u00a6 -> //////// \u00a6 -or- //////// \u00a6 // a \u00a6 // a \u00a6 // a \u00a6 //------ \u00a6 //------ \u00a6 //------ \u00a6 If there is whitespace between the comment marker and the decoration symbols, then that line is treated like the rest of the markdown content - as a non-wrapping line - but the indent is preserved in the case of reformat off and normalized in the case of reformat on. Block comments A decoration line is defined as a line which: 1. Is the first line of the comment, and 1) Has no text after the start-comment marker. 2) Has no whitespace between the start-comment marker and the rest of the line. 2. Or, contains the end-comment marker and contains no text before it 3. Or, contains no text, and 1) Has more than one non-whitespace character 2) Has no whitespace between a conventional line prefix character for the type of comment block (eg * for c-style comments), and the rest of the line 3) Has a lesser indent than the tail text indent Decoration lines in block comments are output exactly as input. There may be other decoration lines in the comment that are not detected as such lines but it doesn't matter because in these cases they still won't be wrapped and their indent won't be adjusted. /*text */ \u00a6 -> /*text */ \u00a6 -or- /* text */\u00a6 /*-*-* */ \u00a6 /*-*-* */ \u00a6 /*-*-* */ \u00a6 /********** \u00a6 -> /********** \u00a6 -or- /********** \u00a6 * aaa \u00a6 * aaa bbb \u00a6 * aaa bbb \u00a6 * bbb \u00a6 ********** \u00a6 ********** \u00a6 ********** \u00a6 * ccccc \u00a6 * ccccc \u00a6 * ccccc ddddd * ddddd \u00a6 * ddddd \u00a6 ---------- \u00a6 ---------- \u00a6 ---------- \u00a6 **********/\u00a6 **********/\u00a6 **********/\u00a6",
            "title": "Decoration Lines"
        },
        {
            "location": "specs/features/decoration-lines/#decoration-lines",
            "text": "Decoration lines are lines of just symbols with no text, that are sometimes used in comment blocks. language: \"java\"",
            "title": "Decoration Lines"
        },
        {
            "location": "specs/features/decoration-lines/#line-comments",
            "text": "A \"decoration line\" is defined as a line where the content after the comment marker (eg //): 1. Is not just whitespace 2. Does not contain any text 3. Has no preceding whitespace (between the comment marker and the content) We need to handle these as a specially, in the case that reformat is on. With reformat on, the whitespace between the comment marker and content is normally normalized to one space. But these lines need to be preserved as they are, with no extra space added. //////// \u00a6 -> //////// \u00a6 -or- //////// \u00a6 // a \u00a6 // a \u00a6 // a \u00a6 //------ \u00a6 //------ \u00a6 //------ \u00a6 If there is whitespace between the comment marker and the decoration symbols, then that line is treated like the rest of the markdown content - as a non-wrapping line - but the indent is preserved in the case of reformat off and normalized in the case of reformat on.",
            "title": "Line comments"
        },
        {
            "location": "specs/features/decoration-lines/#block-comments",
            "text": "A decoration line is defined as a line which: 1. Is the first line of the comment, and 1) Has no text after the start-comment marker. 2) Has no whitespace between the start-comment marker and the rest of the line. 2. Or, contains the end-comment marker and contains no text before it 3. Or, contains no text, and 1) Has more than one non-whitespace character 2) Has no whitespace between a conventional line prefix character for the type of comment block (eg * for c-style comments), and the rest of the line 3) Has a lesser indent than the tail text indent Decoration lines in block comments are output exactly as input. There may be other decoration lines in the comment that are not detected as such lines but it doesn't matter because in these cases they still won't be wrapped and their indent won't be adjusted. /*text */ \u00a6 -> /*text */ \u00a6 -or- /* text */\u00a6 /*-*-* */ \u00a6 /*-*-* */ \u00a6 /*-*-* */ \u00a6 /********** \u00a6 -> /********** \u00a6 -or- /********** \u00a6 * aaa \u00a6 * aaa bbb \u00a6 * aaa bbb \u00a6 * bbb \u00a6 ********** \u00a6 ********** \u00a6 ********** \u00a6 * ccccc \u00a6 * ccccc \u00a6 * ccccc ddddd * ddddd \u00a6 * ddddd \u00a6 ---------- \u00a6 ---------- \u00a6 ---------- \u00a6 **********/\u00a6 **********/\u00a6 **********/\u00a6",
            "title": "Block comments"
        },
        {
            "location": "specs/features/double-sentence-spacing/",
            "text": "Double Sentence Spacing When doubleSentenceSpacing is set to true, lines that end in a . , ? or ! character have an extra space added. doubleSentenceSpacing: false Text. \u00a6 -> Text. Text Text. \u00a6 Text \u00a6 Text. \u00a6 doubleSentenceSpacing: true Text. \u00a6 -> Text. Text Text. \u00a6 Text \u00a6 Text. \u00a6 Text! \u00a6 -> Text! Text Text! \u00a6 Text \u00a6 Text! \u00a6 Text? \u00a6 -> Text? Text Text? \u00a6 Text \u00a6 Text? \u00a6",
            "title": "Double Sentence Spacing"
        },
        {
            "location": "specs/features/double-sentence-spacing/#double-sentence-spacing",
            "text": "When doubleSentenceSpacing is set to true, lines that end in a . , ? or ! character have an extra space added. doubleSentenceSpacing: false Text. \u00a6 -> Text. Text Text. \u00a6 Text \u00a6 Text. \u00a6 doubleSentenceSpacing: true Text. \u00a6 -> Text. Text Text. \u00a6 Text \u00a6 Text. \u00a6 Text! \u00a6 -> Text! Text Text! \u00a6 Text \u00a6 Text! \u00a6 Text? \u00a6 -> Text? Text Text? \u00a6 Text \u00a6 Text? \u00a6",
            "title": "Double Sentence Spacing"
        },
        {
            "location": "specs/features/embedded-sections/",
            "text": "Embedded Sections language: \"html\" In eg an HTML file, an embedded script section must behave the same if there is no closing tag, as if there were one. <script> \u00a6 <script> \u00a6 // one two three -> // one two \u00a6 \u00a6 // three \u00a6",
            "title": "Embedded Sections"
        },
        {
            "location": "specs/features/embedded-sections/#embedded-sections",
            "text": "language: \"html\" In eg an HTML file, an embedded script section must behave the same if there is no closing tag, as if there were one. <script> \u00a6 <script> \u00a6 // one two three -> // one two \u00a6 \u00a6 // three \u00a6",
            "title": "Embedded Sections"
        },
        {
            "location": "specs/features/line-comments/",
            "text": "Line Comments A comment block is taken from consecutive lines that have the line comment marker (eg. in the case of C: // ) at the start of the line, with only whitespace before it. language: c // Line comment markers -> // Line comment \u00a6 \u00a6 // markers \u00a6 Only comments at the beginning of lines (except for whitespace) can be wrapped. Comments at the end of lines with other text in front of them are not supported. // This is wrapped -> // This is \u00a6 \u00a6 // wrapped \u00a6 int i; // This isn't \u00a6 \u00a6 int i; // This isn't Comment indent A line comment block is denoted by consecutive lines that have the same comment marker at the same visual indent. Tabs or spaces are allowed. language: c, tabWidth: 2 // a \u00a6 -> // a b \u00a6 // b c \u00a6 // c \u00a6 \u00b7// a \u00a6 -> \u00b7// a b \u00a6 \u00b7// b c \u00a6 \u00b7// c \u00a6 -\u2192-\u2192// a \u00a6 -> -\u2192-\u2192// a b \u00a6 -\u2192-\u2192// b c \u00a6 -\u2192-\u2192// c \u00a6 Where width of the indent changes, it's taken to denote a new comment block. \u00b7\u00b7\u00b7\u00b7// a \u00a6 -> \u00b7\u00b7\u00b7\u00b7// a b \u00a6 \u00b7\u00b7\u00b7\u00b7// b c \u00a6 \u00b7\u00b7\u00b7\u00b7// c \u00a6 \u00b7\u00b7// a b \u00a6 \u00b7\u00b7// a b c \u00a6 \u00b7\u00b7// c d \u00a6 \u00b7\u00b7// d \u00a6 The indents can contain any combination of tabs and spaces and will be counted as the same as long as they have the same visual width. language: c, tabWidth: 4 \u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7// a \u00a6 -> \u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7// a b \u00a6 \u00b7\u00b7-\u2192\u00b7\u00b7\u00b7\u00b7// b c \u00a6 \u00b7\u00b7-\u2192\u00b7\u00b7\u00b7\u00b7// c \u00a6 Content indent The content indent (whitespace between comment marker and text) is preserved with reformat: off and changed to 1 space with reformat on. //a \u00a6 -> //a b \u00a6 -or- // a b\u00a6 //b c \u00a6 //c \u00a6 // c \u00a6 //-\u2192a \u00a6 -> //-\u2192a b\u00a6 -or- // a b \u00a6 //-\u2192b c\u00a6 //-\u2192c \u00a6 // c \u00a6 Where the indent is not the same for all lines, the \"base\" indent is taken from the line in the block with the least indent, providing this line contains text. //\u00b7\u00b7\u00b7\u00b7indented code //\u00b7\u00b7\u00b7\u00b7indented code //\u00b7\u00b7\u00b7\u00b7\u00b7indented code // \u00a6 -> // \u00a6 -or- // \u00a6 //a b c d e //a b c d \u00a6 //\u00b7a b c d\u00a6 //f g \u00a6 //e f g \u00a6 //\u00b7e f g \u00a6 Only lines with text are counted, so that \"decorative\" lines are preserved, exactly as they are, regardless of the reformat setting. ///////\u00a6 ///////\u00a6 ///////\u00a6 //\u00b7\u00b7a \u00a6 -> //\u00b7\u00b7a b\u00a6 -or- //\u00b7a b \u00a6 //\u00b7\u00b7b c\u00a6 //\u00b7\u00b7c \u00a6 //\u00b7c \u00a6 //=====\u00a6 //=====\u00a6 //=====\u00a6 Content A completely empty comment remains the same. x \u00a6 -> x \u00a6 // \u00a6 // \u00a6 x \u00a6 x \u00a6 x \u00a6 -> x \u00a6 // \u00a6 // \u00a6 // \u00a6 // \u00a6 x \u00a6 x \u00a6 All blank lines are trimmed at the end. (This is true of all non-wrapping lines) //\u00b7\u00b7 \u00a6 -> // \u00a6 -or- // \u00a6 //\u00b7\u00b7\u00b7\u00b7 \u00a6 // \u00a6 // \u00a6",
            "title": "Line Comments"
        },
        {
            "location": "specs/features/line-comments/#line-comments",
            "text": "A comment block is taken from consecutive lines that have the line comment marker (eg. in the case of C: // ) at the start of the line, with only whitespace before it. language: c // Line comment markers -> // Line comment \u00a6 \u00a6 // markers \u00a6 Only comments at the beginning of lines (except for whitespace) can be wrapped. Comments at the end of lines with other text in front of them are not supported. // This is wrapped -> // This is \u00a6 \u00a6 // wrapped \u00a6 int i; // This isn't \u00a6 \u00a6 int i; // This isn't",
            "title": "Line Comments"
        },
        {
            "location": "specs/features/line-comments/#comment-indent",
            "text": "A line comment block is denoted by consecutive lines that have the same comment marker at the same visual indent. Tabs or spaces are allowed. language: c, tabWidth: 2 // a \u00a6 -> // a b \u00a6 // b c \u00a6 // c \u00a6 \u00b7// a \u00a6 -> \u00b7// a b \u00a6 \u00b7// b c \u00a6 \u00b7// c \u00a6 -\u2192-\u2192// a \u00a6 -> -\u2192-\u2192// a b \u00a6 -\u2192-\u2192// b c \u00a6 -\u2192-\u2192// c \u00a6 Where width of the indent changes, it's taken to denote a new comment block. \u00b7\u00b7\u00b7\u00b7// a \u00a6 -> \u00b7\u00b7\u00b7\u00b7// a b \u00a6 \u00b7\u00b7\u00b7\u00b7// b c \u00a6 \u00b7\u00b7\u00b7\u00b7// c \u00a6 \u00b7\u00b7// a b \u00a6 \u00b7\u00b7// a b c \u00a6 \u00b7\u00b7// c d \u00a6 \u00b7\u00b7// d \u00a6 The indents can contain any combination of tabs and spaces and will be counted as the same as long as they have the same visual width. language: c, tabWidth: 4 \u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7// a \u00a6 -> \u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7// a b \u00a6 \u00b7\u00b7-\u2192\u00b7\u00b7\u00b7\u00b7// b c \u00a6 \u00b7\u00b7-\u2192\u00b7\u00b7\u00b7\u00b7// c \u00a6",
            "title": "Comment indent"
        },
        {
            "location": "specs/features/line-comments/#content-indent",
            "text": "The content indent (whitespace between comment marker and text) is preserved with reformat: off and changed to 1 space with reformat on. //a \u00a6 -> //a b \u00a6 -or- // a b\u00a6 //b c \u00a6 //c \u00a6 // c \u00a6 //-\u2192a \u00a6 -> //-\u2192a b\u00a6 -or- // a b \u00a6 //-\u2192b c\u00a6 //-\u2192c \u00a6 // c \u00a6 Where the indent is not the same for all lines, the \"base\" indent is taken from the line in the block with the least indent, providing this line contains text. //\u00b7\u00b7\u00b7\u00b7indented code //\u00b7\u00b7\u00b7\u00b7indented code //\u00b7\u00b7\u00b7\u00b7\u00b7indented code // \u00a6 -> // \u00a6 -or- // \u00a6 //a b c d e //a b c d \u00a6 //\u00b7a b c d\u00a6 //f g \u00a6 //e f g \u00a6 //\u00b7e f g \u00a6 Only lines with text are counted, so that \"decorative\" lines are preserved, exactly as they are, regardless of the reformat setting. ///////\u00a6 ///////\u00a6 ///////\u00a6 //\u00b7\u00b7a \u00a6 -> //\u00b7\u00b7a b\u00a6 -or- //\u00b7a b \u00a6 //\u00b7\u00b7b c\u00a6 //\u00b7\u00b7c \u00a6 //\u00b7c \u00a6 //=====\u00a6 //=====\u00a6 //=====\u00a6",
            "title": "Content indent"
        },
        {
            "location": "specs/features/line-comments/#content",
            "text": "A completely empty comment remains the same. x \u00a6 -> x \u00a6 // \u00a6 // \u00a6 x \u00a6 x \u00a6 x \u00a6 -> x \u00a6 // \u00a6 // \u00a6 // \u00a6 // \u00a6 x \u00a6 x \u00a6 All blank lines are trimmed at the end. (This is true of all non-wrapping lines) //\u00b7\u00b7 \u00a6 -> // \u00a6 -or- // \u00a6 //\u00b7\u00b7\u00b7\u00b7 \u00a6 // \u00a6 // \u00a6",
            "title": "Content"
        },
        {
            "location": "specs/features/misc/",
            "text": "language: \"plaintext\" If the wrapping column is set at < 1, it behaves as if it's infinite (everything is \"unwrapped\"). a -> a b c b c \u00a6 \u00a6 \u00a6 If there are several blocks where the prefix on the first line is different, this must be handled correctly when lines are added to a one-line block language: \"markdown\" * - + triple bullet -> * - + triple \u00a6 \u00a6 bullet \u00a6",
            "title": "Misc"
        },
        {
            "location": "specs/features/selections/",
            "text": "Selections In the examples on this page, \u00ab represents the start of a selection and \u00bb the end. These characers are removed from the input. Plain text language: \"plaintext\" An empty selection selects a whole paragraph (and only that paragraph) Line1\u00ab\u00bb \u00a6 -> Line1 Line2 \u00a6 Line2 \u00a6 \u00a6 \u00a6 Line3 \u00a6 Line3 \u00a6 Line4 \u00a6 Line4 \u00a6 \u00a6 Multiple selections (alt+click) can be used to select multiple paragraphs Line1\u00ab\u00bb \u00a6 -> Line1 Line2 \u00a6 Line2 \u00a6 \u00a6 \u00a6 Line3 Line4 \u00a6 Line3 \u00a6 Line5 \u00a6 Li\u00ab\u00bbne4 \u00a6 Line6 \u00a6 Line5 \u00a6 \u00a6 Line6 \u00a6 \u00a6 A single selection can too. \u00abLine1 \u00a6 -> Line1 Line2 \u00a6 Line2 \u00a6 \u00a6 \u00a6 Line3 Line4 \u00a6 Line3 \u00a6 Line5 \u00a6 Line4\u00bb \u00a6 Line6 \u00a6 Line5 \u00a6 \u00a6 Line6 \u00a6 \u00a6 If just a few lines from a paragraph are selected, only those lines will be wrapped. Line1 \u00a6 -> Line1 \u00a6 \u00abLine2 \u00a6 Line2 Line3 \u00a6 Line3\u00bb \u00a6 Line4 \u00a6 Line4 \u00a6 \u00a6 Rewrap works only with whole lines, so a (non-empty) selection of part of a line is the same as selecting the whole line. Line1 \u00a6 -> Line1 \u00a6 Line\u00ab2\u00bb texttext Line2 \u00a6 Line3 \u00a6 texttext \u00a6 \u00a6 Line3 \u00a6 Multiple line selections in the same paragraph is fine. \u00abWrap\u00bb this line -> Wrap this \u00a6 Don't wrap\u00a6this line \u00a6 Wrap \u00abthis\u00bb line Don't wrap\u00a6this \u00a6 Wrap this \u00a6 \u00a6 line \u00a6 Comments With wholeComment: true (default), all paragraphs in a comment block will be wrapped when an empty selection is present in it. language: \"c\", wholeComment: true // First paragraph\u00ab\u00bb -> // First \u00a6 // \u00a6 // paragraph \u00a6 // Second paragraph // \u00a6 bool checkFunctions() { // Second \u00a6 \u00a6 // paragraph \u00a6 \u00a6 bool checkFunctions() { With wholeComment: false, only that paragraph will be wrapped language: \"c\", wholeComment: false // First paragraph\u00ab\u00bb -> // First \u00a6 // \u00a6 // paragraph \u00a6 // Second paragraph // \u00a6 bool checkFunctions() { // Second paragraph \u00a6 bool checkFunctions() { Comments and code language: \"javascript\" In source code files, code is never wrapped, even if it's the only thing selected. // Comment \u00a6 -> // Comment \u00a6 // text \u00a6 // text \u00a6 bool \u00ab\u00bbcheckFunctions() bool \u00ab\u00bbcheckFunctions() So a selection can cover code and comments. \u00ab// Checks answer is valid. -> // Checks answer is \u00a6 function isValid (answer) // valid. \u00a6 { \u00a6 function isValid (answer) // First strip off whitespace { \u00a6 answer = answer.trim(); // First strip off \u00a6 \u00bb \u00a6 // whitespace \u00a6 \u00a6 answer = answer.trim(); More specs language: \"plaintext\" Multiple selections on the same line count as just one selection. Don't wrap this -> Don't wrap this \u00abWrap\u00bb \u00abthis\u00bb line Wrap this\u00a6 Don't wrap this line \u00a6 \u00a6 Don't wrap this The same as multiple empty selections in the same paragraph. Li\u00ab\u00bbne1 \u00a6 -> Line1 Line2 Line3 Line4\u00a6 Line2 \u00a6 Li\u00ab\u00bbne3 \u00a6 Line4 \u00a6 If a paragraph has an empty selection and a non-empty selection, the empty selection takes precedence and the whole paragraph is wrapped \u00abLine1\u00bb \u00a6 -> Line1 Line2 Line3 Line4\u00a6 Line2 \u00a6 Li\u00ab\u00bbne3 \u00a6 Line4 \u00a6",
            "title": "Selections"
        },
        {
            "location": "specs/features/selections/#selections",
            "text": "In the examples on this page, \u00ab represents the start of a selection and \u00bb the end. These characers are removed from the input.",
            "title": "Selections"
        },
        {
            "location": "specs/features/selections/#plain-text",
            "text": "language: \"plaintext\" An empty selection selects a whole paragraph (and only that paragraph) Line1\u00ab\u00bb \u00a6 -> Line1 Line2 \u00a6 Line2 \u00a6 \u00a6 \u00a6 Line3 \u00a6 Line3 \u00a6 Line4 \u00a6 Line4 \u00a6 \u00a6 Multiple selections (alt+click) can be used to select multiple paragraphs Line1\u00ab\u00bb \u00a6 -> Line1 Line2 \u00a6 Line2 \u00a6 \u00a6 \u00a6 Line3 Line4 \u00a6 Line3 \u00a6 Line5 \u00a6 Li\u00ab\u00bbne4 \u00a6 Line6 \u00a6 Line5 \u00a6 \u00a6 Line6 \u00a6 \u00a6 A single selection can too. \u00abLine1 \u00a6 -> Line1 Line2 \u00a6 Line2 \u00a6 \u00a6 \u00a6 Line3 Line4 \u00a6 Line3 \u00a6 Line5 \u00a6 Line4\u00bb \u00a6 Line6 \u00a6 Line5 \u00a6 \u00a6 Line6 \u00a6 \u00a6 If just a few lines from a paragraph are selected, only those lines will be wrapped. Line1 \u00a6 -> Line1 \u00a6 \u00abLine2 \u00a6 Line2 Line3 \u00a6 Line3\u00bb \u00a6 Line4 \u00a6 Line4 \u00a6 \u00a6 Rewrap works only with whole lines, so a (non-empty) selection of part of a line is the same as selecting the whole line. Line1 \u00a6 -> Line1 \u00a6 Line\u00ab2\u00bb texttext Line2 \u00a6 Line3 \u00a6 texttext \u00a6 \u00a6 Line3 \u00a6 Multiple line selections in the same paragraph is fine. \u00abWrap\u00bb this line -> Wrap this \u00a6 Don't wrap\u00a6this line \u00a6 Wrap \u00abthis\u00bb line Don't wrap\u00a6this \u00a6 Wrap this \u00a6 \u00a6 line \u00a6",
            "title": "Plain text"
        },
        {
            "location": "specs/features/selections/#comments",
            "text": "With wholeComment: true (default), all paragraphs in a comment block will be wrapped when an empty selection is present in it. language: \"c\", wholeComment: true // First paragraph\u00ab\u00bb -> // First \u00a6 // \u00a6 // paragraph \u00a6 // Second paragraph // \u00a6 bool checkFunctions() { // Second \u00a6 \u00a6 // paragraph \u00a6 \u00a6 bool checkFunctions() { With wholeComment: false, only that paragraph will be wrapped language: \"c\", wholeComment: false // First paragraph\u00ab\u00bb -> // First \u00a6 // \u00a6 // paragraph \u00a6 // Second paragraph // \u00a6 bool checkFunctions() { // Second paragraph \u00a6 bool checkFunctions() {",
            "title": "Comments"
        },
        {
            "location": "specs/features/selections/#comments-and-code",
            "text": "language: \"javascript\" In source code files, code is never wrapped, even if it's the only thing selected. // Comment \u00a6 -> // Comment \u00a6 // text \u00a6 // text \u00a6 bool \u00ab\u00bbcheckFunctions() bool \u00ab\u00bbcheckFunctions() So a selection can cover code and comments. \u00ab// Checks answer is valid. -> // Checks answer is \u00a6 function isValid (answer) // valid. \u00a6 { \u00a6 function isValid (answer) // First strip off whitespace { \u00a6 answer = answer.trim(); // First strip off \u00a6 \u00bb \u00a6 // whitespace \u00a6 \u00a6 answer = answer.trim();",
            "title": "Comments and code"
        },
        {
            "location": "specs/features/selections/#more-specs",
            "text": "language: \"plaintext\" Multiple selections on the same line count as just one selection. Don't wrap this -> Don't wrap this \u00abWrap\u00bb \u00abthis\u00bb line Wrap this\u00a6 Don't wrap this line \u00a6 \u00a6 Don't wrap this The same as multiple empty selections in the same paragraph. Li\u00ab\u00bbne1 \u00a6 -> Line1 Line2 Line3 Line4\u00a6 Line2 \u00a6 Li\u00ab\u00bbne3 \u00a6 Line4 \u00a6 If a paragraph has an empty selection and a non-empty selection, the empty selection takes precedence and the whole paragraph is wrapped \u00abLine1\u00bb \u00a6 -> Line1 Line2 Line3 Line4\u00a6 Line2 \u00a6 Li\u00ab\u00bbne3 \u00a6 Line4 \u00a6",
            "title": "More specs"
        },
        {
            "location": "specs/features/spaces/",
            "text": "Spaces language: plaintext When some text has multiple spaces between two words, this is preserved... Eiusmod ad\u00b7\u00b7\u00b7\u00b7ea sunt non -> Eiusmod ad\u00b7\u00b7\u00b7\u00b7ea sunt \u00a6 reprehenderit elit \u00a6 non reprehenderit elit\u00a6 Unless the split goes over a line boundary. Then all whitespace is removed at that point. Et velit velit duis\u00b7\u00b7\u00b7elit nisi -> Et velit velit duis \u00a6 \u00a6 elit nisi \u00a6 All trailing whitespace is trimmed from every line of any \"wrapping block\" except for the last line, where it is preserved. This is the case even if the whitespace goes over the wrapping column. Minim adipisicing voluptate\u00b7 Minim adipisicing\u00a6 in ipsum consequat\u00b7\u00b7\u00b7\u00b7 -> voluptate in \u00a6 \u00a6 ipsum consequat\u00b7\u00b7\u00b7\u00b7 At the end of a line Two spaces at the end of a line preserves the line break after it. This comes from Markdown should work for any content. language: \"plaintext\" Foo bar.\u00b7\u00b7 \u00a6 -> Foo bar.\u00b7\u00b7 \u00a6 Baz foo \u00a6 Baz foo bar \u00a6 bar baz. \u00a6 baz. \u00a6 language: \"markdown\" Foo bar.\u00b7\u00b7 \u00a6 -> Foo bar.\u00b7\u00b7 \u00a6 Baz foo \u00a6 Baz foo bar \u00a6 bar baz. \u00a6 baz. \u00a6 language: \"latex\" Foo bar.\u00b7\u00b7 \u00a6 -> Foo bar.\u00b7\u00b7 \u00a6 Baz foo \u00a6 Baz foo bar \u00a6 bar baz. \u00a6 baz. \u00a6 language: \"csharp\" /// <remarks> \u00a6 /// <remarks> \u00a6 /// Foo bar.\u00b7\u00b7 \u00a6 -> /// Foo bar.\u00b7\u00b7 \u00a6 /// Baz foo \u00a6 /// Baz foo bar \u00a6 /// bar baz. \u00a6 /// baz. \u00a6 /// </remarks> \u00a6 /// </remarks> \u00a6 language: \"go\" // Foo bar.\u00b7\u00b7 \u00a6 -> // Foo bar.\u00b7\u00b7 \u00a6 // Baz foo \u00a6 // Baz foo bar \u00a6 // bar baz. \u00a6 // baz. \u00a6 language: \"powershell\" <# \u00a6 <# \u00a6 Foo bar.\u00b7\u00b7 \u00a6 -> Foo bar.\u00b7\u00b7 \u00a6 Baz foo \u00a6 Baz foo bar \u00a6 bar baz. \u00a6 baz. \u00a6 #> \u00a6 #> \u00a6",
            "title": "Spaces"
        },
        {
            "location": "specs/features/spaces/#spaces",
            "text": "language: plaintext When some text has multiple spaces between two words, this is preserved... Eiusmod ad\u00b7\u00b7\u00b7\u00b7ea sunt non -> Eiusmod ad\u00b7\u00b7\u00b7\u00b7ea sunt \u00a6 reprehenderit elit \u00a6 non reprehenderit elit\u00a6 Unless the split goes over a line boundary. Then all whitespace is removed at that point. Et velit velit duis\u00b7\u00b7\u00b7elit nisi -> Et velit velit duis \u00a6 \u00a6 elit nisi \u00a6 All trailing whitespace is trimmed from every line of any \"wrapping block\" except for the last line, where it is preserved. This is the case even if the whitespace goes over the wrapping column. Minim adipisicing voluptate\u00b7 Minim adipisicing\u00a6 in ipsum consequat\u00b7\u00b7\u00b7\u00b7 -> voluptate in \u00a6 \u00a6 ipsum consequat\u00b7\u00b7\u00b7\u00b7",
            "title": "Spaces"
        },
        {
            "location": "specs/features/spaces/#at-the-end-of-a-line",
            "text": "Two spaces at the end of a line preserves the line break after it. This comes from Markdown should work for any content. language: \"plaintext\" Foo bar.\u00b7\u00b7 \u00a6 -> Foo bar.\u00b7\u00b7 \u00a6 Baz foo \u00a6 Baz foo bar \u00a6 bar baz. \u00a6 baz. \u00a6 language: \"markdown\" Foo bar.\u00b7\u00b7 \u00a6 -> Foo bar.\u00b7\u00b7 \u00a6 Baz foo \u00a6 Baz foo bar \u00a6 bar baz. \u00a6 baz. \u00a6 language: \"latex\" Foo bar.\u00b7\u00b7 \u00a6 -> Foo bar.\u00b7\u00b7 \u00a6 Baz foo \u00a6 Baz foo bar \u00a6 bar baz. \u00a6 baz. \u00a6 language: \"csharp\" /// <remarks> \u00a6 /// <remarks> \u00a6 /// Foo bar.\u00b7\u00b7 \u00a6 -> /// Foo bar.\u00b7\u00b7 \u00a6 /// Baz foo \u00a6 /// Baz foo bar \u00a6 /// bar baz. \u00a6 /// baz. \u00a6 /// </remarks> \u00a6 /// </remarks> \u00a6 language: \"go\" // Foo bar.\u00b7\u00b7 \u00a6 -> // Foo bar.\u00b7\u00b7 \u00a6 // Baz foo \u00a6 // Baz foo bar \u00a6 // bar baz. \u00a6 // baz. \u00a6 language: \"powershell\" <# \u00a6 <# \u00a6 Foo bar.\u00b7\u00b7 \u00a6 -> Foo bar.\u00b7\u00b7 \u00a6 Baz foo \u00a6 Baz foo bar \u00a6 bar baz. \u00a6 baz. \u00a6 #> \u00a6 #> \u00a6",
            "title": "At the end of a line"
        },
        {
            "location": "specs/features/special-characters/",
            "text": "Special Characters Wrapping should work with any characters. language: \"markdown\" \u044f \u044f \u044f -> \u044f \u044f \u00a6 \u044f \u00a6 \u044f \u044f \u00a6 language: \"csharp\" // \u044f \u044f \u044f -> // \u044f \u044f \u00a6 // \u044f \u00a6 // \u044f \u044f \u00a6 East Asian characters East Asian (CJK) languages are also supported. Most CJK glyphs take up two columns, and wrapping can come after most characters. language: markdown Chinese \u518d\u821e\u5fc3\u73fe\u5f35\u5426\u91cc\u6848 -> \u518d\u821e\u5fc3\u73fe \u00a6 \u00a6 \u5f35\u5426\u91cc\u6848 Japanese \u653f\u79cb\u9020\u30ec\u54e1\u82b8\u3067\u304b -> \u653f\u79cb\u9020\u30ec \u00a6 \u00a6 \u54e1\u82b8\u3067\u304b In Korean, lines are split on spaces \ud798\ucc28\uac8c \u00a6 -> \ud798\ucc28\uac8c \uc774\uc0c1 \u00a6 \uc774\uc0c1 \uc0ac\ub791\uc758 \u00a6 \uc0ac\ub791\uc758 \u00a6 Some characters may not appear at the start of a line (this applies to all text in all languages): })]?,;\u00a2\u00b0\u2032\u2033\u2030\u2103\u3001\u3002\uff61\uff64\uffe0\uff0c\uff0e\uff1a\uff1b\uff1f\uff01\uff05\u30fb\uff65\u309d\u309e\u30fd\u30fe\u30fc\u30a1\u30a3\u30a5\u30a7\u30a9\u30c3\u30e3\u30e5\u30e7\u30ee\u30f5\u30f6\u3041\u3043\u3045\u3047\u3049\u3063\u3083\u3085\u3087\u308e\u3095\u3096 \u31f0\u31f1\u31f2\u31f3\u31f4\u31f5\u31f6\u31f7\u31f8\u31f9\u31fa\u31fb\u31fc\u31fd\u31fe\u31ff\u3005\u303b\uff67\uff68\uff69\uff6a\uff6b\uff6c\uff6d\uff6e\uff6f\uff70\u201d\u3009\u300b\u300d\u300f\u3011\u3015\uff09\uff3d\uff5d\uff63 \u3042\u3042\u3042\u3042\u3041\u3042 -> \u3042\u3042\u3042 \u00a6 \u00a6 \u3042\u3041\u3042 \u00a6 Unless there was a space before \u3042\u3042\u3042\u3042 \u3041\u3042 -> \u3042\u3042\u3042\u3042 \u00a6 \u00a6 \u3041\u3042 \u00a6 And some may not end a line: ([{\u2018\u201c\u3008\u300a\u300c\u300e\u3010\u3014\uff08\uff3b\uff5b\uff62\u00a3\u00a5\uff04\uffe1\uffe5\uff0b \u8bf6\u8bf6\u8bf6\u300a\u8bf6\u8bf6\u8bf6 -> \u8bf6\u8bf6\u8bf6 \u00a6 \u00a6 \u300a\u8bf6\u8bf6\u8bf6 \u00a6 Unless there was a space after \u8bf6\u8bf6\u8bf6\u300a \u8bf6\u8bf6\u8bf6 -> \u8bf6\u8bf6\u8bf6\u300a \u00a6 \u00a6 \u8bf6\u8bf6\u8bf6 \u00a6",
            "title": "Special Characters"
        },
        {
            "location": "specs/features/special-characters/#special-characters",
            "text": "Wrapping should work with any characters. language: \"markdown\" \u044f \u044f \u044f -> \u044f \u044f \u00a6 \u044f \u00a6 \u044f \u044f \u00a6 language: \"csharp\" // \u044f \u044f \u044f -> // \u044f \u044f \u00a6 // \u044f \u00a6 // \u044f \u044f \u00a6",
            "title": "Special Characters"
        },
        {
            "location": "specs/features/special-characters/#east-asian-characters",
            "text": "East Asian (CJK) languages are also supported. Most CJK glyphs take up two columns, and wrapping can come after most characters. language: markdown Chinese \u518d\u821e\u5fc3\u73fe\u5f35\u5426\u91cc\u6848 -> \u518d\u821e\u5fc3\u73fe \u00a6 \u00a6 \u5f35\u5426\u91cc\u6848 Japanese \u653f\u79cb\u9020\u30ec\u54e1\u82b8\u3067\u304b -> \u653f\u79cb\u9020\u30ec \u00a6 \u00a6 \u54e1\u82b8\u3067\u304b In Korean, lines are split on spaces \ud798\ucc28\uac8c \u00a6 -> \ud798\ucc28\uac8c \uc774\uc0c1 \u00a6 \uc774\uc0c1 \uc0ac\ub791\uc758 \u00a6 \uc0ac\ub791\uc758 \u00a6 Some characters may not appear at the start of a line (this applies to all text in all languages): })]?,;\u00a2\u00b0\u2032\u2033\u2030\u2103\u3001\u3002\uff61\uff64\uffe0\uff0c\uff0e\uff1a\uff1b\uff1f\uff01\uff05\u30fb\uff65\u309d\u309e\u30fd\u30fe\u30fc\u30a1\u30a3\u30a5\u30a7\u30a9\u30c3\u30e3\u30e5\u30e7\u30ee\u30f5\u30f6\u3041\u3043\u3045\u3047\u3049\u3063\u3083\u3085\u3087\u308e\u3095\u3096 \u31f0\u31f1\u31f2\u31f3\u31f4\u31f5\u31f6\u31f7\u31f8\u31f9\u31fa\u31fb\u31fc\u31fd\u31fe\u31ff\u3005\u303b\uff67\uff68\uff69\uff6a\uff6b\uff6c\uff6d\uff6e\uff6f\uff70\u201d\u3009\u300b\u300d\u300f\u3011\u3015\uff09\uff3d\uff5d\uff63 \u3042\u3042\u3042\u3042\u3041\u3042 -> \u3042\u3042\u3042 \u00a6 \u00a6 \u3042\u3041\u3042 \u00a6 Unless there was a space before \u3042\u3042\u3042\u3042 \u3041\u3042 -> \u3042\u3042\u3042\u3042 \u00a6 \u00a6 \u3041\u3042 \u00a6 And some may not end a line: ([{\u2018\u201c\u3008\u300a\u300c\u300e\u3010\u3014\uff08\uff3b\uff5b\uff62\u00a3\u00a5\uff04\uffe1\uffe5\uff0b \u8bf6\u8bf6\u8bf6\u300a\u8bf6\u8bf6\u8bf6 -> \u8bf6\u8bf6\u8bf6 \u00a6 \u00a6 \u300a\u8bf6\u8bf6\u8bf6 \u00a6 Unless there was a space after \u8bf6\u8bf6\u8bf6\u300a \u8bf6\u8bf6\u8bf6 -> \u8bf6\u8bf6\u8bf6\u300a \u00a6 \u00a6 \u8bf6\u8bf6\u8bf6 \u00a6",
            "title": "East Asian characters"
        },
        {
            "location": "specs/features/tabs/",
            "text": "Tabs Plain text Tabs in the indent are preserved. As long as tab stops represent more that 1 space in the editor, a single tab character will separate paragraphs by indent. language: \"plaintext\", tabWidth: 2 -\u2192a b c -> -\u2192a b\u00a6 -\u2192d \u00a6 -\u2192c d\u00a6 -\u2192-\u2192e f -\u2192-\u2192e\u00a6 \u00a6 -\u2192-\u2192f\u00a6 Comments language: \"c\", tabWidth: 4 All tabs in the comment prefix are preserved. ---\u2192//-\u2192text text text -> ---\u2192//-\u2192text text \u00a6 ---\u2192//-\u2192text \u00a6 ---\u2192//-\u2192text text \u00a6 Odd cases It also works with a mix of tabs and spaces on one line \u00b7\u00b7-\u2192\u00b7// text text text -> \u00b7\u00b7-\u2192\u00b7// text text \u00a6 \u00a6 \u00b7\u00b7-\u2192\u00b7// text \u00a6 Tabs in the comment content can make things tricky, and therefore all tabs that appear after the column where text begins are converted to spaces when wrapping. ---\u2192//\u00b7text text text -> ---\u2192//\u00b7text text \u00a6 ---\u2192//-\u2192text \u00a6 ---\u2192//\u00b7\u00b7text text \u00a6 Markdown Because tab characters in the middle of a line could produce weird results when wrapping, all tabs are replaced with the correct number of spaces when wrapping. This only happens on lines that are wrapped.",
            "title": "Tabs"
        },
        {
            "location": "specs/features/tabs/#tabs",
            "text": "",
            "title": "Tabs"
        },
        {
            "location": "specs/features/tabs/#plain-text",
            "text": "Tabs in the indent are preserved. As long as tab stops represent more that 1 space in the editor, a single tab character will separate paragraphs by indent. language: \"plaintext\", tabWidth: 2 -\u2192a b c -> -\u2192a b\u00a6 -\u2192d \u00a6 -\u2192c d\u00a6 -\u2192-\u2192e f -\u2192-\u2192e\u00a6 \u00a6 -\u2192-\u2192f\u00a6",
            "title": "Plain text"
        },
        {
            "location": "specs/features/tabs/#comments",
            "text": "language: \"c\", tabWidth: 4 All tabs in the comment prefix are preserved. ---\u2192//-\u2192text text text -> ---\u2192//-\u2192text text \u00a6 ---\u2192//-\u2192text \u00a6 ---\u2192//-\u2192text text \u00a6",
            "title": "Comments"
        },
        {
            "location": "specs/features/tabs/#odd-cases",
            "text": "It also works with a mix of tabs and spaces on one line \u00b7\u00b7-\u2192\u00b7// text text text -> \u00b7\u00b7-\u2192\u00b7// text text \u00a6 \u00a6 \u00b7\u00b7-\u2192\u00b7// text \u00a6 Tabs in the comment content can make things tricky, and therefore all tabs that appear after the column where text begins are converted to spaces when wrapping. ---\u2192//\u00b7text text text -> ---\u2192//\u00b7text text \u00a6 ---\u2192//-\u2192text \u00a6 ---\u2192//\u00b7\u00b7text text \u00a6",
            "title": "Odd cases"
        },
        {
            "location": "specs/features/tabs/#markdown",
            "text": "Because tab characters in the middle of a line could produce weird results when wrapping, all tabs are replaced with the correct number of spaces when wrapping. This only happens on lines that are wrapped.",
            "title": "Markdown"
        }
    ]
}